/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE swig_types[0]
#define SWIGTYPE_p_SLArbitraryFFT_t swig_types[1]
#define SWIGTYPE_p_SLArrayIndex_t swig_types[2]
#define SWIGTYPE_p_SLChar_t swig_types[3]
#define SWIGTYPE_p_SLComplexPolar_s swig_types[4]
#define SWIGTYPE_p_SLComplexRect_s swig_types[5]
#define SWIGTYPE_p_SLData_t swig_types[6]
#define SWIGTYPE_p_SLError_t swig_types[7]
#define SWIGTYPE_p_SLFixData_t swig_types[8]
#define SWIGTYPE_p_SLImageData_t swig_types[9]
#define SWIGTYPE_p_SLInt16_t swig_types[10]
#define SWIGTYPE_p_SLInt32_t swig_types[11]
#define SWIGTYPE_p_SLMicrophone_s swig_types[12]
#define SWIGTYPE_p_SLNeuralNetworkPrediction_s swig_types[13]
#define SWIGTYPE_p_SLStatus_t swig_types[14]
#define SWIGTYPE_p_SLUInt16_t swig_types[15]
#define SWIGTYPE_p_SLUInt32_t swig_types[16]
#define SWIGTYPE_p_SLUInt8_t swig_types[17]
#define SWIGTYPE_p_SLWavFileInfo_s swig_types[18]
#define SWIGTYPE_p_double swig_types[19]
#define SWIGTYPE_p_fenv_t swig_types[20]
#define SWIGTYPE_p_fexcept_t swig_types[21]
#define SWIGTYPE_p_float swig_types[22]
#define SWIGTYPE_p_int swig_types[23]
#define SWIGTYPE_p_long swig_types[24]
#define SWIGTYPE_p_long_long swig_types[25]
#define SWIGTYPE_p_p_SLData_t swig_types[26]
#define SWIGTYPE_p_short swig_types[27]
#define SWIGTYPE_p_signed_char swig_types[28]
#define SWIGTYPE_p_std__complexT_double_t swig_types[29]
#define SWIGTYPE_p_std__complexT_float_t swig_types[30]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[31]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[32]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[33]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[34]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[35]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[36]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[37]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[38]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[39]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[40]
#define SWIGTYPE_p_unsigned_char swig_types[41]
#define SWIGTYPE_p_unsigned_int swig_types[42]
#define SWIGTYPE_p_unsigned_long swig_types[43]
#define SWIGTYPE_p_unsigned_long_long swig_types[44]
#define SWIGTYPE_p_unsigned_short swig_types[45]
static swig_type_info *swig_types[47];
static swig_module_info swig_module = {swig_types, 46, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "siglib"
#define SWIG_init      luaopen_siglib
#define SWIG_init_user luaopen_siglib_user

#define SWIG_LUACODE   luaopen_siglib_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "siglib.h"


#include <stdint.h>		// Use the C99 official header


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <complex>
#include <valarray>
#include <fenv.h>


#include <complex>


#include <limits>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }


    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
 
        
    template<typename T> T abs(const T& x) { return std::abs(x); }
    template<typename T> T fabs(const T& x) { return std::fabs(x); }
    template<typename T> T acos(const T& x) { return std::acos(x); }
    template<typename T> T acosh(const T& x) { return std::acosh(x); }
    template<typename T> T asinh(const T& x) { return std::asinh(x); }
    template<typename T> T asin(const T& x) { return std::asinh(x); }
    template<typename T> T atan(const T& x) { return std::atan(x); }
    template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
    template<typename T> T atanh(const T& x) { return std::atanh(x); }
    template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
    template<typename T> T ceil(const T& x) { return std::ceil(x); }    
    template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
    template<typename T> T cos(const T& x) { return std::cos(x); }
    template<typename T> T cosh(const T& x) { return std::cosh(x); }
    template<typename T> T erf(const T& x) { return std::erf(x); }
    template<typename T> T erfc(const T& x) { return std::erfc(x); }
    template<typename T> T exp(const T& x) { return std::exp(x); }
    template<typename T> T exp2(const T& x) { return std::exp2(x); }
    template<typename T> T expm1(const T& x) { return std::expm1(x); }
    template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
    template<typename T> T floor(const T & x) { return std::floor(x); }
    template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
    template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
    template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
    template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
    template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
    template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
    template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
    template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
    template<typename T> bool isinf(const T & x) { return std::isinf(x); }
    template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
    template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
    template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
    template<typename T> bool isnan(const T & x) { return std::isnan(x); }
    template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
    template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
    template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
    template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
    template<typename T> T llrint(const T & x) { return std::llrint(x); }
    template<typename T> T llround(const T & x) { return std::llround(x); }
    template<typename T> T log(const T & x) { return std::log(x); }
    template<typename T> T log10(const T & x) { return std::log10(x); }
    template<typename T> T log1p(const T & x) { return std::log1p(x); }
    template<typename T> T log2(const T & x) { return std::log2(x); }
    template<typename T> T logb(const T & x) { return std::logb(x); }
    template<typename T> T lrint(const T & x) { return std::lrint(x); }
    template<typename T> T lround(const T & x) { return std::lround(x); }
    template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
    template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
    template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
    template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
    template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
    template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
    template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
    template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
    template<typename T> T rint(const T& x) { return std::rint(x); }
    template<typename T> T round(const T& x) { return std::round(x); }
    template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
    template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
    template<typename T> bool signbit(const T & x) { return signbit(x); }
    template<typename T> T sin(const T& x) { return std::sin(x); }
    template<typename T> T sinh(const T& x) { return std::sinh(x); }    
    template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
    template<typename T> T square(const T& x) { return x*x; }
    template<typename T> T cube(const T& x) { return x*x*x; }
    template<typename T> T tan(const T& x) { return std::tan(x); }
    template<typename T> T tanh(const T& x) { return std::tanh(x); }        
    template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
    template<typename T> T trunc(const T& x) { return std::trunc(x); }
    double Huge() { return HUGE_VAL; }
    float Hugef() { return HUGE_VALF; }
    double Infinity() { return INFINITY; }
    double NaN() { return NAN; }

    


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_crealf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::real< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("crealf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR real< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_creald(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::real< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("creald",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR real< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cimagf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::imag< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cimagf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR imag< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cimagd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::imag< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cimagd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR imag< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cabsf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cabsf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR abs< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cabsd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::abs< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cabsd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR abs< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cargf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::arg< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cargf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR arg< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cargd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::arg< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cargd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR arg< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cnormf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::norm< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cnormf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR norm< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cnormd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::norm< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cnormd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR norm< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cprojf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::proj< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cprojf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cprojf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::proj< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cprojf",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cprojf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cprojf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cprojf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cprojf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::proj< float >(std::complex< float > const &)\n"
    "    std::proj< double >(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cpolarf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::polar< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::polar< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolarf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_cpolarf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cpolarf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cpolarf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< float >(float const &,float const &)\n"
    "    std::polar< float >(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cpolard__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::polar< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< double >((double const &)*arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolard__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::polar< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< double >((double const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolard(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_cpolard__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cpolard__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cpolard'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< double >(double const &,double const &)\n"
    "    std::polar< double >(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cexpf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::exp< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cexpf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR exp< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cexpd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::exp< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::exp< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cexpd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR exp< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clogf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("clogf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clogd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::log< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("clogd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clog10f(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log10< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("clog10f",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log10< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clog10d(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::log10< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log10< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("clog10d",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log10< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpowf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< float >",1,"std::complex< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< float >",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cpowf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cpowf",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< float >((std::complex< float > const &)*arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpowd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< double >",1,"std::complex< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< double >",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cpowd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cpowd",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< double >((std::complex< double > const &)*arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csqrtf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sqrt< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("csqrtf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csqrtd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sqrt< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sqrt< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("csqrtd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sqrt< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csinf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("csinf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csind(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sin< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("csind",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccosf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ccosf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccosd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::cos< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ccosd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ctanf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctand(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::tan< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ctand",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("casinf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casind(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::asin< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("casind",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacosf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cacosf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacosd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::acos< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cacosd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("catanf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catand(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::atan< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("catand",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csinhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("csinhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csinhd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sinh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("csinhd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccoshf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ccoshf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccoshd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::cosh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ccoshd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("ctanhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ctanhd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::tanh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ctanhd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("casinhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_casinhd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::asinh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("casinhd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacoshf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cacoshf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cacoshd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::acosh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cacoshd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanhf(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("catanhf",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_catanhd(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::atanh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("catanhd",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_float_complex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_complex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_complex_methods[]= {
    { "real", _wrap_float_complex_real},
    { "imag", _wrap_float_complex_imag},
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};
static swig_lua_method swig_float_complex_meta[] = {
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_float_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_complex_Sf_SwigStatic = {
    "float_complex",
    swig_float_complex_Sf_SwigStatic_methods,
    swig_float_complex_Sf_SwigStatic_attributes,
    swig_float_complex_Sf_SwigStatic_constants,
    swig_float_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_complex_bases[] = {0};
static const char *swig_float_complex_base_names[] = {0};
static swig_lua_class _wrap_class_float_complex = { "float_complex", "float_complex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_float_complex, swig_delete_float_complex, swig_float_complex_methods, swig_float_complex_attributes, &swig_float_complex_Sf_SwigStatic, swig_float_complex_meta, swig_float_complex_bases, swig_float_complex_base_names };

static int _wrap_new_double_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_methods[]= {
    { "real", _wrap_double_complex_real},
    { "imag", _wrap_double_complex_imag},
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};
static swig_lua_method swig_double_complex_meta[] = {
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_double_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_Sf_SwigStatic = {
    "double_complex",
    swig_double_complex_Sf_SwigStatic_methods,
    swig_double_complex_Sf_SwigStatic_attributes,
    swig_double_complex_Sf_SwigStatic_constants,
    swig_double_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_bases[] = {0};
static const char *swig_double_complex_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex = { "double_complex", "double_complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_double_complex, swig_delete_double_complex, swig_double_complex_methods, swig_double_complex_attributes, &swig_double_complex_Sf_SwigStatic, swig_double_complex_meta, swig_double_complex_bases, swig_double_complex_base_names };

static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Huge",0,0)
  result = (double)Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Hugef",0,0)
  result = (float)Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Infinity",0,0)
  result = (double)Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("NaN",0,0)
  result = (double)NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("abs< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)abs< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cube< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cube< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cube< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sqrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sqrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log10< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log10< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("logb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)logb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("pow< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)pow< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("floor< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)floor< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("atan2< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)atan2< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("copysign< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)copysign< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erf< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erfc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erfc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("expm1< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)expm1< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fdim< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fdim< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("fma< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f32 >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)fma< f32 >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmax< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmax< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmin< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmin< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmod< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmod< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("hypot< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)hypot< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("ldexp< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)ldexp< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log1p< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log1p< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nan< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanf< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanl< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("nearbyint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)nearbyint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nextafter< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nextafter< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nexttoward< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nexttoward< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("remainder< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)remainder< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("rint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)rint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("round< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)round< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbln< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f32 >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)scalbln< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbn< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)scalbn< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("square< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)square< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("trunc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)trunc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("abs< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)abs< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sqrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sqrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log10< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log10< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("logb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)logb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("pow< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)pow< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("floor< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)floor< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("atan2< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)atan2< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("copysign< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)copysign< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erf< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erfc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erfc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("expm1< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)expm1< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fdim< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fdim< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("fma< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f64 >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)fma< f64 >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmax< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmax< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmin< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmin< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmod< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmod< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("hypot< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)hypot< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("ldexp< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)ldexp< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log1p< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log1p< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nan< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanf< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanl< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("nearbyint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)nearbyint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nextafter< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nextafter< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nexttoward< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nexttoward< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("remainder< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)remainder< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("rint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)rint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("round< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)round< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbln< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f64 >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)scalbln< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbn< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)scalbn< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("square< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)square< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("trunc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)trunc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feclearexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feclearexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feclearexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feclearexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fegetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetexceptflag",1,"fexcept_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fegetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fegetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fegetexceptflag(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feraiseexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feraiseexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feraiseexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feraiseexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fesetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetexceptflag",1,"fexcept_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fesetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fesetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fesetexceptflag((fexcept_t const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fetestexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fetestexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fetestexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fetestexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetround(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("fegetround",0,0)
  result = (int)fegetround();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetround(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fesetround",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fesetround",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fesetround(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fegetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetenv",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fegetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fegetenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feholdexcept(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feholdexcept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feholdexcept",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feholdexcept",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feholdexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fesetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fesetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fesetenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feupdateenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feupdateenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feupdateenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feupdateenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feupdateenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_SiglibVersion(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t result;
  
  SWIG_check_num_args("SUF_SiglibVersion",0,0)
  result = SUF_SiglibVersion();
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SUF_PrintArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_PrintArray",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_PrintArray",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_PrintArray",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SUF_PrintArray((SLData_t const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintFixedPointArray(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SUF_PrintFixedPointArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_PrintFixedPointArray",1,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_PrintFixedPointArray",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_PrintFixedPointArray",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_PrintFixedPointArray",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SUF_PrintFixedPointArray((SLArrayIndex_t const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintComplexArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SUF_PrintComplexArray",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_PrintComplexArray",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_PrintComplexArray",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_PrintComplexArray",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintComplexArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintComplexArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_PrintComplexArray",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SUF_PrintComplexArray((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintMatrix(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SUF_PrintMatrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_PrintMatrix",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_PrintMatrix",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_PrintMatrix",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintMatrix",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_PrintMatrix",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_PrintMatrix",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SUF_PrintMatrix((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s arg1 ;
  SLComplexPolar_s *argp1 ;
  
  SWIG_check_num_args("SUF_PrintPolar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_PrintPolar",1,"SLComplexPolar_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SUF_PrintPolar",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  arg1 = *argp1;
  
  SUF_PrintPolar(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintRectangular(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  
  SWIG_check_num_args("SUF_PrintRectangular",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_PrintRectangular",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SUF_PrintRectangular",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  SUF_PrintRectangular(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintIIRCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SUF_PrintIIRCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_PrintIIRCoefficients",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_PrintIIRCoefficients",2,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintIIRCoefficients",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_PrintIIRCoefficients",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SUF_PrintIIRCoefficients((SLData_t const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintCount(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("SUF_PrintCount",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_PrintCount",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  SUF_PrintCount((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintHigher(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  char *arg3 = (char *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  
  SWIG_check_num_args("SUF_PrintHigher",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_PrintHigher",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_PrintHigher",2,"SLData_t const");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SUF_PrintHigher",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintHigher",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintHigher",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  SUF_PrintHigher(arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_PrintLower(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  char *arg3 = (char *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  
  SWIG_check_num_args("SUF_PrintLower",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_PrintLower",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_PrintLower",2,"SLData_t const");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SUF_PrintLower",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintLower",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_PrintLower",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  SUF_PrintLower(arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_ClearDebugfprintf(lua_State* L) {
  int SWIG_arg = 0;
  SLError_t result;
  
  SWIG_check_num_args("SUF_ClearDebugfprintf",0,0)
  result = SUF_ClearDebugfprintf();
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_Debugfprintf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_Debugfprintf",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_Debugfprintf",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = SUF_Debugfprintf((char const *)arg1,arg2);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DebugPrintArray",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_DebugPrintArray",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintArray",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SUF_DebugPrintArray((SLData_t const *)arg1,arg2);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintFixedPointArray(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintFixedPointArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DebugPrintFixedPointArray",1,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_DebugPrintFixedPointArray",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintFixedPointArray",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintFixedPointArray",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SUF_DebugPrintFixedPointArray((SLArrayIndex_t const *)arg1,arg2);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintComplexArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintComplexArray",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DebugPrintComplexArray",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_DebugPrintComplexArray",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_DebugPrintComplexArray",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintComplexArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintComplexArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintComplexArray",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_DebugPrintComplexArray((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintMatrix(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintMatrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DebugPrintMatrix",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_DebugPrintMatrix",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_DebugPrintMatrix",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintMatrix",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintMatrix",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintMatrix",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_DebugPrintMatrix((SLData_t const *)arg1,arg2,arg3);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s arg1 ;
  SLComplexPolar_s *argp1 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintPolar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_DebugPrintPolar",1,"SLComplexPolar_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SUF_DebugPrintPolar",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  arg1 = *argp1;
  
  result = SUF_DebugPrintPolar(arg1);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintRectangular(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintRectangular",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_DebugPrintRectangular",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SUF_DebugPrintRectangular",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SUF_DebugPrintRectangular(arg1);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintIIRCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintIIRCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DebugPrintIIRCoefficients",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_DebugPrintIIRCoefficients",2,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintIIRCoefficients",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintIIRCoefficients",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SUF_DebugPrintIIRCoefficients((SLData_t const *)arg1,arg2);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintCount(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintCount",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_DebugPrintCount",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = SUF_DebugPrintCount((char const *)arg1);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintHigher(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  char *arg3 = (char *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintHigher",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_DebugPrintHigher",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_DebugPrintHigher",2,"SLData_t const");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SUF_DebugPrintHigher",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintHigher",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintHigher",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  result = SUF_DebugPrintHigher(arg1,arg2,(char const *)arg3);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DebugPrintLower(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  char *arg3 = (char *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLError_t result;
  
  SWIG_check_num_args("SUF_DebugPrintLower",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_DebugPrintLower",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_DebugPrintLower",2,"SLData_t const");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SUF_DebugPrintLower",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintLower",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DebugPrintLower",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  result = SUF_DebugPrintLower(arg1,arg2,(char const *)arg3);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_StrError(lua_State* L) {
  int SWIG_arg = 0;
  SLError_t arg1 ;
  SLError_t *argp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("SUF_StrError",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_StrError",1,"SLError_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLError_t,0))){
    SWIG_fail_ptr("SUF_StrError",1,SWIGTYPE_p_SLError_t);
  }
  arg1 = *argp1;
  
  result = (char *)SUF_StrError(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_BinReadData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_BinReadData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_BinReadData",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_BinReadData",2,"FILE *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SUF_BinReadData",3,"char const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_BinReadData",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_BinReadData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_BinReadData",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_BinReadData",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SUF_BinReadData(arg1,arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_BinWriteData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_BinWriteData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_BinWriteData",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_BinWriteData",2,"FILE *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SUF_BinWriteData",3,"char const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_BinWriteData",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_BinWriteData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_BinWriteData",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_BinWriteData",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SUF_BinWriteData((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_BinReadFile(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_BinReadFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_BinReadFile",1,"SLData_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_BinReadFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SUF_BinReadFile",3,"char const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_BinReadFile",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_BinReadFile",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_BinReadFile",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SUF_BinReadFile(arg1,(char const *)arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_BinWriteFile(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_BinWriteFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_BinWriteFile",1,"SLData_t const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_BinWriteFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("SUF_BinWriteFile",3,"char const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_BinWriteFile",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_BinWriteFile",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_BinWriteFile",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SUF_BinWriteFile((SLData_t const *)arg1,(char const *)arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_CsvReadData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_CsvReadData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_CsvReadData",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_CsvReadData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_CsvReadData",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_CsvReadData",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_CsvReadData",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvReadData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_CsvReadData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvReadData",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvReadData",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvReadData",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SUF_CsvReadData(arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_CsvWriteData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_CsvWriteData",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_CsvWriteData",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_CsvWriteData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_CsvWriteData",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_CsvWriteData",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_CsvWriteData",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SUF_CsvWriteData",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_CsvWriteData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteData",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteData",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteData",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteData",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SUF_CsvWriteData((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_CsvReadFile(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_CsvReadFile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_CsvReadFile",1,"SLData_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_CsvReadFile",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_CsvReadFile",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_CsvReadFile",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_CsvReadFile",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvReadFile",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvReadFile",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvReadFile",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvReadFile",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SUF_CsvReadFile(arg1,(char const *)arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_CsvWriteFile(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_CsvWriteFile",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_CsvWriteFile",1,"SLData_t const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_CsvWriteFile",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_CsvWriteFile",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_CsvWriteFile",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_CsvWriteFile",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SUF_CsvWriteFile",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteFile",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteFile",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteFile",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteFile",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvWriteFile",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SUF_CsvWriteFile((SLData_t const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_CsvReadMatrix(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t **arg1 = (SLData_t **) 0 ;
  char *arg2 = (char *) 0 ;
  enum SLFileReadFirstRowFlag_t arg3 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_CsvReadMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_CsvReadMatrix",1,"SLData_t **");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_CsvReadMatrix",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SUF_CsvReadMatrix",3,"enum SLFileReadFirstRowFlag_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SUF_CsvReadMatrix",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SUF_CsvReadMatrix",5,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_CsvReadMatrix",1,SWIGTYPE_p_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (enum SLFileReadFirstRowFlag_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvReadMatrix",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_CsvReadMatrix",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  result = SUF_CsvReadMatrix(arg1,(char const *)arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DatReadData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_DatReadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DatReadData",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_DatReadData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_DatReadData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DatReadData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_DatReadData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DatReadData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_DatReadData(arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DatWriteData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_DatWriteData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DatWriteData",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_DatWriteData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_DatWriteData",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_DatWriteData",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_DatWriteData",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DatWriteData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_DatWriteData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DatWriteData",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DatWriteData",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DatWriteData",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SUF_DatWriteData((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DatReadHeader(lua_State* L) {
  int SWIG_arg = 0;
  FILE *arg1 = (FILE *) 0 ;
  SLData_t result;
  
  SWIG_check_num_args("SUF_DatReadHeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DatReadHeader",1,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_DatReadHeader",1,SWIGTYPE_p_FILE);
  }
  
  result = SUF_DatReadHeader(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DatWriteHeader(lua_State* L) {
  int SWIG_arg = 0;
  FILE *arg1 = (FILE *) 0 ;
  SLData_t arg2 ;
  SLData_t *argp2 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_DatWriteHeader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DatWriteHeader",1,"FILE *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_DatWriteHeader",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_DatWriteHeader",1,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_DatWriteHeader",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SUF_DatWriteHeader(arg1,arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_SigReadData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_SigReadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_SigReadData",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_SigReadData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_SigReadData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_SigReadData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_SigReadData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_SigReadData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_SigReadData(arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_SigWriteData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_SigWriteData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_SigWriteData",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_SigWriteData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_SigWriteData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_SigWriteData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_SigWriteData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_SigWriteData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_SigWriteData((SLData_t const *)arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_SigReadFile(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_SigReadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_SigReadFile",1,"SLData_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_SigReadFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_SigReadFile",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = SUF_SigReadFile(arg1,(char const *)arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_SigWriteFile(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_SigWriteFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_SigWriteFile",1,"SLData_t const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_SigWriteFile",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_SigWriteFile",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_SigWriteFile",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_SigWriteFile",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_SigWriteFile((SLData_t const *)arg1,(char const *)arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_SigCountSamplesInFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_SigCountSamplesInFile",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_SigCountSamplesInFile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = SUF_SigCountSamplesInFile((char const *)arg1);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavReadData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLWavFileInfo_s arg3 ;
  SLArrayIndex_t arg4 ;
  SLWavFileInfo_s *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_WavReadData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_WavReadData",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_WavReadData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_WavReadData",3,"SLWavFileInfo_s const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_WavReadData",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WavReadData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_WavReadData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLWavFileInfo_s,0))){
    SWIG_fail_ptr("SUF_WavReadData",3,SWIGTYPE_p_SLWavFileInfo_s);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WavReadData",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SUF_WavReadData(arg1,arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavWriteData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLWavFileInfo_s arg3 ;
  SLArrayIndex_t arg4 ;
  SLWavFileInfo_s *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SUF_WavWriteData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_WavWriteData",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_WavWriteData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_WavWriteData",3,"SLWavFileInfo_s const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_WavWriteData",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WavWriteData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_WavWriteData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLWavFileInfo_s,0))){
    SWIG_fail_ptr("SUF_WavWriteData",3,SWIGTYPE_p_SLWavFileInfo_s);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WavWriteData",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SUF_WavWriteData((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavReadWord(lua_State* L) {
  int SWIG_arg = 0;
  FILE *arg1 = (FILE *) 0 ;
  short result;
  
  SWIG_check_num_args("SUF_WavReadWord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_WavReadWord",1,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_WavReadWord",1,SWIGTYPE_p_FILE);
  }
  
  result = (short)SUF_WavReadWord(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavWriteWord(lua_State* L) {
  int SWIG_arg = 0;
  short arg1 ;
  FILE *arg2 = (FILE *) 0 ;
  
  SWIG_check_num_args("SUF_WavWriteWord",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SUF_WavWriteWord",1,"short const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_WavWriteWord",2,"FILE *");
  arg1 = (short const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_WavWriteWord",2,SWIGTYPE_p_FILE);
  }
  
  SUF_WavWriteWord(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavReadHeader(lua_State* L) {
  int SWIG_arg = 0;
  FILE *arg1 = (FILE *) 0 ;
  SLWavFileInfo_s result;
  
  SWIG_check_num_args("SUF_WavReadHeader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_WavReadHeader",1,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_WavReadHeader",1,SWIGTYPE_p_FILE);
  }
  
  result = SUF_WavReadHeader(arg1);
  {
    SLWavFileInfo_s * resultptr = new SLWavFileInfo_s((const SLWavFileInfo_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLWavFileInfo_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavWriteHeader(lua_State* L) {
  int SWIG_arg = 0;
  FILE *arg1 = (FILE *) 0 ;
  SLWavFileInfo_s arg2 ;
  SLWavFileInfo_s *argp2 ;
  
  SWIG_check_num_args("SUF_WavWriteHeader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_WavWriteHeader",1,"FILE *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_WavWriteHeader",2,"SLWavFileInfo_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_WavWriteHeader",1,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLWavFileInfo_s,0))){
    SWIG_fail_ptr("SUF_WavWriteHeader",2,SWIGTYPE_p_SLWavFileInfo_s);
  }
  arg2 = *argp2;
  
  SUF_WavWriteHeader(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavDisplayInfo(lua_State* L) {
  int SWIG_arg = 0;
  SLWavFileInfo_s arg1 ;
  SLWavFileInfo_s *argp1 ;
  
  SWIG_check_num_args("SUF_WavDisplayInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_WavDisplayInfo",1,"SLWavFileInfo_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLWavFileInfo_s,0))){
    SWIG_fail_ptr("SUF_WavDisplayInfo",1,SWIGTYPE_p_SLWavFileInfo_s);
  }
  arg1 = *argp1;
  
  SUF_WavDisplayInfo(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavSetInfo(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t arg1 ;
  SLArrayIndex_t arg2 ;
  short arg3 ;
  short arg4 ;
  short arg5 ;
  short arg6 ;
  SLArrayIndex_t *argp1 ;
  SLArrayIndex_t *argp2 ;
  SLWavFileInfo_s result;
  
  SWIG_check_num_args("SUF_WavSetInfo",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_WavSetInfo",1,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_WavSetInfo",2,"SLArrayIndex_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SUF_WavSetInfo",3,"short const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SUF_WavSetInfo",4,"short const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SUF_WavSetInfo",5,"short const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SUF_WavSetInfo",6,"short const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WavSetInfo",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WavSetInfo",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  arg3 = (short const)lua_tonumber(L, 3);
  arg4 = (short const)lua_tonumber(L, 4);
  arg5 = (short const)lua_tonumber(L, 5);
  arg6 = (short const)lua_tonumber(L, 6);
  result = SUF_WavSetInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLWavFileInfo_s * resultptr = new SLWavFileInfo_s((const SLWavFileInfo_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLWavFileInfo_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavFileLength(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_WavFileLength",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_WavFileLength",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = SUF_WavFileLength((char const *)arg1);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavReadFile(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  SLWavFileInfo_s result;
  
  SWIG_check_num_args("SUF_WavReadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_WavReadFile",1,"SLData_t *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_WavReadFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WavReadFile",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = SUF_WavReadFile(arg1,(char const *)arg2);
  {
    SLWavFileInfo_s * resultptr = new SLWavFileInfo_s((const SLWavFileInfo_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLWavFileInfo_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavWriteFile(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  SLWavFileInfo_s arg3 ;
  SLArrayIndex_t arg4 ;
  SLWavFileInfo_s *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_WavWriteFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_WavWriteFile",1,"SLData_t const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_WavWriteFile",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_WavWriteFile",3,"SLWavFileInfo_s const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_WavWriteFile",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WavWriteFile",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLWavFileInfo_s,0))){
    SWIG_fail_ptr("SUF_WavWriteFile",3,SWIGTYPE_p_SLWavFileInfo_s);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WavWriteFile",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SUF_WavWriteFile((SLData_t const *)arg1,(char const *)arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WavWriteFileScaled(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  char *arg2 = (char *) 0 ;
  SLWavFileInfo_s arg3 ;
  SLArrayIndex_t arg4 ;
  SLWavFileInfo_s *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_WavWriteFileScaled",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_WavWriteFileScaled",1,"SLData_t const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SUF_WavWriteFileScaled",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_WavWriteFileScaled",3,"SLWavFileInfo_s const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_WavWriteFileScaled",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WavWriteFileScaled",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLWavFileInfo_s,0))){
    SWIG_fail_ptr("SUF_WavWriteFileScaled",3,SWIGTYPE_p_SLWavFileInfo_s);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WavWriteFileScaled",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SUF_WavWriteFileScaled((SLData_t const *)arg1,(char const *)arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_XmtReadData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_XmtReadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_XmtReadData",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_XmtReadData",2,"FILE *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_XmtReadData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_XmtReadData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("SUF_XmtReadData",2,SWIGTYPE_p_FILE);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_XmtReadData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_XmtReadData(arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WriteWeightsIntegerCFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_WriteWeightsIntegerCFile",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_WriteWeightsIntegerCFile",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_WriteWeightsIntegerCFile",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SUF_WriteWeightsIntegerCFile",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_WriteWeightsIntegerCFile",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_WriteWeightsIntegerCFile",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SUF_WriteWeightsIntegerCFile",6,"SLArrayIndex_t const");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsIntegerCFile",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsIntegerCFile",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsIntegerCFile",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsIntegerCFile",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsIntegerCFile",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SUF_WriteWeightsIntegerCFile((char const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WriteWeightsFloatCFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_WriteWeightsFloatCFile",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_WriteWeightsFloatCFile",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_WriteWeightsFloatCFile",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SUF_WriteWeightsFloatCFile",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_WriteWeightsFloatCFile",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_WriteWeightsFloatCFile",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SUF_WriteWeightsFloatCFile",6,"SLArrayIndex_t const");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsFloatCFile",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsFloatCFile",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsFloatCFile",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsFloatCFile",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsFloatCFile",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SUF_WriteWeightsFloatCFile((char const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_WriteWeightsBinaryFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_WriteWeightsBinaryFile",7,7)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_WriteWeightsBinaryFile",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_WriteWeightsBinaryFile",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SUF_WriteWeightsBinaryFile",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_WriteWeightsBinaryFile",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_WriteWeightsBinaryFile",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SUF_WriteWeightsBinaryFile",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SUF_WriteWeightsBinaryFile",7,"SLArrayIndex_t const");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsBinaryFile",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsBinaryFile",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsBinaryFile",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsBinaryFile",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsBinaryFile",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_WriteWeightsBinaryFile",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SUF_WriteWeightsBinaryFile((char const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_ReadWeightsBinaryFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_ReadWeightsBinaryFile",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SUF_ReadWeightsBinaryFile",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_ReadWeightsBinaryFile",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SUF_ReadWeightsBinaryFile",3,"SLData_t *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_ReadWeightsBinaryFile",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_ReadWeightsBinaryFile",3,SWIGTYPE_p_SLData_t);
  }
  
  result = SUF_ReadWeightsBinaryFile((char const *)arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Fft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_Fft",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Fft",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Fft",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Fft",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Fft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Fft",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Fft",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_Fft(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Rfft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Rfft",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Rfft",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Rfft",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Rfft",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Rfft",4,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Rfft",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Rfft",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfft",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfft",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfft",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Rfft(arg1,arg2,(SLData_t const *)arg3,(SLArrayIndex_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cfft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Cfft",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cfft",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cfft",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cfft",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cfft",4,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Cfft",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Cfft",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Cfft(arg1,arg2,(SLData_t const *)arg3,(SLArrayIndex_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cifft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Cifft",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cifft",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cifft",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cifft",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cifft",4,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Cifft",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Cifft",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cifft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cifft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cifft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cifft",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cifft",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cifft",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Cifft(arg1,arg2,(SLData_t const *)arg3,(SLArrayIndex_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_BitReverseReorder(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_BitReverseReorder",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_BitReverseReorder",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_BitReverseReorder",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_BitReverseReorder",3,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_BitReverseReorder",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BitReverseReorder",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BitReverseReorder",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BitReverseReorder",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BitReverseReorder",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_BitReverseReorder((SLData_t const *)arg1,arg2,(SLArrayIndex_t const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IndexBitReverseReorder(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_IndexBitReverseReorder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IndexBitReverseReorder",1,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IndexBitReverseReorder",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_IndexBitReverseReorder",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IndexBitReverseReorder",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IndexBitReverseReorder",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IndexBitReverseReorder",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_IndexBitReverseReorder((SLArrayIndex_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FastBitReverseReorder(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_FastBitReverseReorder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FastBitReverseReorder",1,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FastBitReverseReorder",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastBitReverseReorder",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastBitReverseReorder",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_FastBitReverseReorder(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RealRealCepstrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_RealRealCepstrum",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RealRealCepstrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RealRealCepstrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_RealRealCepstrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_RealRealCepstrum",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_RealRealCepstrum",5,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_RealRealCepstrum",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_RealRealCepstrum",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealRealCepstrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealRealCepstrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealRealCepstrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealRealCepstrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RealRealCepstrum",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RealRealCepstrum",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RealRealCepstrum",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_RealRealCepstrum(arg1,arg2,arg3,(SLData_t const *)arg4,(SLArrayIndex_t const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RealComplexCepstrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_RealComplexCepstrum",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RealComplexCepstrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RealComplexCepstrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_RealComplexCepstrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_RealComplexCepstrum",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_RealComplexCepstrum",5,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_RealComplexCepstrum",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_RealComplexCepstrum",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealComplexCepstrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealComplexCepstrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealComplexCepstrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealComplexCepstrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RealComplexCepstrum",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RealComplexCepstrum",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RealComplexCepstrum",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_RealComplexCepstrum(arg1,arg2,arg3,(SLData_t const *)arg4,(SLArrayIndex_t const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexComplexCepstrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_ComplexComplexCepstrum",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexComplexCepstrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexComplexCepstrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexComplexCepstrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexComplexCepstrum",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ComplexComplexCepstrum",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ComplexComplexCepstrum",6,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ComplexComplexCepstrum",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_ComplexComplexCepstrum",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexComplexCepstrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexComplexCepstrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexComplexCepstrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexComplexCepstrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexComplexCepstrum",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexComplexCepstrum",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexComplexCepstrum",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexComplexCepstrum",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_ComplexComplexCepstrum(arg1,arg2,arg3,arg4,(SLData_t const *)arg5,(SLArrayIndex_t const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FftTone(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_FftTone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FftTone",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FftTone",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FftTone",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftTone",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftTone",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftTone",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_FftTone(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RfftTone(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_RfftTone",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RfftTone",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RfftTone",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_RfftTone",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_RfftTone",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_RfftTone",5,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_RfftTone",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_RfftTone",7,"SLData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_RfftTone",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_RfftTone",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RfftTone",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_RfftTone((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,(SLArrayIndex_t const *)arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Rfftr(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Rfftr",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Rfftr",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Rfftr",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Rfftr",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Rfftr",4,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Rfftr",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Rfftr",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfftr",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfftr",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfftr",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfftr",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfftr",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfftr",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Rfftr(arg1,arg2,(SLData_t const *)arg3,(SLArrayIndex_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Fft4(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_Fft4",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Fft4",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Fft4",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Fft4",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Fft4",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Fft4",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Fft4",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_Fft4(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Rfft4(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Rfft4",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Rfft4",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Rfft4",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Rfft4",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Rfft4",4,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Rfft4",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Rfft4",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfft4",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfft4",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rfft4",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfft4",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfft4",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rfft4",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Rfft4(arg1,arg2,(SLData_t const *)arg3,(SLArrayIndex_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cfft4(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Cfft4",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cfft4",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cfft4",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cfft4",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cfft4",4,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Cfft4",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Cfft4",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft4",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft4",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft4",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft4",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft4",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft4",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Cfft4(arg1,arg2,(SLData_t const *)arg3,(SLArrayIndex_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DigitReverseReorder4(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_DigitReverseReorder4",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DigitReverseReorder4",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DigitReverseReorder4",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DigitReverseReorder4",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DigitReverseReorder4",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DigitReverseReorder4",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DigitReverseReorder4",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_DigitReverseReorder4((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IndexDigitReverseReorder4(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_IndexDigitReverseReorder4",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IndexDigitReverseReorder4",1,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IndexDigitReverseReorder4",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_IndexDigitReverseReorder4",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IndexDigitReverseReorder4",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IndexDigitReverseReorder4",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IndexDigitReverseReorder4",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_IndexDigitReverseReorder4((SLArrayIndex_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FastDigitReverseReorder4(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_FastDigitReverseReorder4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FastDigitReverseReorder4",1,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FastDigitReverseReorder4",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastDigitReverseReorder4",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastDigitReverseReorder4",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_FastDigitReverseReorder4(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cfft2rBy1c(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_Cfft2rBy1c",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cfft2rBy1c",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cfft2rBy1c",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cfft2rBy1c",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cfft2rBy1c",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Cfft2rBy1c",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Cfft2rBy1c",6,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Cfft2rBy1c",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Cfft2rBy1c",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1c",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1c",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1c",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1c",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1c",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1c",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1c",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1c",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_Cfft2rBy1c(arg1,arg2,arg3,arg4,(SLData_t const *)arg5,(SLArrayIndex_t const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cfft2rBy1cr(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_Cfft2rBy1cr",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cfft2rBy1cr",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cfft2rBy1cr",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cfft2rBy1cr",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cfft2rBy1cr",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Cfft2rBy1cr",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Cfft2rBy1cr",6,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Cfft2rBy1cr",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Cfft2rBy1cr",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1cr",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1cr",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1cr",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1cr",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1cr",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1cr",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1cr",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft2rBy1cr",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_Cfft2rBy1cr(arg1,arg2,arg3,arg4,(SLData_t const *)arg5,(SLArrayIndex_t const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cfft42rBy1c(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_Cfft42rBy1c",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cfft42rBy1c",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cfft42rBy1c",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cfft42rBy1c",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cfft42rBy1c",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Cfft42rBy1c",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Cfft42rBy1c",6,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Cfft42rBy1c",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Cfft42rBy1c",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1c",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1c",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1c",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1c",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1c",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1c",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1c",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1c",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_Cfft42rBy1c(arg1,arg2,arg3,arg4,(SLData_t const *)arg5,(SLArrayIndex_t const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cfft42rBy1cr(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_Cfft42rBy1cr",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cfft42rBy1cr",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cfft42rBy1cr",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cfft42rBy1cr",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cfft42rBy1cr",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Cfft42rBy1cr",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Cfft42rBy1cr",6,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Cfft42rBy1cr",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Cfft42rBy1cr",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1cr",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1cr",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1cr",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1cr",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1cr",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1cr",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1cr",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cfft42rBy1cr",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_Cfft42rBy1cr(arg1,arg2,arg3,arg4,(SLData_t const *)arg5,(SLArrayIndex_t const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Cfft2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  
  SWIG_check_num_args("SDS_Cfft2",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Cfft2",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Cfft2",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Cfft2",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_Cfft2",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_Cfft2",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_Cfft2",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_Cfft2",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_Cfft2",8,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft2",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft2",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft2",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft2",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft2",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft2",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft2",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft2",8,SWIGTYPE_p_SLData_t);
  }
  
  SDS_Cfft2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cfft2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SDA_Cfft2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cfft2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cfft2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cfft2",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cfft2",4,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft2",4,SWIGTYPE_p_SLData_t);
  }
  
  SDA_Cfft2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Cfft3(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  
  SWIG_check_num_args("SDS_Cfft3",12,12)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Cfft3",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Cfft3",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Cfft3",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_Cfft3",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_Cfft3",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_Cfft3",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_Cfft3",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_Cfft3",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_Cfft3",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_Cfft3",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDS_Cfft3",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDS_Cfft3",12,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Cfft3",12,SWIGTYPE_p_SLData_t);
  }
  
  SDS_Cfft3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cfft3(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SDA_Cfft3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cfft3",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cfft3",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cfft3",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cfft3",4,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft3",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft3",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft3",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cfft3",4,SWIGTYPE_p_SLData_t);
  }
  
  SDA_Cfft3((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ZoomFft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg17 ;
  SLArrayIndex_t arg18 ;
  SLArrayIndex_t arg19 ;
  SLArrayIndex_t arg20 ;
  SLArrayIndex_t *argp17 ;
  SLArrayIndex_t *argp18 ;
  SLArrayIndex_t *argp19 ;
  SLArrayIndex_t *argp20 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_ZoomFft",20,20)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ZoomFft",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ZoomFft",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_ZoomFft",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ZoomFft",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_ZoomFft",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_ZoomFft",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_ZoomFft",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_ZoomFft",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_ZoomFft",9,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_ZoomFft",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_ZoomFft",11,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_ZoomFft",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_ZoomFft",13,"SLData_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SIF_ZoomFft",14,"SLData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SIF_ZoomFft",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SIF_ZoomFft",16,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SIF_ZoomFft",17,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SIF_ZoomFft",18,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SIF_ZoomFft",19,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,20)) SWIG_fail_arg("SIF_ZoomFft",20,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg19 = *argp19;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&argp20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFft",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg20 = *argp20;
  
  result = SIF_ZoomFft(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ZoomFft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLData_t *arg16 = (SLData_t *) 0 ;
  SLData_t *arg17 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg18 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg19 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg20 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg21 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg22 = (SLData_t *) 0 ;
  SLData_t *arg23 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg24 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg25 ;
  SLArrayIndex_t arg26 ;
  SLArrayIndex_t arg27 ;
  SLFixData_t arg28 ;
  SLFixData_t arg29 ;
  SLArrayIndex_t arg30 ;
  SLArrayIndex_t arg31 ;
  SLData_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp25 ;
  SLArrayIndex_t *argp26 ;
  SLArrayIndex_t *argp27 ;
  SLFixData_t *argp28 ;
  SLFixData_t *argp29 ;
  SLArrayIndex_t *argp30 ;
  SLArrayIndex_t *argp31 ;
  
  SWIG_check_num_args("SDA_ZoomFft",31,31)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ZoomFft",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ZoomFft",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ZoomFft",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ZoomFft",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ZoomFft",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ZoomFft",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_ZoomFft",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_ZoomFft",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_ZoomFft",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_ZoomFft",10,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_ZoomFft",11,"SLData_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_ZoomFft",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_ZoomFft",13,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_ZoomFft",14,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_ZoomFft",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_ZoomFft",16,"SLData_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_ZoomFft",17,"SLData_t const *");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDA_ZoomFft",18,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDA_ZoomFft",19,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SDA_ZoomFft",20,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,21)) SWIG_fail_arg("SDA_ZoomFft",21,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,22)) SWIG_fail_arg("SDA_ZoomFft",22,"SLData_t const *");
  if(!SWIG_isptrtype(L,23)) SWIG_fail_arg("SDA_ZoomFft",23,"SLData_t const *");
  if(!SWIG_isptrtype(L,24)) SWIG_fail_arg("SDA_ZoomFft",24,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,25)) SWIG_fail_arg("SDA_ZoomFft",25,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,26)) SWIG_fail_arg("SDA_ZoomFft",26,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,27)) SWIG_fail_arg("SDA_ZoomFft",27,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,28)) SWIG_fail_arg("SDA_ZoomFft",28,"SLFixData_t const");
  if(!lua_isuserdata(L,29)) SWIG_fail_arg("SDA_ZoomFft",29,"SLFixData_t const");
  if(!lua_isuserdata(L,30)) SWIG_fail_arg("SDA_ZoomFft",30,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,31)) SWIG_fail_arg("SDA_ZoomFft",31,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",11,SWIGTYPE_p_SLData_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",16,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",17,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&arg21,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",21,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&arg22,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",22,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&arg23,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",23,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,24,(void**)&arg24,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",24,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,25,(void**)&argp25,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",25,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg25 = *argp25;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,26,(void**)&argp26,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",26,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg26 = *argp26;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,27,(void**)&argp27,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",27,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg27 = *argp27;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,28,(void**)&argp28,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",28,SWIGTYPE_p_SLFixData_t);
  }
  arg28 = *argp28;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,29,(void**)&argp29,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",29,SWIGTYPE_p_SLFixData_t);
  }
  arg29 = *argp29;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,30,(void**)&argp30,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",30,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg30 = *argp30;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,31,(void**)&argp31,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFft",31,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg31 = *argp31;
  
  SDA_ZoomFft((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(SLData_t const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,(SLData_t const *)arg17,arg18,arg19,arg20,arg21,(SLData_t const *)arg22,(SLData_t const *)arg23,(SLArrayIndex_t const *)arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ZoomFftSimple(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  
  SWIG_check_num_args("SIF_ZoomFftSimple",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ZoomFftSimple",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ZoomFftSimple",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_ZoomFftSimple",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ZoomFftSimple",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_ZoomFftSimple",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_ZoomFftSimple",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_ZoomFftSimple",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_ZoomFftSimple",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_ZoomFftSimple",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_ZoomFftSimple",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SIF_ZoomFftSimple",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_ZoomFftSimple",12,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ZoomFftSimple",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  SIF_ZoomFftSimple(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ZoomFftSimple(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg17 ;
  SLArrayIndex_t arg18 ;
  SLArrayIndex_t arg19 ;
  SLData_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp17 ;
  SLArrayIndex_t *argp18 ;
  SLArrayIndex_t *argp19 ;
  
  SWIG_check_num_args("SDA_ZoomFftSimple",19,19)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ZoomFftSimple",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ZoomFftSimple",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ZoomFftSimple",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ZoomFftSimple",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ZoomFftSimple",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ZoomFftSimple",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_ZoomFftSimple",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_ZoomFftSimple",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_ZoomFftSimple",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_ZoomFftSimple",10,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_ZoomFftSimple",11,"SLData_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_ZoomFftSimple",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_ZoomFftSimple",13,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_ZoomFftSimple",14,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_ZoomFftSimple",15,"SLData_t const *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_ZoomFftSimple",16,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_ZoomFftSimple",17,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_ZoomFftSimple",18,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SDA_ZoomFftSimple",19,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",11,SWIGTYPE_p_SLData_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZoomFftSimple",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg19 = *argp19;
  
  SDA_ZoomFftSimple((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(SLData_t const *)arg9,arg10,arg11,arg12,arg13,arg14,(SLData_t const *)arg15,(SLArrayIndex_t const *)arg16,arg17,arg18,arg19);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FdHilbert(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_FdHilbert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FdHilbert",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FdHilbert",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FdHilbert",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FdHilbert",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FdHilbert",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FdHilbert",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FdHilbert",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FdHilbert",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_FdHilbert(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FdHilbert(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_FdHilbert",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FdHilbert",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FdHilbert",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FdHilbert",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FdHilbert",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FdHilbert",5,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FdHilbert",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FdHilbert",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FdHilbert",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdHilbert",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdHilbert",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdHilbert",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdHilbert",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdHilbert",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdHilbert",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdHilbert",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdHilbert",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_FdHilbert((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,(SLArrayIndex_t const *)arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FdAnalytic(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_FdAnalytic",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FdAnalytic",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FdAnalytic",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FdAnalytic",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FdAnalytic",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FdAnalytic",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FdAnalytic",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FdAnalytic",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FdAnalytic",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_FdAnalytic(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FdAnalytic(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_FdAnalytic",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FdAnalytic",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FdAnalytic",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FdAnalytic",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FdAnalytic",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FdAnalytic",5,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FdAnalytic",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FdAnalytic",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FdAnalytic",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdAnalytic",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdAnalytic",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdAnalytic",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdAnalytic",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdAnalytic",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdAnalytic",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdAnalytic",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdAnalytic",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_FdAnalytic((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,(SLArrayIndex_t const *)arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InstantFreq(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_InstantFreq",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InstantFreq",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_InstantFreq",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_InstantFreq",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_InstantFreq",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InstantFreq",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InstantFreq",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InstantFreq",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InstantFreq",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_InstantFreq((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Rdft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Rdft",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Rdft",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Rdft",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Rdft",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Rdft",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rdft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rdft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rdft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rdft",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Rdft((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Ridft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Ridft",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Ridft",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Ridft",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Ridft",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Ridft",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Ridft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Ridft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Ridft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Ridft",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Ridft((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cdft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Cdft",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cdft",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cdft",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cdft",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cdft",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Cdft",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cdft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cdft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cdft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cdft",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cdft",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Cdft((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cidft(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Cidft",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cidft",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cidft",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Cidft",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Cidft",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Cidft",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cidft",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cidft",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cidft",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cidft",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cidft",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Cidft((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FftShift(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_FftShift",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FftShift",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FftShift",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_FftShift",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftShift",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftShift",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftShift",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_FftShift((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CfftShift(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_CfftShift",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CfftShift",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CfftShift",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CfftShift",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CfftShift",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CfftShift",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftShift",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftShift",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftShift",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftShift",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CfftShift",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_CfftShift((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FftExtend(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_FftExtend",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FftExtend",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FftExtend",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_FftExtend",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FftExtend",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftExtend",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftExtend",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftExtend",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftExtend",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_FftExtend((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CfftExtend(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_CfftExtend",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CfftExtend",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CfftExtend",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CfftExtend",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CfftExtend",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CfftExtend",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CfftExtend",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftExtend",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftExtend",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftExtend",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftExtend",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CfftExtend",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CfftExtend",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_CfftExtend((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DctII(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_DctII",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DctII",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_DctII",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DctII",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DctII",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_DctII(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DctII(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_DctII",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DctII",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DctII",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_DctII",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_DctII",4,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DctII",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DctII",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DctII",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DctII",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_DctII((SLData_t const *)arg1,arg2,(SLData_t const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DctIIOrthogonal(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_DctIIOrthogonal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DctIIOrthogonal",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_DctIIOrthogonal",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_DctIIOrthogonal",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_DctIIOrthogonal",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DctIIOrthogonal",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DctIIOrthogonal",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DctIIOrthogonal",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DctIIOrthogonal",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_DctIIOrthogonal(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DctIIOrthogonal(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_DctIIOrthogonal",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DctIIOrthogonal",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DctIIOrthogonal",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DctIIOrthogonal",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_DctIIOrthogonal",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_DctIIOrthogonal",5,"SLData_t const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_DctIIOrthogonal",6,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DctIIOrthogonal",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DctIIOrthogonal",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DctIIOrthogonal",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DctIIOrthogonal",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DctIIOrthogonal",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DctIIOrthogonal",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_DctIIOrthogonal((SLData_t const *)arg1,arg2,arg3,arg4,(SLData_t const *)arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FftArb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  enum SLArbitraryFFT_t *arg9 = (enum SLArbitraryFFT_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t *argp14 ;
  
  SWIG_check_num_args("SIF_FftArb",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FftArb",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FftArb",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FftArb",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FftArb",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_FftArb",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_FftArb",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_FftArb",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_FftArb",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_FftArb",9,"enum SLArbitraryFFT_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_FftArb",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_FftArb",11,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_FftArb",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_FftArb",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SIF_FftArb",14,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftArb",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArbitraryFFT_t,0))){
    SWIG_fail_ptr("SIF_FftArb",9,SWIGTYPE_p_SLArbitraryFFT_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftArb",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftArb",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftArb",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftArb",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  SIF_FftArb(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_FftArbAllocLength(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t arg1 ;
  SLArrayIndex_t *argp1 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_FftArbAllocLength",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_FftArbAllocLength",1,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_FftArbAllocLength",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg1 = *argp1;
  
  result = SUF_FftArbAllocLength(arg1);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RfftArb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg13 = (SLArrayIndex_t *) 0 ;
  enum SLArbitraryFFT_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLData_t arg17 ;
  SLData_t arg18 ;
  SLArrayIndex_t arg19 ;
  SLArrayIndex_t *argp15 ;
  SLArrayIndex_t *argp16 ;
  SLData_t *argp17 ;
  SLData_t *argp18 ;
  SLArrayIndex_t *argp19 ;
  
  SWIG_check_num_args("SDA_RfftArb",19,19)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RfftArb",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RfftArb",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_RfftArb",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_RfftArb",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_RfftArb",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_RfftArb",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_RfftArb",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_RfftArb",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_RfftArb",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_RfftArb",10,"SLData_t const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_RfftArb",11,"SLData_t const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_RfftArb",12,"SLData_t const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_RfftArb",13,"SLArrayIndex_t const *");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("SDA_RfftArb",14,"enum SLArbitraryFFT_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_RfftArb",15,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_RfftArb",16,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_RfftArb",17,"SLData_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_RfftArb",18,"SLData_t const");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SDA_RfftArb",19,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg14 = (enum SLArbitraryFFT_t const)(int)lua_tonumber(L, 14);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",17,SWIGTYPE_p_SLData_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",18,SWIGTYPE_p_SLData_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RfftArb",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg19 = *argp19;
  
  SDA_RfftArb((SLData_t const *)arg1,arg2,arg3,arg4,arg5,(SLData_t const *)arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,(SLData_t const *)arg11,(SLData_t const *)arg12,(SLArrayIndex_t const *)arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CfftArb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg14 = (SLArrayIndex_t *) 0 ;
  enum SLArbitraryFFT_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLArrayIndex_t arg17 ;
  SLData_t arg18 ;
  SLData_t arg19 ;
  SLArrayIndex_t arg20 ;
  SLArrayIndex_t *argp16 ;
  SLArrayIndex_t *argp17 ;
  SLData_t *argp18 ;
  SLData_t *argp19 ;
  SLArrayIndex_t *argp20 ;
  
  SWIG_check_num_args("SDA_CfftArb",20,20)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CfftArb",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CfftArb",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CfftArb",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CfftArb",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_CfftArb",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_CfftArb",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_CfftArb",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_CfftArb",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_CfftArb",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_CfftArb",10,"SLData_t const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_CfftArb",11,"SLData_t const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_CfftArb",12,"SLData_t const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_CfftArb",13,"SLData_t const *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_CfftArb",14,"SLArrayIndex_t const *");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("SDA_CfftArb",15,"enum SLArbitraryFFT_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_CfftArb",16,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_CfftArb",17,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_CfftArb",18,"SLData_t const");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SDA_CfftArb",19,"SLData_t const");
  if(!lua_isuserdata(L,20)) SWIG_fail_arg("SDA_CfftArb",20,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg15 = (enum SLArbitraryFFT_t const)(int)lua_tonumber(L, 15);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",18,SWIGTYPE_p_SLData_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",19,SWIGTYPE_p_SLData_t);
  }
  arg19 = *argp19;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&argp20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CfftArb",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg20 = *argp20;
  
  SDA_CfftArb((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,(SLData_t const *)arg11,(SLData_t const *)arg12,(SLData_t const *)arg13,(SLArrayIndex_t const *)arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CifftArb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg14 = (SLArrayIndex_t *) 0 ;
  enum SLArbitraryFFT_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLArrayIndex_t arg17 ;
  SLArrayIndex_t arg18 ;
  SLArrayIndex_t *argp16 ;
  SLArrayIndex_t *argp17 ;
  SLArrayIndex_t *argp18 ;
  
  SWIG_check_num_args("SDA_CifftArb",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CifftArb",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CifftArb",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CifftArb",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CifftArb",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_CifftArb",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_CifftArb",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_CifftArb",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_CifftArb",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_CifftArb",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_CifftArb",10,"SLData_t const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_CifftArb",11,"SLData_t const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_CifftArb",12,"SLData_t const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_CifftArb",13,"SLData_t const *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_CifftArb",14,"SLArrayIndex_t const *");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("SDA_CifftArb",15,"enum SLArbitraryFFT_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_CifftArb",16,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_CifftArb",17,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_CifftArb",18,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg15 = (enum SLArbitraryFFT_t const)(int)lua_tonumber(L, 15);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CifftArb",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  SDA_CifftArb((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,(SLData_t const *)arg11,(SLData_t const *)arg12,(SLData_t const *)arg13,(SLArrayIndex_t const *)arg14,arg15,arg16,arg17,arg18);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FastAutoCrossPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_FastAutoCrossPowerSpectrum",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FastAutoCrossPowerSpectrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FastAutoCrossPowerSpectrum",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FastAutoCrossPowerSpectrum",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FastAutoCrossPowerSpectrum",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FastAutoCrossPowerSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastAutoCrossPowerSpectrum",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FastAutoCrossPowerSpectrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastAutoCrossPowerSpectrum",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_FastAutoCrossPowerSpectrum(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FastAutoPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t arg7 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLData_t *argp7 ;
  
  SWIG_check_num_args("SDA_FastAutoPowerSpectrum",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FastAutoPowerSpectrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FastAutoPowerSpectrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FastAutoPowerSpectrum",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FastAutoPowerSpectrum",4,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FastAutoPowerSpectrum",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FastAutoPowerSpectrum",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FastAutoPowerSpectrum",7,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastAutoPowerSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastAutoPowerSpectrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastAutoPowerSpectrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastAutoPowerSpectrum",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastAutoPowerSpectrum",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastAutoPowerSpectrum",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastAutoPowerSpectrum",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  SDA_FastAutoPowerSpectrum(arg1,arg2,(SLData_t const *)arg3,(SLArrayIndex_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FastCrossPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t arg9 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLData_t *argp9 ;
  
  SWIG_check_num_args("SDA_FastCrossPowerSpectrum",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",6,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FastCrossPowerSpectrum",9,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCrossPowerSpectrum",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  SDA_FastCrossPowerSpectrum(arg1,arg2,arg3,arg4,(SLData_t const *)arg5,(SLArrayIndex_t const *)arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ArbAutoCrossPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  enum SLArbitraryFFT_t *arg9 = (enum SLArbitraryFFT_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t *argp14 ;
  
  SWIG_check_num_args("SIF_ArbAutoCrossPowerSpectrum",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",9,"enum SLArbitraryFFT_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",11,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SIF_ArbAutoCrossPowerSpectrum",14,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArbitraryFFT_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",9,SWIGTYPE_p_SLArbitraryFFT_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ArbAutoCrossPowerSpectrum",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  SIF_ArbAutoCrossPowerSpectrum(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ArbAutoPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  enum SLArbitraryFFT_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLData_t arg16 ;
  SLData_t arg17 ;
  SLArrayIndex_t arg18 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  SLData_t *argp16 ;
  SLData_t *argp17 ;
  SLArrayIndex_t *argp18 ;
  
  SWIG_check_num_args("SDA_ArbAutoPowerSpectrum",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",10,"SLData_t const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",11,"SLData_t const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",12,"SLArrayIndex_t const *");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",13,"enum SLArbitraryFFT_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",15,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",16,"SLData_t const");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",17,"SLData_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_ArbAutoPowerSpectrum",18,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg13 = (enum SLArbitraryFFT_t const)(int)lua_tonumber(L, 13);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",16,SWIGTYPE_p_SLData_t);
  }
  arg16 = *argp16;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",17,SWIGTYPE_p_SLData_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ArbAutoPowerSpectrum",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  SDA_ArbAutoPowerSpectrum(arg1,arg2,arg3,arg4,(SLData_t const *)arg5,(SLData_t const *)arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,(SLData_t const *)arg11,(SLArrayIndex_t const *)arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ArbCrossPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg14 = (SLArrayIndex_t *) 0 ;
  enum SLArbitraryFFT_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLArrayIndex_t arg17 ;
  SLData_t arg18 ;
  SLData_t arg19 ;
  SLArrayIndex_t arg20 ;
  SLArrayIndex_t *argp16 ;
  SLArrayIndex_t *argp17 ;
  SLData_t *argp18 ;
  SLData_t *argp19 ;
  SLArrayIndex_t *argp20 ;
  
  SWIG_check_num_args("SDA_ArbCrossPowerSpectrum",20,20)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",10,"SLData_t const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",11,"SLData_t const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",12,"SLData_t const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",13,"SLData_t const *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",14,"SLArrayIndex_t const *");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",15,"enum SLArbitraryFFT_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",16,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",17,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",18,"SLData_t const");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",19,"SLData_t const");
  if(!lua_isuserdata(L,20)) SWIG_fail_arg("SDA_ArbCrossPowerSpectrum",20,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg15 = (enum SLArbitraryFFT_t const)(int)lua_tonumber(L, 15);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",18,SWIGTYPE_p_SLData_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",19,SWIGTYPE_p_SLData_t);
  }
  arg19 = *argp19;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&argp20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ArbCrossPowerSpectrum",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg20 = *argp20;
  
  SDA_ArbCrossPowerSpectrum(arg1,arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,(SLData_t const *)arg11,(SLData_t const *)arg12,(SLData_t const *)arg13,(SLArrayIndex_t const *)arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_WelchPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  enum SLWindow_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp10 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_WelchPowerSpectrum",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_WelchPowerSpectrum",1,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_WelchPowerSpectrum",2,"SLData_t *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SIF_WelchPowerSpectrum",3,"enum SLWindow_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_WelchPowerSpectrum",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_WelchPowerSpectrum",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_WelchPowerSpectrum",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_WelchPowerSpectrum",7,"SLData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_WelchPowerSpectrum",8,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_WelchPowerSpectrum",9,"SLData_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_WelchPowerSpectrum",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",2,SWIGTYPE_p_SLData_t);
  }
  
  arg3 = (enum SLWindow_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_WelchPowerSpectrum",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  result = SIF_WelchPowerSpectrum(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_WelchRealPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLData_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLData_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLData_t *argp15 ;
  SLArrayIndex_t *argp16 ;
  
  SWIG_check_num_args("SDA_WelchRealPowerSpectrum",16,16)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",6,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",7,"SLArrayIndex_t");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",10,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",13,"SLData_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",15,"SLData_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_WelchRealPowerSpectrum",16,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",15,SWIGTYPE_p_SLData_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchRealPowerSpectrum",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  SDA_WelchRealPowerSpectrum((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,(SLData_t const *)arg8,(SLData_t const *)arg9,(SLArrayIndex_t const *)arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_WelchComplexPowerSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLData_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLData_t arg17 ;
  SLArrayIndex_t arg18 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLData_t *argp15 ;
  SLArrayIndex_t *argp16 ;
  SLData_t *argp17 ;
  SLArrayIndex_t *argp18 ;
  
  SWIG_check_num_args("SDA_WelchComplexPowerSpectrum",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",8,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",9,"SLArrayIndex_t");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",10,"SLData_t const *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",11,"SLData_t const *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",12,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",13,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",15,"SLData_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",16,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",17,"SLData_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_WelchComplexPowerSpectrum",18,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",15,SWIGTYPE_p_SLData_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",17,SWIGTYPE_p_SLData_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WelchComplexPowerSpectrum",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  SDA_WelchComplexPowerSpectrum((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(SLData_t const *)arg10,(SLData_t const *)arg11,(SLArrayIndex_t const *)arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_MagnitudeSquaredCoherence(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_MagnitudeSquaredCoherence",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_MagnitudeSquaredCoherence",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_MagnitudeSquaredCoherence",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_MagnitudeSquaredCoherence",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_MagnitudeSquaredCoherence",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_MagnitudeSquaredCoherence",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_MagnitudeSquaredCoherence",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_MagnitudeSquaredCoherence",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_MagnitudeSquaredCoherence",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_MagnitudeSquaredCoherence(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MagnitudeSquaredCoherence(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLData_t arg13 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp13 ;
  
  SWIG_check_num_args("SDA_MagnitudeSquaredCoherence",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",10,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_MagnitudeSquaredCoherence",13,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredCoherence",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  SDA_MagnitudeSquaredCoherence(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(SLData_t const *)arg9,(SLArrayIndex_t const *)arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirOverlapAdd(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SIF_FirOverlapAdd",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirOverlapAdd",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FirOverlapAdd",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FirOverlapAdd",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FirOverlapAdd",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_FirOverlapAdd",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_FirOverlapAdd",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_FirOverlapAdd",7,"SLData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_FirOverlapAdd",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SIF_FirOverlapAdd",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_FirOverlapAdd",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapAdd",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SIF_FirOverlapAdd((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirOverlapAdd(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLData_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  
  SWIG_check_num_args("SDA_FirOverlapAdd",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirOverlapAdd",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirOverlapAdd",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirOverlapAdd",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FirOverlapAdd",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FirOverlapAdd",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FirOverlapAdd",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FirOverlapAdd",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_FirOverlapAdd",8,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FirOverlapAdd",9,"SLData_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FirOverlapAdd",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_FirOverlapAdd",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_FirOverlapAdd",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_FirOverlapAdd",13,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapAdd",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  SDA_FirOverlapAdd((SLData_t const *)arg1,arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirOverlapSave(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SIF_FirOverlapSave",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirOverlapSave",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FirOverlapSave",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FirOverlapSave",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FirOverlapSave",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_FirOverlapSave",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_FirOverlapSave",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_FirOverlapSave",7,"SLData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_FirOverlapSave",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SIF_FirOverlapSave",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_FirOverlapSave",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirOverlapSave",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SIF_FirOverlapSave((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirOverlapSave(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLData_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  
  SWIG_check_num_args("SDA_FirOverlapSave",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirOverlapSave",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirOverlapSave",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirOverlapSave",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FirOverlapSave",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FirOverlapSave",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FirOverlapSave",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FirOverlapSave",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_FirOverlapSave",8,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FirOverlapSave",9,"SLData_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FirOverlapSave",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_FirOverlapSave",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_FirOverlapSave",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_FirOverlapSave",13,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirOverlapSave",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  SDA_FirOverlapSave((SLData_t const *)arg1,arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FftConvolvePre(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SIF_FftConvolvePre",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FftConvolvePre",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FftConvolvePre",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FftConvolvePre",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FftConvolvePre",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_FftConvolvePre",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_FftConvolvePre",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_FftConvolvePre",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_FftConvolvePre",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftConvolvePre",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftConvolvePre",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftConvolvePre",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftConvolvePre",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftConvolvePre",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftConvolvePre",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftConvolvePre",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftConvolvePre",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SIF_FftConvolvePre((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FftConvolvePre(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLData_t arg12 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLData_t *argp12 ;
  
  SWIG_check_num_args("SDA_FftConvolvePre",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FftConvolvePre",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FftConvolvePre",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FftConvolvePre",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FftConvolvePre",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FftConvolvePre",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FftConvolvePre",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FftConvolvePre",7,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FftConvolvePre",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FftConvolvePre",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FftConvolvePre",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_FftConvolvePre",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_FftConvolvePre",12,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolvePre",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  SDA_FftConvolvePre(arg1,arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,(SLData_t const *)arg6,(SLArrayIndex_t const *)arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FftConvolveArb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLData_t arg12 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLData_t *argp12 ;
  
  SWIG_check_num_args("SDA_FftConvolveArb",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FftConvolveArb",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FftConvolveArb",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FftConvolveArb",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FftConvolveArb",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FftConvolveArb",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FftConvolveArb",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FftConvolveArb",7,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FftConvolveArb",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FftConvolveArb",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FftConvolveArb",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_FftConvolveArb",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_FftConvolveArb",12,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftConvolveArb",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  SDA_FftConvolveArb(arg1,arg2,arg3,arg4,arg5,(SLData_t const *)arg6,(SLArrayIndex_t const *)arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FftCorrelatePre(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SIF_FftCorrelatePre",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FftCorrelatePre",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FftCorrelatePre",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FftCorrelatePre",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FftCorrelatePre",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_FftCorrelatePre",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_FftCorrelatePre",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_FftCorrelatePre",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_FftCorrelatePre",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftCorrelatePre",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftCorrelatePre",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftCorrelatePre",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftCorrelatePre",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftCorrelatePre",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftCorrelatePre",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftCorrelatePre",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftCorrelatePre",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SIF_FftCorrelatePre((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FftCorrelatePre(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLData_t arg12 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLData_t *argp12 ;
  
  SWIG_check_num_args("SDA_FftCorrelatePre",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FftCorrelatePre",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FftCorrelatePre",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FftCorrelatePre",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FftCorrelatePre",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FftCorrelatePre",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FftCorrelatePre",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FftCorrelatePre",7,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FftCorrelatePre",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FftCorrelatePre",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FftCorrelatePre",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_FftCorrelatePre",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_FftCorrelatePre",12,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelatePre",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  SDA_FftCorrelatePre(arg1,arg2,arg3,arg4,arg5,(SLData_t const *)arg6,(SLArrayIndex_t const *)arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FftCorrelateArb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLData_t arg12 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLData_t *argp12 ;
  
  SWIG_check_num_args("SDA_FftCorrelateArb",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FftCorrelateArb",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FftCorrelateArb",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FftCorrelateArb",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FftCorrelateArb",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FftCorrelateArb",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FftCorrelateArb",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FftCorrelateArb",7,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FftCorrelateArb",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FftCorrelateArb",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FftCorrelateArb",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_FftCorrelateArb",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_FftCorrelateArb",12,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftCorrelateArb",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  SDA_FftCorrelateArb(arg1,arg2,arg3,arg4,arg5,(SLData_t const *)arg6,(SLArrayIndex_t const *)arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Czt(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t arg9 ;
  SLData_t arg10 ;
  SLData_t arg11 ;
  SLData_t arg12 ;
  SLData_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLArrayIndex_t arg17 ;
  SLData_t *argp9 ;
  SLData_t *argp10 ;
  SLData_t *argp11 ;
  SLData_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  SLArrayIndex_t *argp16 ;
  SLArrayIndex_t *argp17 ;
  
  SWIG_check_num_args("SIF_Czt",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Czt",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Czt",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_Czt",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_Czt",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_Czt",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_Czt",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_Czt",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_Czt",8,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SIF_Czt",9,"SLData_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_Czt",10,"SLData_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SIF_Czt",11,"SLData_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_Czt",12,"SLData_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SIF_Czt",13,"SLData_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SIF_Czt",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SIF_Czt",15,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SIF_Czt",16,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SIF_Czt",17,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Czt",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",10,SWIGTYPE_p_SLData_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",11,SWIGTYPE_p_SLData_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Czt",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Czt",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Czt",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Czt",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Czt",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg17 = *argp17;
  
  SIF_Czt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Awn(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLComplexRect_s arg3 ;
  SLComplexRect_s arg4 ;
  SLComplexRect_s arg5 ;
  SLArrayIndex_t arg6 ;
  SLComplexRect_s *argp3 ;
  SLComplexRect_s *argp4 ;
  SLComplexRect_s *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SIF_Awn",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Awn",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Awn",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Awn",3,"SLComplexRect_s const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_Awn",4,"SLComplexRect_s const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_Awn",5,"SLComplexRect_s const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_Awn",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Awn",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Awn",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Awn",3,SWIGTYPE_p_SLComplexRect_s);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Awn",4,SWIGTYPE_p_SLComplexRect_s);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Awn",5,SWIGTYPE_p_SLComplexRect_s);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Awn",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SIF_Awn(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Vl(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLComplexRect_s arg3 ;
  SLComplexRect_s arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLComplexRect_s *argp3 ;
  SLComplexRect_s *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SIF_Vl",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Vl",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Vl",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Vl",3,"SLComplexRect_s const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_Vl",4,"SLComplexRect_s const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_Vl",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_Vl",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_Vl",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Vl",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Vl",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Vl",3,SWIGTYPE_p_SLComplexRect_s);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Vl",4,SWIGTYPE_p_SLComplexRect_s);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Vl",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Vl",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Vl",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SIF_Vl(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Wm(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLComplexRect_s arg3 ;
  SLComplexRect_s arg4 ;
  SLArrayIndex_t arg5 ;
  SLComplexRect_s *argp3 ;
  SLComplexRect_s *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SIF_Wm",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Wm",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Wm",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Wm",3,"SLComplexRect_s const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_Wm",4,"SLComplexRect_s const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_Wm",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Wm",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Wm",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Wm",3,SWIGTYPE_p_SLComplexRect_s);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Wm",4,SWIGTYPE_p_SLComplexRect_s);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Wm",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SIF_Wm(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Window(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  enum SLWindow_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_Window",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Window",1,"SLData_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SIF_Window",2,"enum SLWindow_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Window",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_Window",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Window",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (enum SLWindow_t const)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Window",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Window",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SIF_Window(arg1,arg2,arg3,arg4);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_TableTopWindow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  enum SLWindow_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_TableTopWindow",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_TableTopWindow",1,"SLData_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SIF_TableTopWindow",2,"enum SLWindow_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_TableTopWindow",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_TableTopWindow",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_TableTopWindow",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_TableTopWindow",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (enum SLWindow_t const)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_TableTopWindow",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TableTopWindow",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TableTopWindow",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SIF_TableTopWindow(arg1,arg2,arg3,arg4,arg5);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Window(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Window",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Window",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Window",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Window",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Window",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Window",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Window",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Window",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Window",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Window((SLData_t const *)arg1,arg2,(SLData_t const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexWindow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_ComplexWindow",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexWindow",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexWindow",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexWindow",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexWindow",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ComplexWindow",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ComplexWindow",6,"SLData_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ComplexWindow",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexWindow",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexWindow",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexWindow",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexWindow",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexWindow",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexWindow",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexWindow",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_ComplexWindow((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,(SLData_t const *)arg5,(SLData_t const *)arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_WindowInverseCoherentGain(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_WindowInverseCoherentGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_WindowInverseCoherentGain",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_WindowInverseCoherentGain",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WindowInverseCoherentGain",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WindowInverseCoherentGain",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_WindowInverseCoherentGain((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_WindowEquivalentNoiseBandwidth(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_WindowEquivalentNoiseBandwidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_WindowEquivalentNoiseBandwidth",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_WindowEquivalentNoiseBandwidth",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WindowEquivalentNoiseBandwidth",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WindowEquivalentNoiseBandwidth",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_WindowEquivalentNoiseBandwidth((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_WindowProcessingGain(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_WindowProcessingGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_WindowProcessingGain",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_WindowProcessingGain",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WindowProcessingGain",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WindowProcessingGain",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_WindowProcessingGain((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_I0Bessel(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_I0Bessel",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_I0Bessel",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_I0Bessel",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_I0Bessel(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Fir(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_Fir",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Fir",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Fir",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Fir",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Fir",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Fir",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Fir",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_Fir(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Fir(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Fir",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Fir",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Fir",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_Fir",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_Fir",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_Fir",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Fir",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Fir",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Fir",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_Fir",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_Fir",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_Fir(arg1,arg2,(SLData_t const *)arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Fir(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_Fir",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Fir",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Fir",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Fir",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Fir",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Fir",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Fir",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Fir",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Fir",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Fir",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Fir",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Fir",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Fir",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Fir",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Fir",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_Fir((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FirAddSample(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDS_FirAddSample",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FirAddSample",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FirAddSample",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FirAddSample",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_FirAddSample",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirAddSample",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirAddSample",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirAddSample",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirAddSample",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDS_FirAddSample(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirAddSamples(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_FirAddSamples",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirAddSamples",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirAddSamples",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirAddSamples",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FirAddSamples",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FirAddSamples",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirAddSamples",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirAddSamples",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirAddSamples",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirAddSamples",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirAddSamples",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_FirAddSamples((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Comb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_Comb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Comb",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Comb",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_Comb",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_Comb",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Comb",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Comb",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Comb",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Comb",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_Comb(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Comb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Comb",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Comb",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Comb",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_Comb",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_Comb",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_Comb",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Comb",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Comb",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_Comb",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Comb",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_Comb",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_Comb(arg1,arg2,arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Comb(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_Comb",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Comb",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Comb",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Comb",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Comb",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Comb",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Comb",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Comb",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Comb",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Comb",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Comb",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Comb",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Comb",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Comb",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Comb",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_Comb((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_FirComplex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirComplex",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FirComplex",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FirComplex",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FirComplex",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirComplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirComplex",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_FirComplex(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FirComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDS_FirComplex",10,10)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FirComplex",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_FirComplex",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FirComplex",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_FirComplex",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_FirComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_FirComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_FirComplex",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_FirComplex",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_FirComplex",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDS_FirComplex",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirComplex",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDS_FirComplex(arg1,arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  
  SWIG_check_num_args("SDA_FirComplex",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirComplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirComplex",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FirComplex",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FirComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FirComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FirComplex",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_FirComplex",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_FirComplex",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FirComplex",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_FirComplex",11,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirComplex",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  SDA_FirComplex((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,arg9,arg10,arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirWithStore(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_FirWithStore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirWithStore",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FirWithStore",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirWithStore",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirWithStore",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_FirWithStore(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FirWithStore(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_FirWithStore",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FirWithStore",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FirWithStore",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FirWithStore",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_FirWithStore",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirWithStore",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirWithStore",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirWithStore",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirWithStore",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDS_FirWithStore(arg1,arg2,(SLData_t const *)arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirWithStore(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_FirWithStore",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirWithStore",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirWithStore",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirWithStore",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FirWithStore",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FirWithStore",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FirWithStore",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirWithStore",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirWithStore",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirWithStore",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirWithStore",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirWithStore",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirWithStore",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_FirWithStore((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirComplexWithStore(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_FirComplexWithStore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirComplexWithStore",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FirComplexWithStore",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FirComplexWithStore",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplexWithStore",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplexWithStore",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirComplexWithStore",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_FirComplexWithStore(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FirComplexWithStore(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDS_FirComplexWithStore",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FirComplexWithStore",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_FirComplexWithStore",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FirComplexWithStore",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_FirComplexWithStore",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_FirComplexWithStore",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_FirComplexWithStore",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_FirComplexWithStore",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_FirComplexWithStore",8,"SLData_t const *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDS_FirComplexWithStore",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirComplexWithStore",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDS_FirComplexWithStore(arg1,arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirComplexWithStore(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDA_FirComplexWithStore",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirComplexWithStore",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirComplexWithStore",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirComplexWithStore",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FirComplexWithStore",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FirComplexWithStore",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FirComplexWithStore",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FirComplexWithStore",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_FirComplexWithStore",8,"SLData_t const *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FirComplexWithStore",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FirComplexWithStore",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirComplexWithStore",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDA_FirComplexWithStore((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FirWithStoreAddSample(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDS_FirWithStoreAddSample",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FirWithStoreAddSample",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FirWithStoreAddSample",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_FirWithStoreAddSample",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirWithStoreAddSample",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirWithStoreAddSample",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirWithStoreAddSample",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDS_FirWithStoreAddSample(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirWithStoreAddSamples(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_FirWithStoreAddSamples",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirWithStoreAddSamples",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirWithStoreAddSamples",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_FirWithStoreAddSamples",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FirWithStoreAddSamples",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirWithStoreAddSamples",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirWithStoreAddSamples",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirWithStoreAddSamples",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirWithStoreAddSamples",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_FirWithStoreAddSamples((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirExtendedArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SIF_FirExtendedArray",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirExtendedArray",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FirExtendedArray",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FirExtendedArray",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FirExtendedArray",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_FirExtendedArray",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirExtendedArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirExtendedArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirExtendedArray",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirExtendedArray",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirExtendedArray",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SIF_FirExtendedArray(arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FirExtendedArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_FirExtendedArray",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FirExtendedArray",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FirExtendedArray",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FirExtendedArray",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_FirExtendedArray",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_FirExtendedArray",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArray",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArray",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArray",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArray",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_FirExtendedArray(arg1,arg2,(SLData_t const *)arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirExtendedArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_FirExtendedArray",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirExtendedArray",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirExtendedArray",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirExtendedArray",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FirExtendedArray",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FirExtendedArray",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FirExtendedArray",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FirExtendedArray",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArray",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArray",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArray",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArray",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArray",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_FirExtendedArray((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirComplexExtendedArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SIF_FirComplexExtendedArray",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirComplexExtendedArray",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FirComplexExtendedArray",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FirComplexExtendedArray",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FirComplexExtendedArray",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_FirComplexExtendedArray",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_FirComplexExtendedArray",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_FirComplexExtendedArray",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_FirComplexExtendedArray",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplexExtendedArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplexExtendedArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplexExtendedArray",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplexExtendedArray",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplexExtendedArray",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirComplexExtendedArray",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirComplexExtendedArray",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirComplexExtendedArray",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SIF_FirComplexExtendedArray(arg1,arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FirComplexExtendedArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDS_FirComplexExtendedArray",10,10)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FirComplexExtendedArray",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_FirComplexExtendedArray",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FirComplexExtendedArray",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_FirComplexExtendedArray",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_FirComplexExtendedArray",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_FirComplexExtendedArray",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_FirComplexExtendedArray",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_FirComplexExtendedArray",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_FirComplexExtendedArray",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDS_FirComplexExtendedArray",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirComplexExtendedArray",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDS_FirComplexExtendedArray(arg1,arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirComplexExtendedArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  
  SWIG_check_num_args("SDA_FirComplexExtendedArray",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirComplexExtendedArray",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirComplexExtendedArray",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirComplexExtendedArray",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FirComplexExtendedArray",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FirComplexExtendedArray",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FirComplexExtendedArray",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FirComplexExtendedArray",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_FirComplexExtendedArray",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_FirComplexExtendedArray",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FirComplexExtendedArray",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_FirComplexExtendedArray",11,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirComplexExtendedArray",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  SDA_FirComplexExtendedArray((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,arg9,arg10,arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FirExtendedArrayAddSample(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDS_FirExtendedArrayAddSample",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FirExtendedArrayAddSample",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FirExtendedArrayAddSample",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FirExtendedArrayAddSample",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_FirExtendedArrayAddSample",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArrayAddSample",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArrayAddSample",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArrayAddSample",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FirExtendedArrayAddSample",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDS_FirExtendedArrayAddSample(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirExtendedArrayAddSamples(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_FirExtendedArrayAddSamples",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirExtendedArrayAddSamples",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirExtendedArrayAddSamples",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirExtendedArrayAddSamples",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FirExtendedArrayAddSamples",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FirExtendedArrayAddSamples",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArrayAddSamples",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArrayAddSamples",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArrayAddSamples",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArrayAddSamples",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirExtendedArrayAddSamples",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_FirExtendedArrayAddSamples((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirLowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  enum SLWindow_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_FirLowPassFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirLowPassFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FirLowPassFilter",2,"SLData_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SIF_FirLowPassFilter",3,"enum SLWindow_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FirLowPassFilter",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirLowPassFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirLowPassFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (enum SLWindow_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirLowPassFilter",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SIF_FirLowPassFilter(arg1,arg2,arg3,arg4);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirHighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  enum SLWindow_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_FirHighPassFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirHighPassFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FirHighPassFilter",2,"SLData_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SIF_FirHighPassFilter",3,"enum SLWindow_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FirHighPassFilter",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirHighPassFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirHighPassFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (enum SLWindow_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirHighPassFilter",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SIF_FirHighPassFilter(arg1,arg2,arg3,arg4);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirBandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  enum SLWindow_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_FirBandPassFilter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirBandPassFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FirBandPassFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FirBandPassFilter",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SIF_FirBandPassFilter",4,"enum SLWindow_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_FirBandPassFilter",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLWindow_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilter",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SIF_FirBandPassFilter(arg1,arg2,arg3,arg4,arg5);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirLowPassFilterWindow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_FirLowPassFilterWindow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirLowPassFilterWindow",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FirLowPassFilterWindow",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FirLowPassFilterWindow",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FirLowPassFilterWindow",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirLowPassFilterWindow",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirLowPassFilterWindow",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirLowPassFilterWindow",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirLowPassFilterWindow",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_FirLowPassFilterWindow(arg1,arg2,(SLData_t const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirHighPassFilterWindow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_FirHighPassFilterWindow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirHighPassFilterWindow",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FirHighPassFilterWindow",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FirHighPassFilterWindow",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FirHighPassFilterWindow",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirHighPassFilterWindow",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirHighPassFilterWindow",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirHighPassFilterWindow",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirHighPassFilterWindow",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_FirHighPassFilterWindow(arg1,arg2,(SLData_t const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirBandPassFilterWindow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SIF_FirBandPassFilterWindow",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirBandPassFilterWindow",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FirBandPassFilterWindow",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FirBandPassFilterWindow",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FirBandPassFilterWindow",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_FirBandPassFilterWindow",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilterWindow",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilterWindow",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilterWindow",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilterWindow",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirBandPassFilterWindow",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SIF_FirBandPassFilterWindow(arg1,arg2,arg3,(SLData_t const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_FirKaiserApproximation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SUF_FirKaiserApproximation",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_FirKaiserApproximation",1,"SLData_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_FirKaiserApproximation",2,"SLData_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_FirKaiserApproximation",3,"SLData_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_FirKaiserApproximation",4,"SLData_t");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SUF_FirKaiserApproximation",5,"SLData_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FirKaiserApproximation",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FirKaiserApproximation",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FirKaiserApproximation",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FirKaiserApproximation",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FirKaiserApproximation",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  result = SUF_FirKaiserApproximation(arg1,arg2,arg3,arg4,arg5);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirMatchedFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_FirMatchedFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirMatchedFilter",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FirMatchedFilter",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FirMatchedFilter",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirMatchedFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirMatchedFilter",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirMatchedFilter",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_FirMatchedFilter(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirFilterInverseCoherentGain(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_FirFilterInverseCoherentGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirFilterInverseCoherentGain",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FirFilterInverseCoherentGain",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirFilterInverseCoherentGain",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirFilterInverseCoherentGain",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_FirFilterInverseCoherentGain((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_TappedDelayLine(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_TappedDelayLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_TappedDelayLine",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_TappedDelayLine",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_TappedDelayLine",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLine",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLine",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLine",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_TappedDelayLine(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_TappedDelayLine(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_TappedDelayLine",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_TappedDelayLine",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_TappedDelayLine",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_TappedDelayLine",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_TappedDelayLine",4,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_TappedDelayLine",5,"SLData_t const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_TappedDelayLine",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_TappedDelayLine",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLine",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLine",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLine",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLine",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLine",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLine",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLine",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDS_TappedDelayLine(arg1,arg2,arg3,(SLArrayIndex_t const *)arg4,(SLData_t const *)arg5,arg6,arg7);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TappedDelayLine(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_TappedDelayLine",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TappedDelayLine",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TappedDelayLine",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TappedDelayLine",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TappedDelayLine",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TappedDelayLine",5,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_TappedDelayLine",6,"SLData_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_TappedDelayLine",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_TappedDelayLine",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_TappedDelayLine",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLine",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_TappedDelayLine((SLData_t const *)arg1,arg2,arg3,arg4,(SLArrayIndex_t const *)arg5,(SLData_t const *)arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_TappedDelayLineComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_TappedDelayLineComplex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_TappedDelayLineComplex",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_TappedDelayLineComplex",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_TappedDelayLineComplex",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_TappedDelayLineComplex",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLineComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLineComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLineComplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLineComplex",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_TappedDelayLineComplex(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_TappedDelayLineComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  
  SWIG_check_num_args("SDS_TappedDelayLineComplex",12,12)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_TappedDelayLineComplex",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_TappedDelayLineComplex",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_TappedDelayLineComplex",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_TappedDelayLineComplex",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_TappedDelayLineComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_TappedDelayLineComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_TappedDelayLineComplex",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_TappedDelayLineComplex",8,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_TappedDelayLineComplex",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_TappedDelayLineComplex",10,"SLData_t const *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDS_TappedDelayLineComplex",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDS_TappedDelayLineComplex",12,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineComplex",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  SDS_TappedDelayLineComplex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(SLArrayIndex_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TappedDelayLineComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  
  SWIG_check_num_args("SDA_TappedDelayLineComplex",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TappedDelayLineComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TappedDelayLineComplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TappedDelayLineComplex",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TappedDelayLineComplex",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TappedDelayLineComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_TappedDelayLineComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_TappedDelayLineComplex",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_TappedDelayLineComplex",8,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_TappedDelayLineComplex",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_TappedDelayLineComplex",10,"SLData_t const *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_TappedDelayLineComplex",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_TappedDelayLineComplex",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_TappedDelayLineComplex",13,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineComplex",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  SDA_TappedDelayLineComplex((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(SLArrayIndex_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_TappedDelayLineIQ(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_TappedDelayLineIQ",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_TappedDelayLineIQ",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_TappedDelayLineIQ",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_TappedDelayLineIQ",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_TappedDelayLineIQ",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLineIQ",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLineIQ",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLineIQ",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TappedDelayLineIQ",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_TappedDelayLineIQ(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_TappedDelayLineIQ(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  
  SWIG_check_num_args("SDS_TappedDelayLineIQ",12,12)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_TappedDelayLineIQ",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_TappedDelayLineIQ",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_TappedDelayLineIQ",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_TappedDelayLineIQ",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_TappedDelayLineIQ",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_TappedDelayLineIQ",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_TappedDelayLineIQ",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_TappedDelayLineIQ",8,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_TappedDelayLineIQ",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_TappedDelayLineIQ",10,"SLData_t const *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDS_TappedDelayLineIQ",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDS_TappedDelayLineIQ",12,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TappedDelayLineIQ",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  SDS_TappedDelayLineIQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(SLArrayIndex_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TappedDelayLineIQ(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  
  SWIG_check_num_args("SDA_TappedDelayLineIQ",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TappedDelayLineIQ",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TappedDelayLineIQ",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TappedDelayLineIQ",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TappedDelayLineIQ",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TappedDelayLineIQ",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_TappedDelayLineIQ",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_TappedDelayLineIQ",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_TappedDelayLineIQ",8,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_TappedDelayLineIQ",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_TappedDelayLineIQ",10,"SLData_t const *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_TappedDelayLineIQ",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_TappedDelayLineIQ",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_TappedDelayLineIQ",13,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TappedDelayLineIQ",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  SDA_TappedDelayLineIQ((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,(SLArrayIndex_t const *)arg8,(SLData_t const *)arg9,(SLData_t const *)arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FirPolyPhaseGenerate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t **arg3 = (SLData_t **) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SIF_FirPolyPhaseGenerate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FirPolyPhaseGenerate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FirPolyPhaseGenerate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FirPolyPhaseGenerate",3,"SLData_t **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_FirPolyPhaseGenerate",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_FirPolyPhaseGenerate",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_FirPolyPhaseGenerate",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirPolyPhaseGenerate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirPolyPhaseGenerate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FirPolyPhaseGenerate",3,SWIGTYPE_p_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirPolyPhaseGenerate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirPolyPhaseGenerate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FirPolyPhaseGenerate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SIF_FirPolyPhaseGenerate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Iir(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_Iir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Iir",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_Iir",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Iir",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Iir",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_Iir(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Iir(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Iir",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Iir",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Iir",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_Iir",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_Iir",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Iir",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Iir",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Iir",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_Iir",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDS_Iir(arg1,arg2,(SLData_t const *)arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Iir(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Iir",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Iir",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Iir",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Iir",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Iir",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Iir",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Iir",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Iir",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Iir",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Iir",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Iir",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Iir",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Iir",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Iir((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_IirMac(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_IirMac",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_IirMac",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_IirMac",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_IirMac",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_IirMac",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirMac",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirMac",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirMac",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_IirMac",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDS_IirMac(arg1,arg2,(SLData_t const *)arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirMac(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_IirMac",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirMac",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirMac",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirMac",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_IirMac",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirMac",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirMac",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirMac",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirMac",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirMac",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirMac",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirMac",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirMac",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_IirMac((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirOrderN(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_IirOrderN",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirOrderN",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_IirOrderN",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirOrderN",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirOrderN",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_IirOrderN",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_IirOrderN",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_IirOrderN(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_IirOrderN(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_IirOrderN",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_IirOrderN",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_IirOrderN",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_IirOrderN",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_IirOrderN",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_IirOrderN",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirOrderN",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirOrderN",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirOrderN",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_IirOrderN",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_IirOrderN",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_IirOrderN(arg1,arg2,(SLData_t const *)arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirOrderN(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_IirOrderN",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirOrderN",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirOrderN",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirOrderN",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_IirOrderN",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_IirOrderN",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirOrderN",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_IirOrderN",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirOrderN",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirOrderN",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirOrderN",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirOrderN",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirOrderN",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirOrderN",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirOrderN",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_IirOrderN((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirNc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_IirNc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirNc",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_IirNc",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirNc",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNc",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_IirNc",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_IirNc(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirNc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_IirNc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirNc",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirNc",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirNc",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_IirNc",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_IirNc",5,"SLData_t const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirNc",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_IirNc",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirNc",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirNc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirNc",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirNc",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirNc",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirNc",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirNc",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_IirNc((SLData_t const *)arg1,arg2,arg3,arg4,(SLData_t const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_BilinearTransform(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg4 = (SLComplexRect_s *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_BilinearTransform",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_BilinearTransform",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_BilinearTransform",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_BilinearTransform",3,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_BilinearTransform",4,"SLComplexRect_s *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_BilinearTransform",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_BilinearTransform",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_BilinearTransform",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_BilinearTransform",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_BilinearTransform",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",4,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BilinearTransform",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_BilinearTransform((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_PreWarp(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_PreWarp",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_PreWarp",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_PreWarp",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PreWarp",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PreWarp",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_PreWarp(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MatchedZTransform(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg4 = (SLComplexRect_s *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_MatchedZTransform",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MatchedZTransform",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MatchedZTransform",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_MatchedZTransform",3,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_MatchedZTransform",4,"SLComplexRect_s *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_MatchedZTransform",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_MatchedZTransform",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_MatchedZTransform",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_MatchedZTransform",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_MatchedZTransform",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_MatchedZTransform",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_MatchedZTransform",4,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MatchedZTransform",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MatchedZTransform",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MatchedZTransform",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_MatchedZTransform((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirZplaneToCoeffs(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_IirZplaneToCoeffs",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirZplaneToCoeffs",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirZplaneToCoeffs",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirZplaneToCoeffs",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_IirZplaneToCoeffs",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirZplaneToCoeffs",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneToCoeffs",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneToCoeffs",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneToCoeffs",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneToCoeffs",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneToCoeffs",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_IirZplaneToCoeffs((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirZplanePolarToCoeffs(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s *arg1 = (SLComplexPolar_s *) 0 ;
  SLComplexPolar_s *arg2 = (SLComplexPolar_s *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_IirZplanePolarToCoeffs",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirZplanePolarToCoeffs",1,"SLComplexPolar_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirZplanePolarToCoeffs",2,"SLComplexPolar_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirZplanePolarToCoeffs",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_IirZplanePolarToCoeffs",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirZplanePolarToCoeffs",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_IirZplanePolarToCoeffs",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_IirZplanePolarToCoeffs",2,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplanePolarToCoeffs",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplanePolarToCoeffs",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplanePolarToCoeffs",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_IirZplanePolarToCoeffs((SLComplexPolar_s const *)arg1,(SLComplexPolar_s const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirZplaneLpfToLpf(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg4 = (SLComplexRect_s *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_IirZplaneLpfToLpf",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",3,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",4,"SLComplexRect_s *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_IirZplaneLpfToLpf",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",4,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToLpf",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_IirZplaneLpfToLpf((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirZplaneLpfToHpf(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg4 = (SLComplexRect_s *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_IirZplaneLpfToHpf",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",3,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",4,"SLComplexRect_s *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_IirZplaneLpfToHpf",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",4,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToHpf",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_IirZplaneLpfToHpf((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirZplaneLpfToBpf(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg4 = (SLComplexRect_s *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDA_IirZplaneLpfToBpf",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",3,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",4,"SLComplexRect_s *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",8,"SLData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_IirZplaneLpfToBpf",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",4,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBpf",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDA_IirZplaneLpfToBpf((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirZplaneLpfToBsf(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg4 = (SLComplexRect_s *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDA_IirZplaneLpfToBsf",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",3,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",4,"SLComplexRect_s *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",8,"SLData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_IirZplaneLpfToBsf",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",4,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirZplaneLpfToBsf",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDA_IirZplaneLpfToBsf((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirModifyFilterGain(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_IirModifyFilterGain",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirModifyFilterGain",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirModifyFilterGain",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_IirModifyFilterGain",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_IirModifyFilterGain",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirModifyFilterGain",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirModifyFilterGain",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirModifyFilterGain",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirModifyFilterGain",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirModifyFilterGain",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirModifyFilterGain",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_IirModifyFilterGain((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirLowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  
  SWIG_check_num_args("SIF_IirLowPassFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirLowPassFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirLowPassFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirLowPassFilter",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirLowPassFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirLowPassFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirLowPassFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  SIF_IirLowPassFilter(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirHighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  
  SWIG_check_num_args("SIF_IirHighPassFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirHighPassFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirHighPassFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirHighPassFilter",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirHighPassFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirHighPassFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirHighPassFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  SIF_IirHighPassFilter(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirAllPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  
  SWIG_check_num_args("SIF_IirAllPassFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirAllPassFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirAllPassFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirAllPassFilter",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirAllPassFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirAllPassFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirAllPassFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  SIF_IirAllPassFilter(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirBandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  
  SWIG_check_num_args("SIF_IirBandPassFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirBandPassFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirBandPassFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirBandPassFilter",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirBandPassFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirBandPassFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirBandPassFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  SIF_IirBandPassFilter(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirNotchFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  
  SWIG_check_num_args("SIF_IirNotchFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirNotchFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirNotchFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirNotchFilter",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNotchFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNotchFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNotchFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  SIF_IirNotchFilter(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirPeakingFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  
  SWIG_check_num_args("SIF_IirPeakingFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirPeakingFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirPeakingFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirPeakingFilter",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_IirPeakingFilter",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirPeakingFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirPeakingFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirPeakingFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirPeakingFilter",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  SIF_IirPeakingFilter(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirLowShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  
  SWIG_check_num_args("SIF_IirLowShelfFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirLowShelfFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirLowShelfFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirLowShelfFilter",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_IirLowShelfFilter",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirLowShelfFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirLowShelfFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirLowShelfFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirLowShelfFilter",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  SIF_IirLowShelfFilter(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirHighShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  
  SWIG_check_num_args("SIF_IirHighShelfFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirHighShelfFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirHighShelfFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirHighShelfFilter",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_IirHighShelfFilter",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirHighShelfFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirHighShelfFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirHighShelfFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirHighShelfFilter",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  SIF_IirHighShelfFilter(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_IirRemoveDC(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_IirRemoveDC",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_IirRemoveDC",1,"SLData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_IirRemoveDC",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_IirRemoveDC",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_IirRemoveDC",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirRemoveDC",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirRemoveDC",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirRemoveDC",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_IirRemoveDC",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  result = SDS_IirRemoveDC(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirRemoveDC(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_IirRemoveDC",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirRemoveDC",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirRemoveDC",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_IirRemoveDC",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_IirRemoveDC",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirRemoveDC",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirRemoveDC",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirRemoveDC",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirRemoveDC",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirRemoveDC",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirRemoveDC",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirRemoveDC",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirRemoveDC",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_IirRemoveDC((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_OnePole(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIF_OnePole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_OnePole",1,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OnePole",1,SWIGTYPE_p_SLData_t);
  }
  
  SIF_OnePole(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_OnePole(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_OnePole",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_OnePole",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_OnePole",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_OnePole",3,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePole",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePole",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePole",3,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_OnePole(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OnePole(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_OnePole",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OnePole",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OnePole",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_OnePole",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_OnePole",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OnePole",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePole",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePole",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePole",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePole",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OnePole",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_OnePole((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_OnePoleNormalized(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_OnePoleNormalized",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_OnePoleNormalized",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_OnePoleNormalized",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_OnePoleNormalized",3,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleNormalized",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleNormalized",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleNormalized",3,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_OnePoleNormalized(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OnePoleNormalized(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_OnePoleNormalized",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OnePoleNormalized",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OnePoleNormalized",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_OnePoleNormalized",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_OnePoleNormalized",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OnePoleNormalized",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleNormalized",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleNormalized",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleNormalized",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleNormalized",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OnePoleNormalized",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_OnePoleNormalized((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OnePolePerSample(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_OnePolePerSample",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OnePolePerSample",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OnePolePerSample",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_OnePolePerSample",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_OnePolePerSample",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OnePolePerSample",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePolePerSample",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePolePerSample",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePolePerSample",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePolePerSample",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OnePolePerSample",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_OnePolePerSample((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_OnePoleHighPass(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIF_OnePoleHighPass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_OnePoleHighPass",1,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OnePoleHighPass",1,SWIGTYPE_p_SLData_t);
  }
  
  SIF_OnePoleHighPass(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_OnePoleHighPass(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_OnePoleHighPass",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_OnePoleHighPass",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_OnePoleHighPass",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_OnePoleHighPass",3,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleHighPass",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleHighPass",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleHighPass",3,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_OnePoleHighPass(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OnePoleHighPass(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_OnePoleHighPass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OnePoleHighPass",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OnePoleHighPass",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_OnePoleHighPass",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_OnePoleHighPass",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OnePoleHighPass",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPass",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPass",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPass",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPass",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPass",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_OnePoleHighPass((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_OnePoleHighPassNormalized(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_OnePoleHighPassNormalized",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_OnePoleHighPassNormalized",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_OnePoleHighPassNormalized",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_OnePoleHighPassNormalized",3,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleHighPassNormalized",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleHighPassNormalized",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleHighPassNormalized",3,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_OnePoleHighPassNormalized(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OnePoleHighPassNormalized(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_OnePoleHighPassNormalized",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OnePoleHighPassNormalized",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OnePoleHighPassNormalized",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_OnePoleHighPassNormalized",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_OnePoleHighPassNormalized",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OnePoleHighPassNormalized",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPassNormalized",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPassNormalized",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPassNormalized",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPassNormalized",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OnePoleHighPassNormalized",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_OnePoleHighPassNormalized((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_OnePoleTimeConstantToFilterCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_OnePoleTimeConstantToFilterCoeff",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_OnePoleTimeConstantToFilterCoeff",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_OnePoleTimeConstantToFilterCoeff",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleTimeConstantToFilterCoeff",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleTimeConstantToFilterCoeff",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_OnePoleTimeConstantToFilterCoeff(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_OnePoleCutOffFrequencyToFilterCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_OnePoleCutOffFrequencyToFilterCoeff",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_OnePoleCutOffFrequencyToFilterCoeff",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_OnePoleCutOffFrequencyToFilterCoeff",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleCutOffFrequencyToFilterCoeff",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleCutOffFrequencyToFilterCoeff",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_OnePoleCutOffFrequencyToFilterCoeff(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_AllPole(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_AllPole",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_AllPole",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_AllPole",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_AllPole",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AllPole",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AllPole",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AllPole",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_AllPole(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_AllPole(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_AllPole",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_AllPole",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_AllPole",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_AllPole",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_AllPole",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_AllPole",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AllPole",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AllPole",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AllPole",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_AllPole",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_AllPole",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_AllPole(arg1,arg2,(SLData_t const *)arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AllPole(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_AllPole",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AllPole",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AllPole",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_AllPole",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_AllPole",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_AllPole",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_AllPole",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_AllPole",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AllPole",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AllPole",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AllPole",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AllPole",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AllPole",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AllPole",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AllPole",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_AllPole((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ZDomainCoefficientReorg(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ZDomainCoefficientReorg",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ZDomainCoefficientReorg",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ZDomainCoefficientReorg",2,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ZDomainCoefficientReorg",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ZDomainCoefficientReorg",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZDomainCoefficientReorg",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ZDomainCoefficientReorg",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ZDomainCoefficientReorg",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZDomainCoefficientReorg",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ZDomainCoefficientReorg((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirNotchFilter2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_IirNotchFilter2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirNotchFilter2",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_IirNotchFilter2",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirNotchFilter2",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_IirNotchFilter2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNotchFilter2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNotchFilter2",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNotchFilter2",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_IirNotchFilter2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SIF_IirNotchFilter2(arg1,arg2,arg3,arg4);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirNormalizedCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  enum SLIIRNormalizedCoeffs_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_IirNormalizedCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirNormalizedCoefficients",1,"SLData_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SIF_IirNormalizedCoefficients",2,"enum SLIIRNormalizedCoeffs_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirNormalizedCoefficients",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_IirNormalizedCoefficients",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (enum SLIIRNormalizedCoeffs_t)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_IirNormalizedCoefficients",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SIF_IirNormalizedCoefficients(arg1,arg2,arg3);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_IirNormalizedSPlaneCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  enum SLIIRNormalizedCoeffs_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_IirNormalizedSPlaneCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_IirNormalizedSPlaneCoefficients",1,"SLComplexRect_s *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SIF_IirNormalizedSPlaneCoefficients",2,"enum SLIIRNormalizedCoeffs_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_IirNormalizedSPlaneCoefficients",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_IirNormalizedSPlaneCoefficients",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  arg2 = (enum SLIIRNormalizedCoeffs_t)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_IirNormalizedSPlaneCoefficients",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SIF_IirNormalizedSPlaneCoefficients(arg1,arg2,arg3);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TranslateSPlaneCutOffFrequency(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_TranslateSPlaneCutOffFrequency",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TranslateSPlaneCutOffFrequency",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TranslateSPlaneCutOffFrequency",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_TranslateSPlaneCutOffFrequency",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_TranslateSPlaneCutOffFrequency",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_TranslateSPlaneCutOffFrequency",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_TranslateSPlaneCutOffFrequency",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TranslateSPlaneCutOffFrequency",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TranslateSPlaneCutOffFrequency",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_TranslateSPlaneCutOffFrequency((SLComplexRect_s const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirLpLpShift(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_IirLpLpShift",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirLpLpShift",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirLpLpShift",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_IirLpLpShift",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_IirLpLpShift",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirLpLpShift",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirLpLpShift",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpLpShift",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpLpShift",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpLpShift",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpLpShift",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpLpShift",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirLpLpShift",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_IirLpLpShift((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirLpHpShift(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_IirLpHpShift",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirLpHpShift",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirLpHpShift",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_IirLpHpShift",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_IirLpHpShift",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IirLpHpShift",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_IirLpHpShift",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpHpShift",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpHpShift",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpHpShift",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpHpShift",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirLpHpShift",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirLpHpShift",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_IirLpHpShift((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Iir2PoleLpf(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  
  SWIG_check_num_args("SIF_Iir2PoleLpf",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Iir2PoleLpf",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Iir2PoleLpf",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Iir2PoleLpf",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_Iir2PoleLpf",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Iir2PoleLpf",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Iir2PoleLpf",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Iir2PoleLpf",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Iir2PoleLpf",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  SIF_Iir2PoleLpf(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Iir2Pole(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Iir2Pole",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Iir2Pole",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Iir2Pole",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_Iir2Pole",3,"SLData_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Iir2Pole",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Iir2Pole",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Iir2Pole",3,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_Iir2Pole(arg1,arg2,(SLData_t const *)arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Iir2Pole(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Iir2Pole",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Iir2Pole",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Iir2Pole",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Iir2Pole",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Iir2Pole",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Iir2Pole",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Iir2Pole",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Iir2Pole",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Iir2Pole",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Iir2Pole",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Iir2Pole",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Iir2Pole((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IirNegateAlphaCoeffs(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_IirNegateAlphaCoeffs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IirNegateAlphaCoeffs",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IirNegateAlphaCoeffs",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_IirNegateAlphaCoeffs",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirNegateAlphaCoeffs",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_IirNegateAlphaCoeffs",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IirNegateAlphaCoeffs",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_IirNegateAlphaCoeffs((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Integrate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Integrate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Integrate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Integrate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Integrate",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Integrate",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Integrate",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Integrate",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Integrate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Integrate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Integrate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Integrate",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Integrate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Integrate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Integrate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Differentiate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Differentiate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Differentiate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Differentiate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Differentiate",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Differentiate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Differentiate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Differentiate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Differentiate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Differentiate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Differentiate((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_LeakyIntegrator(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIF_LeakyIntegrator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_LeakyIntegrator",1,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_LeakyIntegrator",1,SWIGTYPE_p_SLData_t);
  }
  
  SIF_LeakyIntegrator(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_LeakyIntegrator1(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_LeakyIntegrator1",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_LeakyIntegrator1",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_LeakyIntegrator1",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_LeakyIntegrator1",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_LeakyIntegrator1",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LeakyIntegrator1",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LeakyIntegrator1",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LeakyIntegrator1",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LeakyIntegrator1",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  result = SDS_LeakyIntegrator1(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_LeakyIntegrator2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_LeakyIntegrator2",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_LeakyIntegrator2",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_LeakyIntegrator2",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_LeakyIntegrator2",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_LeakyIntegrator2",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LeakyIntegrator2",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LeakyIntegrator2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LeakyIntegrator2",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LeakyIntegrator2",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  result = SDS_LeakyIntegrator2(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_HilbertTransformer(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_HilbertTransformer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_HilbertTransformer",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_HilbertTransformer",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_HilbertTransformer",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_HilbertTransformer",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_HilbertTransformer(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_GoertzelFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SIF_GoertzelFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_GoertzelFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_GoertzelFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_GoertzelFilter",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_GoertzelFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_GoertzelFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_GoertzelFilter",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SIF_GoertzelFilter(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_GoertzelFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_GoertzelFilter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_GoertzelFilter",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_GoertzelFilter",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_GoertzelFilter",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_GoertzelFilter",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_GoertzelFilter",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GoertzelFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GoertzelFilter",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GoertzelFilter",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GoertzelFilter",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_GoertzelFilter",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_GoertzelFilter((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_GoertzelFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_GoertzelFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_GoertzelFilter",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_GoertzelFilter",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_GoertzelFilter",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_GoertzelFilter",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_GoertzelFilter",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_GoertzelFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_GoertzelFilter(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_GoertzelDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLArrayIndex_t arg2 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SIF_GoertzelDetect",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SIF_GoertzelDetect",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_GoertzelDetect",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_GoertzelDetect",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_GoertzelDetect",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SIF_GoertzelDetect(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_GoertzelDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_GoertzelDetect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_GoertzelDetect",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_GoertzelDetect",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_GoertzelDetect",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GoertzelDetect",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GoertzelDetect",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_GoertzelDetect",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_GoertzelDetect((SLData_t const *)arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_GoertzelDetectComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLArrayIndex_t arg2 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SIF_GoertzelDetectComplex",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SIF_GoertzelDetectComplex",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_GoertzelDetectComplex",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_GoertzelDetectComplex",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_GoertzelDetectComplex",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SIF_GoertzelDetectComplex(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_GoertzelDetectComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLComplexRect_s arg2 ;
  SLArrayIndex_t arg3 ;
  SLComplexRect_s *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SDA_GoertzelDetectComplex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_GoertzelDetectComplex",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_GoertzelDetectComplex",2,"SLComplexRect_s const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_GoertzelDetectComplex",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GoertzelDetectComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_GoertzelDetectComplex",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_GoertzelDetectComplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_GoertzelDetectComplex((SLData_t const *)arg1,arg2,arg3);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_GaussianFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_GaussianFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_GaussianFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_GaussianFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_GaussianFilter",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_GaussianFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_GaussianFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_GaussianFilter",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_GaussianFilter(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_GaussianFilter2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_GaussianFilter2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_GaussianFilter2",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_GaussianFilter2",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_GaussianFilter2",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_GaussianFilter2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_GaussianFilter2",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_GaussianFilter2",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_GaussianFilter2(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_RaisedCosineFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_RaisedCosineFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_RaisedCosineFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_RaisedCosineFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_RaisedCosineFilter",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_RaisedCosineFilter",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_RaisedCosineFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_RaisedCosineFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_RaisedCosineFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_RaisedCosineFilter",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_RaisedCosineFilter(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_RootRaisedCosineFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_RootRaisedCosineFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_RootRaisedCosineFilter",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_RootRaisedCosineFilter",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_RootRaisedCosineFilter",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_RootRaisedCosineFilter",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_RootRaisedCosineFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_RootRaisedCosineFilter",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_RootRaisedCosineFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_RootRaisedCosineFilter",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_RootRaisedCosineFilter(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ZTransform(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLComplexRect_s *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ZTransform",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ZTransform",1,"SLComplexRect_s const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ZTransform",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_ZTransform",3,"SLComplexRect_s const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_ZTransform",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_ZTransform",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ZTransform",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ZTransform",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ZTransform",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ZTransform",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ZTransform",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_ZTransform(arg1,(SLComplexRect_s const *)arg2,(SLComplexRect_s const *)arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ZTransformDB(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLComplexRect_s *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ZTransformDB",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ZTransformDB",1,"SLComplexRect_s const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ZTransformDB",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_ZTransformDB",3,"SLComplexRect_s const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_ZTransformDB",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_ZTransformDB",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ZTransformDB",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ZTransformDB",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ZTransformDB",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ZTransformDB",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ZTransformDB",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_ZTransformDB(arg1,(SLComplexRect_s const *)arg2,(SLComplexRect_s const *)arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_EstimateBPFilterLength(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_EstimateBPFilterLength",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_EstimateBPFilterLength",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_EstimateBPFilterLength",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_EstimateBPFilterLength",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_EstimateBPFilterLength",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterLength",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterLength",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterLength",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterLength",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SUF_EstimateBPFilterLength(arg1,arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_EstimateBPFilterError(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SUF_EstimateBPFilterError",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_EstimateBPFilterError",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_EstimateBPFilterError",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_EstimateBPFilterError",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SUF_EstimateBPFilterError",4,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SUF_EstimateBPFilterError",5,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterError",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterError",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterError",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterError",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_EstimateBPFilterError",5,SWIGTYPE_p_SLData_t);
  }
  
  SUF_EstimateBPFilterError(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_FrequenciesToOctaves(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SUF_FrequenciesToOctaves",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_FrequenciesToOctaves",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_FrequenciesToOctaves",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FrequenciesToOctaves",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FrequenciesToOctaves",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SUF_FrequenciesToOctaves(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_FrequenciesToCentreFreqHz(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SUF_FrequenciesToCentreFreqHz",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_FrequenciesToCentreFreqHz",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_FrequenciesToCentreFreqHz",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FrequenciesToCentreFreqHz",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FrequenciesToCentreFreqHz",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SUF_FrequenciesToCentreFreqHz(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_FrequenciesToQFactor(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SUF_FrequenciesToQFactor",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_FrequenciesToQFactor",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_FrequenciesToQFactor",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FrequenciesToQFactor",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_FrequenciesToQFactor",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SUF_FrequenciesToQFactor(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_BandwidthToQFactor(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SUF_BandwidthToQFactor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_BandwidthToQFactor",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_BandwidthToQFactor",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SUF_BandwidthToQFactor(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_QFactorToBandwidth(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SUF_QFactorToBandwidth",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_QFactorToBandwidth",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SUF_QFactorToBandwidth",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SUF_QFactorToBandwidth(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LinearMicrophoneArrayBeamPattern(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLFixData_t arg8 ;
  SLFixData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLFixData_t *argp8 ;
  
  SWIG_check_num_args("SDA_LinearMicrophoneArrayBeamPattern",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPattern",1,"SLFixData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPattern",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPattern",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPattern",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPattern",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPattern",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPattern",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPattern",8,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPattern",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPattern",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPattern",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPattern",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPattern",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPattern",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPattern",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPattern",8,SWIGTYPE_p_SLFixData_t);
  }
  arg8 = *argp8;
  
  SDA_LinearMicrophoneArrayBeamPattern(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LinearMicrophoneArrayBeamPatternLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLFixData_t arg8 ;
  SLFixData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLFixData_t *argp8 ;
  
  SWIG_check_num_args("SDA_LinearMicrophoneArrayBeamPatternLinear",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPatternLinear",1,"SLFixData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPatternLinear",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPatternLinear",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPatternLinear",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPatternLinear",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPatternLinear",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPatternLinear",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_LinearMicrophoneArrayBeamPatternLinear",8,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPatternLinear",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPatternLinear",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPatternLinear",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPatternLinear",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPatternLinear",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPatternLinear",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPatternLinear",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_LinearMicrophoneArrayBeamPatternLinear",8,SWIGTYPE_p_SLFixData_t);
  }
  arg8 = *argp8;
  
  SDA_LinearMicrophoneArrayBeamPatternLinear(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MicrophoneArrayCalculateDelays(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLMicrophone_s *arg2 = (SLMicrophone_s *) 0 ;
  SLData_t arg3 ;
  SLFixData_t *argp1 ;
  SLData_t *argp3 ;
  
  SWIG_check_num_args("SDA_MicrophoneArrayCalculateDelays",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_MicrophoneArrayCalculateDelays",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MicrophoneArrayCalculateDelays",2,"SLMicrophone_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_MicrophoneArrayCalculateDelays",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayCalculateDelays",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLMicrophone_s,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayCalculateDelays",2,SWIGTYPE_p_SLMicrophone_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayCalculateDelays",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  SDA_MicrophoneArrayCalculateDelays(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MicrophoneArrayBeamPattern(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLMicrophone_s *arg2 = (SLMicrophone_s *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLFixData_t arg9 ;
  SLData_t arg10 ;
  SLFixData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLFixData_t *argp9 ;
  SLData_t *argp10 ;
  
  SWIG_check_num_args("SDA_MicrophoneArrayBeamPattern",10,10)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",2,"SLMicrophone_s const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",8,"SLData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",9,"SLFixData_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPattern",10,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLMicrophone_s,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",2,SWIGTYPE_p_SLMicrophone_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",9,SWIGTYPE_p_SLFixData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPattern",10,SWIGTYPE_p_SLData_t);
  }
  arg10 = *argp10;
  
  SDA_MicrophoneArrayBeamPattern(arg1,(SLMicrophone_s const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MicrophoneArrayBeamPatternLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLMicrophone_s *arg2 = (SLMicrophone_s *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLFixData_t arg9 ;
  SLData_t arg10 ;
  SLFixData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLFixData_t *argp9 ;
  SLData_t *argp10 ;
  
  SWIG_check_num_args("SDA_MicrophoneArrayBeamPatternLinear",10,10)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",2,"SLMicrophone_s const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",8,"SLData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",9,"SLFixData_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_MicrophoneArrayBeamPatternLinear",10,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLMicrophone_s,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",2,SWIGTYPE_p_SLMicrophone_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",9,SWIGTYPE_p_SLFixData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MicrophoneArrayBeamPatternLinear",10,SWIGTYPE_p_SLData_t);
  }
  arg10 = *argp10;
  
  SDA_MicrophoneArrayBeamPatternLinear(arg1,(SLMicrophone_s const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_TemperatureToSpeedOfSoundInAir(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_TemperatureToSpeedOfSoundInAir",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_TemperatureToSpeedOfSoundInAir",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TemperatureToSpeedOfSoundInAir",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_TemperatureToSpeedOfSoundInAir(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Lms(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SIF_Lms",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Lms",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Lms",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_Lms",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_Lms",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_Lms",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Lms",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Lms",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Lms",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Lms",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Lms",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SIF_Lms(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Lms(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Lms",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Lms",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Lms",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_Lms",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_Lms",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_Lms",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Lms",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Lms",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Lms",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_Lms",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_Lms",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_Lms(arg1,arg2,(SLData_t const *)arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LmsUpdate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  
  SWIG_check_num_args("SDA_LmsUpdate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LmsUpdate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LmsUpdate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_LmsUpdate",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LmsUpdate",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_LmsUpdate",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_LmsUpdate",6,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LmsUpdate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LmsUpdate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LmsUpdate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LmsUpdate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LmsUpdate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LmsUpdate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  SDA_LmsUpdate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LeakyLmsUpdate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLArrayIndex_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  
  SWIG_check_num_args("SDA_LeakyLmsUpdate",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LeakyLmsUpdate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LeakyLmsUpdate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_LeakyLmsUpdate",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LeakyLmsUpdate",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_LeakyLmsUpdate",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_LeakyLmsUpdate",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_LeakyLmsUpdate",7,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LeakyLmsUpdate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LeakyLmsUpdate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LeakyLmsUpdate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LeakyLmsUpdate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LeakyLmsUpdate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LeakyLmsUpdate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LeakyLmsUpdate",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  SDA_LeakyLmsUpdate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_NormalizedLmsUpdate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  
  SWIG_check_num_args("SDA_NormalizedLmsUpdate",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_NormalizedLmsUpdate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_NormalizedLmsUpdate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_NormalizedLmsUpdate",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_NormalizedLmsUpdate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_NormalizedLmsUpdate",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_NormalizedLmsUpdate",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_NormalizedLmsUpdate",7,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NormalizedLmsUpdate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NormalizedLmsUpdate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_NormalizedLmsUpdate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NormalizedLmsUpdate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_NormalizedLmsUpdate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NormalizedLmsUpdate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NormalizedLmsUpdate",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  SDA_NormalizedLmsUpdate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignErrorLmsUpdate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  
  SWIG_check_num_args("SDA_SignErrorLmsUpdate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignErrorLmsUpdate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SignErrorLmsUpdate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SignErrorLmsUpdate",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SignErrorLmsUpdate",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SignErrorLmsUpdate",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_SignErrorLmsUpdate",6,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignErrorLmsUpdate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignErrorLmsUpdate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignErrorLmsUpdate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignErrorLmsUpdate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignErrorLmsUpdate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignErrorLmsUpdate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  SDA_SignErrorLmsUpdate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignDataLmsUpdate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  
  SWIG_check_num_args("SDA_SignDataLmsUpdate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignDataLmsUpdate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SignDataLmsUpdate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SignDataLmsUpdate",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SignDataLmsUpdate",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SignDataLmsUpdate",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_SignDataLmsUpdate",6,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignDataLmsUpdate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignDataLmsUpdate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignDataLmsUpdate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignDataLmsUpdate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignDataLmsUpdate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignDataLmsUpdate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  SDA_SignDataLmsUpdate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignSignLmsUpdate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  
  SWIG_check_num_args("SDA_SignSignLmsUpdate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignSignLmsUpdate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SignSignLmsUpdate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SignSignLmsUpdate",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SignSignLmsUpdate",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SignSignLmsUpdate",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_SignSignLmsUpdate",6,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignSignLmsUpdate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignSignLmsUpdate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignSignLmsUpdate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignSignLmsUpdate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignSignLmsUpdate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignSignLmsUpdate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  SDA_SignSignLmsUpdate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ConvolveLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_ConvolveLinear",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ConvolveLinear",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ConvolveLinear",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ConvolveLinear",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ConvolveLinear",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ConvolveLinear",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinear",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinear",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinear",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinear",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinear",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_ConvolveLinear((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ConvolvePartial(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_ConvolvePartial",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ConvolvePartial",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ConvolvePartial",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ConvolvePartial",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ConvolvePartial",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ConvolvePartial",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartial",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartial",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartial",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartial",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartial",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_ConvolvePartial((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ConvolveCircular(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ConvolveCircular",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ConvolveCircular",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ConvolveCircular",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ConvolveCircular",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ConvolveCircular",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircular",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircular",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircular",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircular",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ConvolveCircular((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ConvolveLinearComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_ConvolveLinearComplex",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ConvolveLinearComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ConvolveLinearComplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ConvolveLinearComplex",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ConvolveLinearComplex",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ConvolveLinearComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ConvolveLinearComplex",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ConvolveLinearComplex",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_ConvolveLinearComplex",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinearComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinearComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinearComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinearComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinearComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinearComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinearComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolveLinearComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_ConvolveLinearComplex((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ConvolvePartialComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_ConvolvePartialComplex",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ConvolvePartialComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ConvolvePartialComplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ConvolvePartialComplex",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ConvolvePartialComplex",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ConvolvePartialComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ConvolvePartialComplex",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ConvolvePartialComplex",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_ConvolvePartialComplex",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartialComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartialComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartialComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartialComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartialComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartialComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartialComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolvePartialComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_ConvolvePartialComplex((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ConvolveCircularComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_ConvolveCircularComplex",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ConvolveCircularComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ConvolveCircularComplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ConvolveCircularComplex",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ConvolveCircularComplex",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ConvolveCircularComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ConvolveCircularComplex",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ConvolveCircularComplex",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircularComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircularComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircularComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircularComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircularComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircularComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ConvolveCircularComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_ConvolveCircularComplex((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FftDeconvolution(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t arg10 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLData_t *argp10 ;
  
  SWIG_check_num_args("SDA_FftDeconvolution",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FftDeconvolution",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FftDeconvolution",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FftDeconvolution",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FftDeconvolution",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FftDeconvolution",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FftDeconvolution",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FftDeconvolution",7,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FftDeconvolution",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FftDeconvolution",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_FftDeconvolution",10,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolution",10,SWIGTYPE_p_SLData_t);
  }
  arg10 = *argp10;
  
  SDA_FftDeconvolution(arg1,arg2,arg3,arg4,arg5,(SLData_t const *)arg6,(SLArrayIndex_t const *)arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FftDeconvolutionPre(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SIF_FftDeconvolutionPre",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FftDeconvolutionPre",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FftDeconvolutionPre",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FftDeconvolutionPre",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FftDeconvolutionPre",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_FftDeconvolutionPre",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_FftDeconvolutionPre",6,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_FftDeconvolutionPre",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_FftDeconvolutionPre",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftDeconvolutionPre",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftDeconvolutionPre",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftDeconvolutionPre",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftDeconvolutionPre",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FftDeconvolutionPre",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftDeconvolutionPre",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftDeconvolutionPre",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FftDeconvolutionPre",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SIF_FftDeconvolutionPre((SLData_t const *)arg1,arg2,arg3,arg4,(SLData_t const *)arg5,(SLArrayIndex_t const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FftDeconvolutionPre(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t arg9 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLData_t *argp9 ;
  
  SWIG_check_num_args("SDA_FftDeconvolutionPre",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FftDeconvolutionPre",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FftDeconvolutionPre",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FftDeconvolutionPre",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FftDeconvolutionPre",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FftDeconvolutionPre",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FftDeconvolutionPre",6,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FftDeconvolutionPre",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FftDeconvolutionPre",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FftDeconvolutionPre",9,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FftDeconvolutionPre",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  SDA_FftDeconvolutionPre(arg1,arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,(SLData_t const *)arg5,(SLArrayIndex_t const *)arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CorrelateLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_CorrelateLinear",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CorrelateLinear",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CorrelateLinear",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CorrelateLinear",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CorrelateLinear",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CorrelateLinear",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CorrelateLinear",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinear",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinear",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinear",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinear",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinear",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinear",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_CorrelateLinear((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CorrelatePartial(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_CorrelatePartial",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CorrelatePartial",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CorrelatePartial",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CorrelatePartial",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CorrelatePartial",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CorrelatePartial",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelatePartial",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelatePartial",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelatePartial",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelatePartial",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelatePartial",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_CorrelatePartial((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CorrelateCircular(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_CorrelateCircular",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CorrelateCircular",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CorrelateCircular",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CorrelateCircular",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CorrelateCircular",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateCircular",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateCircular",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateCircular",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelateCircular",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_CorrelateCircular((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Covariance(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_Covariance",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Covariance",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Covariance",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Covariance",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Covariance",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Covariance",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Covariance",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Covariance",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Covariance",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Covariance",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Covariance",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Covariance",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Covariance",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Covariance",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Covariance",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Covariance",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Covariance",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_Covariance(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CovariancePartial(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_CovariancePartial",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CovariancePartial",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CovariancePartial",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CovariancePartial",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CovariancePartial",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CovariancePartial",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CovariancePartial",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_CovariancePartial",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CovariancePartial",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CovariancePartial",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CovariancePartial",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CovariancePartial",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CovariancePartial",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CovariancePartial",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CovariancePartial",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_CovariancePartial(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CorrelateLinearReturnPeak(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_CorrelateLinearReturnPeak",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CorrelateLinearReturnPeak",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CorrelateLinearReturnPeak",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CorrelateLinearReturnPeak",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CorrelateLinearReturnPeak",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CorrelateLinearReturnPeak",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CorrelateLinearReturnPeak",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_CorrelateLinearReturnPeak",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinearReturnPeak",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinearReturnPeak",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinearReturnPeak",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinearReturnPeak",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinearReturnPeak",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinearReturnPeak",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CorrelateLinearReturnPeak",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_CorrelateLinearReturnPeak((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FixedDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_FixedDelay",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FixedDelay",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FixedDelay",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FixedDelay",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FixedDelay",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FixedDelay",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FixedDelay",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_FixedDelay(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FixedDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_FixedDelay",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FixedDelay",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FixedDelay",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FixedDelay",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_FixedDelay",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FixedDelay",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FixedDelay",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FixedDelay",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FixedDelay",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDS_FixedDelay(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FixedDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_FixedDelay",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FixedDelay",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FixedDelay",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FixedDelay",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FixedDelay",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FixedDelay",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FixedDelay",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelay",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelay",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelay",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FixedDelay",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FixedDelay",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FixedDelay",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_FixedDelay((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FixedDelayComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_FixedDelayComplex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FixedDelayComplex",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FixedDelayComplex",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FixedDelayComplex",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FixedDelayComplex",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FixedDelayComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FixedDelayComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FixedDelayComplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FixedDelayComplex",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_FixedDelayComplex(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FixedDelayComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDS_FixedDelayComplex",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FixedDelayComplex",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_FixedDelayComplex",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FixedDelayComplex",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_FixedDelayComplex",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_FixedDelayComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_FixedDelayComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_FixedDelayComplex",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDS_FixedDelayComplex",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FixedDelayComplex",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FixedDelayComplex",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FixedDelayComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FixedDelayComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FixedDelayComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FixedDelayComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FixedDelayComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FixedDelayComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDS_FixedDelayComplex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FixedDelayComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_FixedDelayComplex",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FixedDelayComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FixedDelayComplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FixedDelayComplex",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FixedDelayComplex",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FixedDelayComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FixedDelayComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FixedDelayComplex",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FixedDelayComplex",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FixedDelayComplex",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FixedDelayComplex",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_FixedDelayComplex((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ShortFixedDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_ShortFixedDelay",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ShortFixedDelay",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ShortFixedDelay",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ShortFixedDelay",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ShortFixedDelay",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ShortFixedDelay",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ShortFixedDelay",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ShortFixedDelay",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ShortFixedDelay",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ShortFixedDelay",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ShortFixedDelay",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ShortFixedDelay",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ShortFixedDelay",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_ShortFixedDelay((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_VariableDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_VariableDelay",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_VariableDelay",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_VariableDelay",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_VariableDelay",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_VariableDelay",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_VariableDelay",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_VariableDelay",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_VariableDelay",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelay",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelay",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelay",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelay",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelay",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SIF_VariableDelay(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_VariableDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_VariableDelay",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_VariableDelay",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_VariableDelay",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_VariableDelay",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_VariableDelay",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_VariableDelay",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_VariableDelay",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_VariableDelay",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_VariableDelay",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_VariableDelay",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_VariableDelay",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_VariableDelay(arg1,arg2,arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_VariableDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_VariableDelay",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_VariableDelay",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_VariableDelay",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_VariableDelay",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_VariableDelay",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_VariableDelay",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_VariableDelay",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_VariableDelay",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelay",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelay",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelay",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_VariableDelay",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_VariableDelay",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_VariableDelay",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_VariableDelay",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_VariableDelay((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_VariableDelayComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_VariableDelayComplex",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_VariableDelayComplex",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_VariableDelayComplex",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_VariableDelayComplex",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_VariableDelayComplex",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_VariableDelayComplex",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_VariableDelayComplex",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_VariableDelayComplex",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_VariableDelayComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_VariableDelayComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelayComplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelayComplex",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelayComplex",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelayComplex",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_VariableDelayComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SIF_VariableDelayComplex(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_VariableDelayComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDS_VariableDelayComplex",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_VariableDelayComplex",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_VariableDelayComplex",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_VariableDelayComplex",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_VariableDelayComplex",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_VariableDelayComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_VariableDelayComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_VariableDelayComplex",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_VariableDelayComplex",8,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDS_VariableDelayComplex",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_VariableDelayComplex",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDS_VariableDelayComplex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_VariableDelayComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDA_VariableDelayComplex",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_VariableDelayComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_VariableDelayComplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_VariableDelayComplex",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_VariableDelayComplex",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_VariableDelayComplex",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_VariableDelayComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_VariableDelayComplex",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_VariableDelayComplex",8,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_VariableDelayComplex",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_VariableDelayComplex",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_VariableDelayComplex",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDA_VariableDelayComplex((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_IncreaseVariableDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_IncreaseVariableDelay",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_IncreaseVariableDelay",1,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_IncreaseVariableDelay",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_IncreaseVariableDelay",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IncreaseVariableDelay",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IncreaseVariableDelay",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IncreaseVariableDelay",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_IncreaseVariableDelay(arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_DecreaseVariableDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_DecreaseVariableDelay",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SUF_DecreaseVariableDelay",1,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SUF_DecreaseVariableDelay",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_DecreaseVariableDelay",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DecreaseVariableDelay",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DecreaseVariableDelay",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_DecreaseVariableDelay",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_DecreaseVariableDelay(arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Align(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  enum SLAlign_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_Align",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Align",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Align",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Align",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Align",4,"SLData_t *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SDA_Align",5,"enum SLAlign_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Align",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Align",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Align",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Align",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Align",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Align",4,SWIGTYPE_p_SLData_t);
  }
  
  arg5 = (enum SLAlign_t const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Align",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Align",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDA_Align((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_Fft2d(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLImageData_t *arg2 = (SLImageData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLImageData_t *arg4 = (SLImageData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t arg7 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SIM_Fft2d",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_Fft2d",1,"SLImageData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_Fft2d",2,"SLImageData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIM_Fft2d",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIM_Fft2d",4,"SLImageData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIM_Fft2d",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIM_Fft2d",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIM_Fft2d",7,"SLData_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIM_Fft2d",8,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SIM_Fft2d",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIM_Fft2d",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",2,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",4,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Fft2d",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SIM_Fft2d((SLImageData_t const *)arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,(SLArrayIndex_t const *)arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Fft2d(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_Fft2d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Fft2d",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_Fft2d",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Fft2d",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Fft2d",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Fft2d",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Fft2d",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_Fft2d(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_Conv3x3(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLImageData_t *arg2 = (SLImageData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SIM_Conv3x3",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_Conv3x3",1,"SLImageData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_Conv3x3",2,"SLImageData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIM_Conv3x3",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIM_Conv3x3",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIM_Conv3x3",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Conv3x3",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Conv3x3",2,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Conv3x3",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Conv3x3",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Conv3x3",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SIM_Conv3x3((SLImageData_t const *)arg1,arg2,(SLData_t const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_Sobel3x3(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLImageData_t *arg2 = (SLImageData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIM_Sobel3x3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_Sobel3x3",1,"SLImageData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_Sobel3x3",2,"SLImageData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIM_Sobel3x3",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIM_Sobel3x3",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Sobel3x3",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Sobel3x3",2,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Sobel3x3",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Sobel3x3",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIM_Sobel3x3((SLImageData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_SobelVertical3x3(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLImageData_t *arg2 = (SLImageData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIM_SobelVertical3x3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_SobelVertical3x3",1,"SLImageData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_SobelVertical3x3",2,"SLImageData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIM_SobelVertical3x3",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIM_SobelVertical3x3",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_SobelVertical3x3",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_SobelVertical3x3",2,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_SobelVertical3x3",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_SobelVertical3x3",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIM_SobelVertical3x3((SLImageData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_SobelHorizontal3x3(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLImageData_t *arg2 = (SLImageData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIM_SobelHorizontal3x3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_SobelHorizontal3x3",1,"SLImageData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_SobelHorizontal3x3",2,"SLImageData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIM_SobelHorizontal3x3",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIM_SobelHorizontal3x3",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_SobelHorizontal3x3",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_SobelHorizontal3x3",2,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_SobelHorizontal3x3",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_SobelHorizontal3x3",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIM_SobelHorizontal3x3((SLImageData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_Median3x3(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLImageData_t *arg2 = (SLImageData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIM_Median3x3",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_Median3x3",1,"SLImageData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_Median3x3",2,"SLImageData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIM_Median3x3",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIM_Median3x3",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Median3x3",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Median3x3",2,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Median3x3",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Median3x3",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIM_Median3x3((SLImageData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ConvCoefficients3x3(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  enum SL3x3Coeffs_t arg2 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_ConvCoefficients3x3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ConvCoefficients3x3",1,"SLData_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SIF_ConvCoefficients3x3",2,"enum SL3x3Coeffs_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ConvCoefficients3x3",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (enum SL3x3Coeffs_t)(int)lua_tonumber(L, 2);
  result = SIF_ConvCoefficients3x3(arg1,arg2);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_Max(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLImageData_t result;
  
  SWIG_check_num_args("SIM_Max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_Max",1,"SLImageData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIM_Max",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Max",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Max",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SIM_Max((SLImageData_t const *)arg1,arg2);
  {
    SLImageData_t * resultptr = new SLImageData_t((const SLImageData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLImageData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_Min(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLImageData_t result;
  
  SWIG_check_num_args("SIM_Min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_Min",1,"SLImageData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIM_Min",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SIM_Min",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_Min",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SIM_Min((SLImageData_t const *)arg1,arg2);
  {
    SLImageData_t * resultptr = new SLImageData_t((const SLImageData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLImageData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Dct8x8(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("SIF_Dct8x8",0,0)
  SIF_Dct8x8();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_Dct8x8(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIM_Dct8x8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_Dct8x8",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_Dct8x8",2,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Dct8x8",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Dct8x8",2,SWIGTYPE_p_SLData_t);
  }
  
  SIM_Dct8x8((SLData_t const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_Idct8x8(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIM_Idct8x8",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_Idct8x8",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_Idct8x8",2,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Idct8x8",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_Idct8x8",2,SWIGTYPE_p_SLData_t);
  }
  
  SIM_Idct8x8((SLData_t const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_ZigZagScan(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIM_ZigZagScan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_ZigZagScan",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_ZigZagScan",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIM_ZigZagScan",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_ZigZagScan",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_ZigZagScan",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_ZigZagScan",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIM_ZigZagScan((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIM_ZigZagDescan(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIM_ZigZagDescan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIM_ZigZagDescan",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIM_ZigZagDescan",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIM_ZigZagDescan",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_ZigZagDescan",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIM_ZigZagDescan",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIM_ZigZagDescan",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIM_ZigZagDescan((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignalGenerate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  enum SLSignal_t arg2 ;
  SLData_t arg3 ;
  enum SLSignalFillMode_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLData_t *argp3 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp11 ;
  SLError_t result;
  
  SWIG_check_num_args("SDA_SignalGenerate",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignalGenerate",1,"SLData_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SDA_SignalGenerate",2,"enum SLSignal_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SignalGenerate",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_SignalGenerate",4,"enum SLSignalFillMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SignalGenerate",5,"SLData_t");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_SignalGenerate",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_SignalGenerate",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_SignalGenerate",8,"SLData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_SignalGenerate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_SignalGenerate",10,"SLData_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_SignalGenerate",11,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (enum SLSignal_t const)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLSignalFillMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignalGenerate",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  result = SDA_SignalGenerate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SignalGenerate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  enum SLSignal_t arg2 ;
  SLData_t arg3 ;
  enum SLSignalFillMode_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *argp3 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLError_t result;
  
  SWIG_check_num_args("SDS_SignalGenerate",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_SignalGenerate",1,"SLData_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SDS_SignalGenerate",2,"enum SLSignal_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_SignalGenerate",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDS_SignalGenerate",4,"enum SLSignalFillMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_SignalGenerate",5,"SLData_t");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_SignalGenerate",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_SignalGenerate",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDS_SignalGenerate",8,"SLData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_SignalGenerate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_SignalGenerate",10,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGenerate",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (enum SLSignal_t const)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGenerate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLSignalFillMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGenerate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGenerate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGenerate",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGenerate",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGenerate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGenerate",10,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_SignalGenerate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Resonator(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *argp2 ;
  
  SWIG_check_num_args("SIF_Resonator",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Resonator",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_Resonator",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_Resonator",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_Resonator",4,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Resonator",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Resonator",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Resonator",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Resonator",4,SWIGTYPE_p_SLData_t);
  }
  
  SIF_Resonator(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Resonator(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Resonator",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Resonator",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Resonator",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Resonator",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Resonator",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Resonator",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Resonator",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Resonator",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Resonator((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Resonator1(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLFixData_t *arg5 = (SLFixData_t *) 0 ;
  SLData_t *argp2 ;
  
  SWIG_check_num_args("SIF_Resonator1",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Resonator1",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_Resonator1",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_Resonator1",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_Resonator1",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_Resonator1",5,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Resonator1",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Resonator1",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Resonator1",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Resonator1",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_Resonator1",5,SWIGTYPE_p_SLFixData_t);
  }
  
  SIF_Resonator1(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Resonator1(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp2 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_Resonator1",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Resonator1",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Resonator1",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Resonator1",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Resonator1",4,"SLFixData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Resonator1",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Resonator1",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Resonator1",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1",4,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Resonator1",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_Resonator1(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Resonator1Add(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp2 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_Resonator1Add",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Resonator1Add",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Resonator1Add",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Resonator1Add",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Resonator1Add",4,"SLFixData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Resonator1Add",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Resonator1Add",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Resonator1Add",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1Add",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1Add",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1Add",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1Add",4,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1Add",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Resonator1Add",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Resonator1Add",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_Resonator1Add(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignalGeneratePolarWhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t arg2 ;
  enum SLSignalFillMode_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SignalGeneratePolarWhiteNoise",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignalGeneratePolarWhiteNoise",1,"SLComplexRect_s *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_SignalGeneratePolarWhiteNoise",2,"SLData_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDA_SignalGeneratePolarWhiteNoise",3,"enum SLSignalFillMode_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SignalGeneratePolarWhiteNoise",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_SignalGeneratePolarWhiteNoise",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGeneratePolarWhiteNoise",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (enum SLSignalFillMode_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignalGeneratePolarWhiteNoise",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SignalGeneratePolarWhiteNoise(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SignalGeneratePolarWhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SDS_SignalGeneratePolarWhiteNoise",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_SignalGeneratePolarWhiteNoise",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGeneratePolarWhiteNoise",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_SignalGeneratePolarWhiteNoise(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignalGeneratePolarGaussianNoise(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  enum SLSignalFillMode_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_SignalGeneratePolarGaussianNoise",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignalGeneratePolarGaussianNoise",1,"SLComplexRect_s *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_SignalGeneratePolarGaussianNoise",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SignalGeneratePolarGaussianNoise",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_SignalGeneratePolarGaussianNoise",4,"SLData_t *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SDA_SignalGeneratePolarGaussianNoise",5,"enum SLSignalFillMode_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_SignalGeneratePolarGaussianNoise",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_SignalGeneratePolarGaussianNoise",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGeneratePolarGaussianNoise",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGeneratePolarGaussianNoise",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalGeneratePolarGaussianNoise",4,SWIGTYPE_p_SLData_t);
  }
  
  arg5 = (enum SLSignalFillMode_t const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignalGeneratePolarGaussianNoise",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_SignalGeneratePolarGaussianNoise(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SignalGeneratePolarGaussianNoise(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SDS_SignalGeneratePolarGaussianNoise",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_SignalGeneratePolarGaussianNoise",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_SignalGeneratePolarGaussianNoise",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_SignalGeneratePolarGaussianNoise",3,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGeneratePolarGaussianNoise",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGeneratePolarGaussianNoise",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalGeneratePolarGaussianNoise",3,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_SignalGeneratePolarGaussianNoise(arg1,arg2,arg3);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignalAddPolarJitterAndGaussianNoise(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_SignalAddPolarJitterAndGaussianNoise",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",8,"SLData_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_SignalAddPolarJitterAndGaussianNoise",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignalAddPolarJitterAndGaussianNoise",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_SignalAddPolarJitterAndGaussianNoise((SLComplexRect_s const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SignalAddPolarJitterAndGaussianNoise(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLComplexRect_s *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp5 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SDS_SignalAddPolarJitterAndGaussianNoise",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_SignalAddPolarJitterAndGaussianNoise",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_SignalAddPolarJitterAndGaussianNoise",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_SignalAddPolarJitterAndGaussianNoise",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_SignalAddPolarJitterAndGaussianNoise",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_SignalAddPolarJitterAndGaussianNoise",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_SignalAddPolarJitterAndGaussianNoise",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_SignalAddPolarJitterAndGaussianNoise",7,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_SignalAddPolarJitterAndGaussianNoise",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalAddPolarJitterAndGaussianNoise",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalAddPolarJitterAndGaussianNoise",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalAddPolarJitterAndGaussianNoise",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalAddPolarJitterAndGaussianNoise",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalAddPolarJitterAndGaussianNoise",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SignalAddPolarJitterAndGaussianNoise",7,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_SignalAddPolarJitterAndGaussianNoise(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Ramp(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Ramp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Ramp",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Ramp",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Ramp",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Ramp",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Ramp",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Ramp",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Ramp",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Ramp",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Ramp(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_RandomNumber(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("SIF_RandomNumber",0,0)
  SIF_RandomNumber();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_RandomNumber(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_RandomNumber",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_RandomNumber",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_RandomNumber",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_RandomNumber",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_RandomNumber",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_RandomNumber(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RandomNumber(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_RandomNumber",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RandomNumber",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_RandomNumber",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_RandomNumber",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_RandomNumber",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RandomNumber",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RandomNumber",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RandomNumber",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RandomNumber",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_RandomNumber(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_BitErrorRate(lua_State* L) {
  int SWIG_arg = 0;
  SLChar_t *arg1 = (SLChar_t *) 0 ;
  SLChar_t *arg2 = (SLChar_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_BitErrorRate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_BitErrorRate",1,"SLChar_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_BitErrorRate",2,"SLChar_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_BitErrorRate",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_BitErrorRate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDA_BitErrorRate",1,SWIGTYPE_p_SLChar_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDA_BitErrorRate",2,SWIGTYPE_p_SLChar_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BitErrorRate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BitErrorRate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_BitErrorRate((SLChar_t const *)arg1,(SLChar_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Interleave(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Interleave",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Interleave",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Interleave",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Interleave",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Interleave",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Interleave",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Interleave",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Interleave",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Interleave",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Interleave((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Deinterleave(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Deinterleave",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Deinterleave",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Deinterleave",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Deinterleave",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Deinterleave",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Deinterleave",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Deinterleave",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Deinterleave",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Deinterleave",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Deinterleave((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_EuclideanDistance(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SCV_EuclideanDistance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_EuclideanDistance",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_EuclideanDistance",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_EuclideanDistance",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_EuclideanDistance",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SCV_EuclideanDistance(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_EuclideanDistanceSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SCV_EuclideanDistanceSquared",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_EuclideanDistanceSquared",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_EuclideanDistanceSquared",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_EuclideanDistanceSquared",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_EuclideanDistanceSquared",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SCV_EuclideanDistanceSquared(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCA_EuclideanDistance(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SCA_EuclideanDistance",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCA_EuclideanDistance",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCA_EuclideanDistance",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SCA_EuclideanDistance",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SCA_EuclideanDistance",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCA_EuclideanDistance",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCA_EuclideanDistance",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCA_EuclideanDistance",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SCA_EuclideanDistance",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SCA_EuclideanDistance((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCA_EuclideanDistanceSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SCA_EuclideanDistanceSquared",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SCA_EuclideanDistanceSquared",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SCA_EuclideanDistanceSquared",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SCA_EuclideanDistanceSquared",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SCA_EuclideanDistanceSquared",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCA_EuclideanDistanceSquared",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCA_EuclideanDistanceSquared",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCA_EuclideanDistanceSquared",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SCA_EuclideanDistanceSquared",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SCA_EuclideanDistanceSquared((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_EuclideanDistance(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_EuclideanDistance",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_EuclideanDistance",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_EuclideanDistance",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_EuclideanDistance",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_EuclideanDistance",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EuclideanDistance",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EuclideanDistance",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EuclideanDistance",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EuclideanDistance",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  result = SDS_EuclideanDistance(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_EuclideanDistanceSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_EuclideanDistanceSquared",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_EuclideanDistanceSquared",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_EuclideanDistanceSquared",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_EuclideanDistanceSquared",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_EuclideanDistanceSquared",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EuclideanDistanceSquared",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EuclideanDistanceSquared",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EuclideanDistanceSquared",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EuclideanDistanceSquared",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  result = SDS_EuclideanDistanceSquared(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_EuclideanDistance(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_EuclideanDistance",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_EuclideanDistance",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_EuclideanDistance",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_EuclideanDistance",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_EuclideanDistance",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_EuclideanDistance",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_EuclideanDistance",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistance",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistance",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistance",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistance",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistance",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistance",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_EuclideanDistance((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_EuclideanDistanceSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_EuclideanDistanceSquared",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_EuclideanDistanceSquared",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_EuclideanDistanceSquared",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_EuclideanDistanceSquared",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_EuclideanDistanceSquared",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_EuclideanDistanceSquared",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_EuclideanDistanceSquared",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistanceSquared",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistanceSquared",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistanceSquared",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistanceSquared",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistanceSquared",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EuclideanDistanceSquared",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_EuclideanDistanceSquared((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ManchesterEncode(lua_State* L) {
  int SWIG_arg = 0;
  SLChar_t arg1 ;
  SLChar_t *argp1 ;
  SLChar_t result;
  
  SWIG_check_num_args("SDS_ManchesterEncode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ManchesterEncode",1,"SLChar_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_ManchesterEncode",1,SWIGTYPE_p_SLChar_t);
  }
  arg1 = *argp1;
  
  result = SDS_ManchesterEncode(arg1);
  {
    SLChar_t * resultptr = new SLChar_t((const SLChar_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLChar_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ManchesterDecode(lua_State* L) {
  int SWIG_arg = 0;
  SLChar_t arg1 ;
  SLChar_t *argp1 ;
  SLChar_t result;
  
  SWIG_check_num_args("SDS_ManchesterDecode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ManchesterDecode",1,"SLChar_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_ManchesterDecode",1,SWIGTYPE_p_SLChar_t);
  }
  arg1 = *argp1;
  
  result = SDS_ManchesterDecode(arg1);
  {
    SLChar_t * resultptr = new SLChar_t((const SLChar_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLChar_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ManchesterEncodeByte(lua_State* L) {
  int SWIG_arg = 0;
  SLChar_t arg1 ;
  SLChar_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ManchesterEncodeByte",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ManchesterEncodeByte",1,"SLChar_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_ManchesterEncodeByte",1,SWIGTYPE_p_SLChar_t);
  }
  arg1 = *argp1;
  
  result = SDS_ManchesterEncodeByte(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ManchesterDecodeByte(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ManchesterDecodeByte",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ManchesterDecodeByte",1,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ManchesterDecodeByte",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  result = SDS_ManchesterDecodeByte(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DetectNumericalWordSequence(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t *arg1 = (SLFixData_t *) 0 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_DetectNumericalWordSequence",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DetectNumericalWordSequence",1,"SLFixData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_DetectNumericalWordSequence",2,"SLFixData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_DetectNumericalWordSequence",3,"SLArrayIndex_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_DetectNumericalWordSequence",4,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_DetectNumericalWordSequence",1,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_DetectNumericalWordSequence",2,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DetectNumericalWordSequence",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DetectNumericalWordSequence",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_DetectNumericalWordSequence(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_DetectNumericalWordSequence(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLFixData_t arg3 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_DetectNumericalWordSequence",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_DetectNumericalWordSequence",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_DetectNumericalWordSequence",2,"SLFixData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_DetectNumericalWordSequence",3,"SLFixData_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_DetectNumericalWordSequence",4,"SLFixData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_DetectNumericalWordSequence",5,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalWordSequence",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalWordSequence",2,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalWordSequence",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalWordSequence",4,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalWordSequence",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_DetectNumericalWordSequence(arg1,(SLFixData_t const *)arg2,arg3,arg4,arg5);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DetectNumericalBitSequence(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t *arg1 = (SLFixData_t *) 0 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_DetectNumericalBitSequence",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DetectNumericalBitSequence",1,"SLFixData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_DetectNumericalBitSequence",2,"SLFixData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_DetectNumericalBitSequence",3,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_DetectNumericalBitSequence",1,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_DetectNumericalBitSequence",2,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DetectNumericalBitSequence",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_DetectNumericalBitSequence(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_DetectNumericalBitSequence(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t arg2 ;
  SLFixData_t arg3 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp2 ;
  SLFixData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDS_DetectNumericalBitSequence",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_DetectNumericalBitSequence",1,"SLFixData_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_DetectNumericalBitSequence",2,"SLFixData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_DetectNumericalBitSequence",3,"SLFixData_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_DetectNumericalBitSequence",4,"SLFixData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_DetectNumericalBitSequence",5,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalBitSequence",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalBitSequence",2,SWIGTYPE_p_SLFixData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalBitSequence",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalBitSequence",4,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_DetectNumericalBitSequence",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_DetectNumericalBitSequence(arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DetectCharacterSequence(lua_State* L) {
  int SWIG_arg = 0;
  SLChar_t *arg1 = (SLChar_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_DetectCharacterSequence",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DetectCharacterSequence",1,"SLChar_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_DetectCharacterSequence",2,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SIF_DetectCharacterSequence",1,SWIGTYPE_p_SLChar_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DetectCharacterSequence",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_DetectCharacterSequence(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_DetectCharacterSequence(lua_State* L) {
  int SWIG_arg = 0;
  SLChar_t arg1 ;
  SLChar_t *arg2 = (SLChar_t *) 0 ;
  SLChar_t *arg3 = (SLChar_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLChar_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_DetectCharacterSequence",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_DetectCharacterSequence",1,"SLChar_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_DetectCharacterSequence",2,"SLChar_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_DetectCharacterSequence",3,"SLChar_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_DetectCharacterSequence",4,"SLArrayIndex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_DetectCharacterSequence",1,SWIGTYPE_p_SLChar_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_DetectCharacterSequence",2,SWIGTYPE_p_SLChar_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_DetectCharacterSequence",3,SWIGTYPE_p_SLChar_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_DetectCharacterSequence",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDS_DetectCharacterSequence(arg1,(SLChar_t const *)arg2,arg3,arg4);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ErrorVector(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ErrorVector",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ErrorVector",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ErrorVector",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ErrorVector",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ErrorVector",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SDS_ErrorVector(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ErrorVectorMagnitudePercent(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ErrorVectorMagnitudePercent",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ErrorVectorMagnitudePercent",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ErrorVectorMagnitudePercent",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ErrorVectorMagnitudePercent",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ErrorVectorMagnitudePercent",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SDS_ErrorVectorMagnitudePercent(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ErrorVectorMagnitudeDecibels(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ErrorVectorMagnitudeDecibels",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ErrorVectorMagnitudeDecibels",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ErrorVectorMagnitudeDecibels",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ErrorVectorMagnitudeDecibels",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ErrorVectorMagnitudeDecibels",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SDS_ErrorVectorMagnitudeDecibels(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ReverseDiBits(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ReverseDiBits",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ReverseDiBits",1,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ReverseDiBits",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  result = SDS_ReverseDiBits(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_QpskBitErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t arg2 ;
  SLFixData_t *arg3 = (SLFixData_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp2 ;
  
  SWIG_check_num_args("SDS_QpskBitErrorCount",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_QpskBitErrorCount",1,"SLFixData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_QpskBitErrorCount",2,"SLFixData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_QpskBitErrorCount",3,"SLFixData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_QpskBitErrorCount",4,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_QpskBitErrorCount",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_QpskBitErrorCount",2,SWIGTYPE_p_SLFixData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_QpskBitErrorCount",3,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_QpskBitErrorCount",4,SWIGTYPE_p_SLFixData_t);
  }
  
  SDS_QpskBitErrorCount(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_BitErrorRate(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t arg2 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_BitErrorRate",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_BitErrorRate",1,"SLFixData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_BitErrorRate",2,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_BitErrorRate",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_BitErrorRate",2,SWIGTYPE_p_SLFixData_t);
  }
  arg2 = *argp2;
  
  result = SDS_BitErrorRate(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_PhaseLockedLoop(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp12 ;
  
  SWIG_check_num_args("SIF_PhaseLockedLoop",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_PhaseLockedLoop",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_PhaseLockedLoop",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_PhaseLockedLoop",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_PhaseLockedLoop",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_PhaseLockedLoop",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_PhaseLockedLoop",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_PhaseLockedLoop",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_PhaseLockedLoop",8,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_PhaseLockedLoop",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_PhaseLockedLoop",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_PhaseLockedLoop",11,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_PhaseLockedLoop",12,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_PhaseLockedLoop",13,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PhaseLockedLoop",13,SWIGTYPE_p_SLData_t);
  }
  
  SIF_PhaseLockedLoop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_PhaseLockedLoop(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg13 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp14 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_PhaseLockedLoop",15,15)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_PhaseLockedLoop",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_PhaseLockedLoop",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_PhaseLockedLoop",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_PhaseLockedLoop",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_PhaseLockedLoop",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_PhaseLockedLoop",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_PhaseLockedLoop",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_PhaseLockedLoop",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_PhaseLockedLoop",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDS_PhaseLockedLoop",10,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDS_PhaseLockedLoop",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDS_PhaseLockedLoop",12,"SLData_t const *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDS_PhaseLockedLoop",13,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDS_PhaseLockedLoop",14,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDS_PhaseLockedLoop",15,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PhaseLockedLoop",15,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_PhaseLockedLoop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(SLData_t const *)arg8,arg9,arg10,arg11,(SLData_t const *)arg12,arg13,arg14,arg15);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PhaseLockedLoop(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg14 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg15 ;
  SLData_t *arg16 = (SLData_t *) 0 ;
  SLArrayIndex_t arg17 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp6 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp15 ;
  SLArrayIndex_t *argp17 ;
  
  SWIG_check_num_args("SDA_PhaseLockedLoop",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PhaseLockedLoop",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PhaseLockedLoop",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_PhaseLockedLoop",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_PhaseLockedLoop",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_PhaseLockedLoop",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_PhaseLockedLoop",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_PhaseLockedLoop",7,"SLData_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_PhaseLockedLoop",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_PhaseLockedLoop",9,"SLData_t const *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_PhaseLockedLoop",10,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_PhaseLockedLoop",11,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_PhaseLockedLoop",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_PhaseLockedLoop",13,"SLData_t const *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_PhaseLockedLoop",14,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_PhaseLockedLoop",15,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_PhaseLockedLoop",16,"SLData_t *");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_PhaseLockedLoop",17,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",16,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseLockedLoop",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg17 = *argp17;
  
  SDA_PhaseLockedLoop((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(SLData_t const *)arg9,arg10,arg11,arg12,(SLData_t const *)arg13,arg14,arg15,arg16,arg17);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_CostasLoop(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp10 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_CostasLoop",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_CostasLoop",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_CostasLoop",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_CostasLoop",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_CostasLoop",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_CostasLoop",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_CostasLoop",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_CostasLoop",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_CostasLoop",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_CostasLoop",9,"SLData_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_CostasLoop",10,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_CostasLoop",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_CostasLoop",12,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasLoop",12,SWIGTYPE_p_SLData_t);
  }
  
  result = SIF_CostasLoop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_CostasLoop(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLData_t arg14 ;
  enum SLCostasLoopFeedbackMode_t arg15 ;
  SLData_t *arg16 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp14 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_CostasLoop",16,16)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_CostasLoop",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_CostasLoop",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_CostasLoop",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_CostasLoop",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_CostasLoop",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_CostasLoop",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_CostasLoop",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_CostasLoop",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_CostasLoop",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_CostasLoop",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDS_CostasLoop",11,"SLData_t const *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDS_CostasLoop",12,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDS_CostasLoop",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDS_CostasLoop",14,"SLData_t const");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("SDS_CostasLoop",15,"enum SLCostasLoopFeedbackMode_t const");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDS_CostasLoop",16,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",14,SWIGTYPE_p_SLData_t);
  }
  arg14 = *argp14;
  
  arg15 = (enum SLCostasLoopFeedbackMode_t const)(int)lua_tonumber(L, 15);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasLoop",16,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_CostasLoop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(SLData_t const *)arg11,arg12,arg13,arg14,arg15,arg16);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CostasLoop(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t arg13 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLData_t arg15 ;
  enum SLCostasLoopFeedbackMode_t arg16 ;
  SLData_t *arg17 = (SLData_t *) 0 ;
  SLArrayIndex_t arg18 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp6 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp13 ;
  SLData_t *argp15 ;
  SLArrayIndex_t *argp18 ;
  
  SWIG_check_num_args("SDA_CostasLoop",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CostasLoop",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CostasLoop",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CostasLoop",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CostasLoop",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_CostasLoop",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CostasLoop",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_CostasLoop",7,"SLData_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_CostasLoop",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_CostasLoop",9,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_CostasLoop",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_CostasLoop",11,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_CostasLoop",12,"SLData_t const *");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_CostasLoop",13,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_CostasLoop",14,"SLData_t *");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_CostasLoop",15,"SLData_t const");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("SDA_CostasLoop",16,"enum SLCostasLoopFeedbackMode_t const");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_CostasLoop",17,"SLData_t *");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_CostasLoop",18,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",15,SWIGTYPE_p_SLData_t);
  }
  arg15 = *argp15;
  
  arg16 = (enum SLCostasLoopFeedbackMode_t const)(int)lua_tonumber(L, 16);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",17,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasLoop",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  SDA_CostasLoop((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,(SLData_t const *)arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SRF_CostasLoop(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SRF_CostasLoop",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SRF_CostasLoop",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SRF_CostasLoop",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SRF_CostasLoop",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SRF_CostasLoop",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SRF_CostasLoop",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SRF_CostasLoop",6,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SRF_CostasLoop",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SRF_CostasLoop",8,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SRF_CostasLoop",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SRF_CostasLoop",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SRF_CostasLoop",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SRF_CostasLoop",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SRF_CostasLoop",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SRF_CostasLoop",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SRF_CostasLoop",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SRF_CostasLoop",8,SWIGTYPE_p_SLData_t);
  }
  
  SRF_CostasLoop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_180DegreePhaseDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SIF_180DegreePhaseDetect",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_180DegreePhaseDetect",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_180DegreePhaseDetect",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_180DegreePhaseDetect",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_180DegreePhaseDetect",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_180DegreePhaseDetect",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_180DegreePhaseDetect",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_180DegreePhaseDetect",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_180DegreePhaseDetect",8,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_180DegreePhaseDetect",9,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_180DegreePhaseDetect",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SIF_180DegreePhaseDetect(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_180DegreePhaseDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_180DegreePhaseDetect",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_180DegreePhaseDetect",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_180DegreePhaseDetect",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_180DegreePhaseDetect",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_180DegreePhaseDetect",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_180DegreePhaseDetect",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_180DegreePhaseDetect",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_180DegreePhaseDetect",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_180DegreePhaseDetect",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_180DegreePhaseDetect",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_180DegreePhaseDetect",10,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_180DegreePhaseDetect",11,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_180DegreePhaseDetect",12,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_180DegreePhaseDetect",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  result = SDA_180DegreePhaseDetect((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6,arg7,(SLData_t const *)arg8,arg9,arg10,arg11,arg12);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_TriggerReverberator(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLFixData_t *arg3 = (SLFixData_t *) 0 ;
  
  SWIG_check_num_args("SIF_TriggerReverberator",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_TriggerReverberator",1,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_TriggerReverberator",2,"SLFixData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_TriggerReverberator",3,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_TriggerReverberator",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_TriggerReverberator",2,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_TriggerReverberator",3,SWIGTYPE_p_SLFixData_t);
  }
  
  SIF_TriggerReverberator(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TriggerReverberator(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLFixData_t *arg5 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_TriggerReverberator",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TriggerReverberator",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TriggerReverberator",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TriggerReverberator",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TriggerReverberator",4,"SLFixData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TriggerReverberator",5,"SLFixData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_TriggerReverberator",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_TriggerReverberator",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TriggerReverberator",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TriggerReverberator",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TriggerReverberator",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_TriggerReverberator",4,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_TriggerReverberator",5,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TriggerReverberator",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TriggerReverberator",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_TriggerReverberator((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_TriggerReverberator(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg3 = (SLFixData_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_TriggerReverberator",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_TriggerReverberator",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_TriggerReverberator",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_TriggerReverberator",3,"SLFixData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_TriggerReverberator",4,"SLFixData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_TriggerReverberator",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TriggerReverberator",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TriggerReverberator",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_TriggerReverberator",3,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_TriggerReverberator",4,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TriggerReverberator",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_TriggerReverberator(arg1,arg2,arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TriggerSelector(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_TriggerSelector",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TriggerSelector",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TriggerSelector",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TriggerSelector",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_TriggerSelector",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TriggerSelector",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TriggerSelector",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TriggerSelector",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TriggerSelector",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_TriggerSelector((SLData_t const *)arg1,arg2,(SLData_t const *)arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_EarlyLateGate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLData_t arg12 ;
  SLFixData_t *arg13 = (SLFixData_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg15 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg16 = (SLFixData_t *) 0 ;
  SLFixData_t *arg17 = (SLFixData_t *) 0 ;
  enum SLELGTriggerTiming_t arg18 ;
  SLArrayIndex_t *arg19 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg20 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp11 ;
  SLData_t *argp12 ;
  SLArrayIndex_t *argp20 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_EarlyLateGate",20,20)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_EarlyLateGate",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_EarlyLateGate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_EarlyLateGate",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_EarlyLateGate",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_EarlyLateGate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_EarlyLateGate",6,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_EarlyLateGate",7,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_EarlyLateGate",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_EarlyLateGate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_EarlyLateGate",10,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SIF_EarlyLateGate",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_EarlyLateGate",12,"SLData_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_EarlyLateGate",13,"SLFixData_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SIF_EarlyLateGate",14,"SLData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SIF_EarlyLateGate",15,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SIF_EarlyLateGate",16,"SLFixData_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SIF_EarlyLateGate",17,"SLFixData_t *");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("SIF_EarlyLateGate",18,"enum SLELGTriggerTiming_t const");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SIF_EarlyLateGate",19,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,20)) SWIG_fail_arg("SIF_EarlyLateGate",20,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",13,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",16,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",17,SWIGTYPE_p_SLFixData_t);
  }
  
  arg18 = (enum SLELGTriggerTiming_t const)(int)lua_tonumber(L, 18);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&argp20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGate",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg20 = *argp20;
  
  result = SIF_EarlyLateGate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_EarlyLateGate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t arg13 ;
  SLFixData_t *arg14 = (SLFixData_t *) 0 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg17 = (SLFixData_t *) 0 ;
  SLFixData_t *arg18 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg19 ;
  SLArrayIndex_t arg20 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp19 ;
  SLArrayIndex_t *argp20 ;
  
  SWIG_check_num_args("SDA_EarlyLateGate",20,20)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_EarlyLateGate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_EarlyLateGate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_EarlyLateGate",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_EarlyLateGate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_EarlyLateGate",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_EarlyLateGate",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_EarlyLateGate",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_EarlyLateGate",8,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_EarlyLateGate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_EarlyLateGate",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_EarlyLateGate",11,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_EarlyLateGate",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_EarlyLateGate",13,"SLData_t const");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_EarlyLateGate",14,"SLFixData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_EarlyLateGate",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_EarlyLateGate",16,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_EarlyLateGate",17,"SLFixData_t *");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDA_EarlyLateGate",18,"SLFixData_t *");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SDA_EarlyLateGate",19,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,20)) SWIG_fail_arg("SDA_EarlyLateGate",20,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",14,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",17,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",18,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg19 = *argp19;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&argp20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGate",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg20 = *argp20;
  
  SDA_EarlyLateGate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_EarlyLateGateDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t arg13 ;
  SLFixData_t *arg14 = (SLFixData_t *) 0 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg17 = (SLFixData_t *) 0 ;
  SLFixData_t *arg18 = (SLFixData_t *) 0 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLData_t *arg20 = (SLData_t *) 0 ;
  SLArrayIndex_t arg21 ;
  SLArrayIndex_t arg22 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp21 ;
  SLArrayIndex_t *argp22 ;
  
  SWIG_check_num_args("SDA_EarlyLateGateDebug",22,22)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_EarlyLateGateDebug",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_EarlyLateGateDebug",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_EarlyLateGateDebug",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_EarlyLateGateDebug",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_EarlyLateGateDebug",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_EarlyLateGateDebug",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_EarlyLateGateDebug",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_EarlyLateGateDebug",8,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_EarlyLateGateDebug",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_EarlyLateGateDebug",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_EarlyLateGateDebug",11,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_EarlyLateGateDebug",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_EarlyLateGateDebug",13,"SLData_t const");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_EarlyLateGateDebug",14,"SLFixData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_EarlyLateGateDebug",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_EarlyLateGateDebug",16,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_EarlyLateGateDebug",17,"SLFixData_t *");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDA_EarlyLateGateDebug",18,"SLFixData_t *");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDA_EarlyLateGateDebug",19,"SLData_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SDA_EarlyLateGateDebug",20,"SLData_t *");
  if(!lua_isuserdata(L,21)) SWIG_fail_arg("SDA_EarlyLateGateDebug",21,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,22)) SWIG_fail_arg("SDA_EarlyLateGateDebug",22,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",14,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",17,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",18,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",19,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",20,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&argp21,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",21,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg21 = *argp21;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&argp22,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateDebug",22,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg22 = *argp22;
  
  SDA_EarlyLateGateDebug((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_EarlyLateGate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLData_t arg12 ;
  SLFixData_t *arg13 = (SLFixData_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg15 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg16 = (SLFixData_t *) 0 ;
  SLFixData_t *arg17 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg18 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp11 ;
  SLData_t *argp12 ;
  SLArrayIndex_t *argp18 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_EarlyLateGate",18,18)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_EarlyLateGate",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_EarlyLateGate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_EarlyLateGate",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_EarlyLateGate",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_EarlyLateGate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_EarlyLateGate",6,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_EarlyLateGate",7,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_EarlyLateGate",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_EarlyLateGate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_EarlyLateGate",10,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDS_EarlyLateGate",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDS_EarlyLateGate",12,"SLData_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDS_EarlyLateGate",13,"SLFixData_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDS_EarlyLateGate",14,"SLData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDS_EarlyLateGate",15,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDS_EarlyLateGate",16,"SLFixData_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDS_EarlyLateGate",17,"SLFixData_t *");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDS_EarlyLateGate",18,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",13,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",16,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",17,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGate",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  result = SDS_EarlyLateGate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_EarlyLateGateSquarePulse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t arg11 ;
  SLFixData_t *arg12 = (SLFixData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg14 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg15 = (SLFixData_t *) 0 ;
  SLFixData_t *arg16 = (SLFixData_t *) 0 ;
  enum SLELGTriggerTiming_t arg17 ;
  SLArrayIndex_t *arg18 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg19 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp10 ;
  SLData_t *argp11 ;
  SLArrayIndex_t *argp19 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_EarlyLateGateSquarePulse",19,19)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",6,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",11,"SLData_t const");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",12,"SLFixData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",13,"SLData_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",14,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",15,"SLFixData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",16,"SLFixData_t *");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",17,"enum SLELGTriggerTiming_t const");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",18,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SIF_EarlyLateGateSquarePulse",19,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",11,SWIGTYPE_p_SLData_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",12,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",15,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",16,SWIGTYPE_p_SLFixData_t);
  }
  
  arg17 = (enum SLELGTriggerTiming_t const)(int)lua_tonumber(L, 17);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EarlyLateGateSquarePulse",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg19 = *argp19;
  
  result = SIF_EarlyLateGateSquarePulse(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_EarlyLateGateSquarePulse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t arg13 ;
  SLFixData_t *arg14 = (SLFixData_t *) 0 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg17 = (SLFixData_t *) 0 ;
  SLFixData_t *arg18 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg19 ;
  SLArrayIndex_t arg20 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp19 ;
  SLArrayIndex_t *argp20 ;
  
  SWIG_check_num_args("SDA_EarlyLateGateSquarePulse",20,20)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",8,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",11,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",13,"SLData_t const");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",14,"SLFixData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",16,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",17,"SLFixData_t *");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",18,"SLFixData_t *");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",19,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,20)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulse",20,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",14,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",17,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",18,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg19 = *argp19;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&argp20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulse",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg20 = *argp20;
  
  SDA_EarlyLateGateSquarePulse((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_EarlyLateGateSquarePulseDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t arg13 ;
  SLFixData_t *arg14 = (SLFixData_t *) 0 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg17 = (SLFixData_t *) 0 ;
  SLFixData_t *arg18 = (SLFixData_t *) 0 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLData_t *arg20 = (SLData_t *) 0 ;
  SLArrayIndex_t arg21 ;
  SLArrayIndex_t arg22 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp21 ;
  SLArrayIndex_t *argp22 ;
  
  SWIG_check_num_args("SDA_EarlyLateGateSquarePulseDebug",22,22)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",8,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",11,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",13,"SLData_t const");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",14,"SLFixData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",16,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",17,"SLFixData_t *");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",18,"SLFixData_t *");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",19,"SLData_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",20,"SLData_t *");
  if(!lua_isuserdata(L,21)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",21,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,22)) SWIG_fail_arg("SDA_EarlyLateGateSquarePulseDebug",22,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",14,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",17,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",18,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",19,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",20,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&argp21,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",21,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg21 = *argp21;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&argp22,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EarlyLateGateSquarePulseDebug",22,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg22 = *argp22;
  
  SDA_EarlyLateGateSquarePulseDebug((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_EarlyLateGateSquarePulse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLData_t arg12 ;
  SLFixData_t *arg13 = (SLFixData_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg15 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg16 = (SLFixData_t *) 0 ;
  SLFixData_t *arg17 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg18 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp11 ;
  SLData_t *argp12 ;
  SLArrayIndex_t *argp18 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_EarlyLateGateSquarePulse",18,18)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",6,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",7,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",10,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",12,"SLData_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",13,"SLFixData_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",14,"SLData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",15,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",16,"SLFixData_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",17,"SLFixData_t *");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDS_EarlyLateGateSquarePulse",18,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",13,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",16,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",17,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EarlyLateGateSquarePulse",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  result = SDS_EarlyLateGateSquarePulse(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ConvEncoderK3(lua_State* L) {
  int SWIG_arg = 0;
  SLChar_t arg1 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLChar_t *argp1 ;
  SLUInt16_t result;
  
  SWIG_check_num_args("SDS_ConvEncoderK3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ConvEncoderK3",1,"SLChar_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ConvEncoderK3",2,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_ConvEncoderK3",1,SWIGTYPE_p_SLChar_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ConvEncoderK3",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  result = SDS_ConvEncoderK3(arg1,arg2);
  {
    SLUInt16_t * resultptr = new SLUInt16_t((const SLUInt16_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLUInt16_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ViterbiDecoderK3(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t *arg1 = (SLFixData_t *) 0 ;
  SLChar_t *arg2 = (SLChar_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg6 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SIF_ViterbiDecoderK3",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ViterbiDecoderK3",1,"SLFixData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ViterbiDecoderK3",2,"SLChar_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_ViterbiDecoderK3",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ViterbiDecoderK3",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_ViterbiDecoderK3",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_ViterbiDecoderK3",6,"SLFixData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_ViterbiDecoderK3",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderK3",1,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderK3",2,SWIGTYPE_p_SLChar_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderK3",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderK3",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderK3",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderK3",6,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderK3",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SIF_ViterbiDecoderK3(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ViterbiDecoderK3(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLChar_t *arg3 = (SLChar_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg7 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp8 ;
  SLChar_t result;
  
  SWIG_check_num_args("SDS_ViterbiDecoderK3",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_ViterbiDecoderK3",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ViterbiDecoderK3",2,"SLFixData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_ViterbiDecoderK3",3,"SLChar_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_ViterbiDecoderK3",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_ViterbiDecoderK3",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_ViterbiDecoderK3",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_ViterbiDecoderK3",7,"SLFixData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDS_ViterbiDecoderK3",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderK3",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderK3",2,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderK3",3,SWIGTYPE_p_SLChar_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderK3",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderK3",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderK3",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderK3",7,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderK3",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  result = SDS_ViterbiDecoderK3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    SLChar_t * resultptr = new SLChar_t((const SLChar_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLChar_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ConvEncoderV32(lua_State* L) {
  int SWIG_arg = 0;
  SLChar_t arg1 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLChar_t *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SDS_ConvEncoderV32",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ConvEncoderV32",1,"SLChar_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ConvEncoderV32",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_ConvEncoderV32",3,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLChar_t,0))){
    SWIG_fail_ptr("SDS_ConvEncoderV32",1,SWIGTYPE_p_SLChar_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ConvEncoderV32",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ConvEncoderV32",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  result = SDS_ConvEncoderV32(arg1,arg2,arg3);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ViterbiDecoderV32(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SIF_ViterbiDecoderV32",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ViterbiDecoderV32",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ViterbiDecoderV32",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_ViterbiDecoderV32",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ViterbiDecoderV32",4,"SLFixData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_ViterbiDecoderV32",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderV32",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderV32",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderV32",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderV32",4,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ViterbiDecoderV32",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SIF_ViterbiDecoderV32(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ViterbiDecoderV32(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg7 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLComplexRect_s *argp1 ;
  SLArrayIndex_t *argp8 ;
  SLChar_t result;
  
  SWIG_check_num_args("SDS_ViterbiDecoderV32",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ViterbiDecoderV32",1,"SLComplexRect_s");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ViterbiDecoderV32",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_ViterbiDecoderV32",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_ViterbiDecoderV32",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_ViterbiDecoderV32",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_ViterbiDecoderV32",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_ViterbiDecoderV32",7,"SLFixData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDS_ViterbiDecoderV32",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderV32",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderV32",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderV32",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderV32",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderV32",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderV32",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderV32",7,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ViterbiDecoderV32",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  result = SDS_ViterbiDecoderV32(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    SLChar_t * resultptr = new SLChar_t((const SLChar_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLChar_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_AmplitudeModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_AmplitudeModulate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_AmplitudeModulate",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_AmplitudeModulate",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_AmplitudeModulate",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AmplitudeModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AmplitudeModulate",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AmplitudeModulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_AmplitudeModulate(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AmplitudeModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_AmplitudeModulate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AmplitudeModulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AmplitudeModulate",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_AmplitudeModulate",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_AmplitudeModulate",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_AmplitudeModulate",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_AmplitudeModulate",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_AmplitudeModulate((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_AmplitudeModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_AmplitudeModulate",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_AmplitudeModulate",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_AmplitudeModulate",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_AmplitudeModulate",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_AmplitudeModulate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDS_AmplitudeModulate(arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_AmplitudeModulate2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_AmplitudeModulate2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_AmplitudeModulate2",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_AmplitudeModulate2",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_AmplitudeModulate2",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AmplitudeModulate2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AmplitudeModulate2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AmplitudeModulate2",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_AmplitudeModulate2(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AmplitudeModulate2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_AmplitudeModulate2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AmplitudeModulate2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AmplitudeModulate2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_AmplitudeModulate2",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_AmplitudeModulate2",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_AmplitudeModulate2",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_AmplitudeModulate2",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_AmplitudeModulate2",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate2",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate2",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate2",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AmplitudeModulate2",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_AmplitudeModulate2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_AmplitudeModulate2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp1 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_AmplitudeModulate2",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_AmplitudeModulate2",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_AmplitudeModulate2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_AmplitudeModulate2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_AmplitudeModulate2",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_AmplitudeModulate2",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate2",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate2",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_AmplitudeModulate2",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDS_AmplitudeModulate2(arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ComplexShift(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_ComplexShift",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ComplexShift",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ComplexShift",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_ComplexShift",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ComplexShift",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_ComplexShift",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_ComplexShift",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_ComplexShift",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_ComplexShift",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SIF_ComplexShift",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ComplexShift",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  result = SIF_ComplexShift(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexShift(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg9 = (SLArrayIndex_t *) 0 ;
  SLData_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLData_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  
  SWIG_check_num_args("SDA_ComplexShift",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexShift",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexShift",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexShift",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexShift",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ComplexShift",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ComplexShift",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_ComplexShift",7,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_ComplexShift",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_ComplexShift",9,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_ComplexShift",10,"SLData_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_ComplexShift",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_ComplexShift",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_ComplexShift",13,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",10,SWIGTYPE_p_SLData_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexShift",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  SDA_ComplexShift((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,(SLData_t const *)arg8,arg9,arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FrequencyModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_FrequencyModulate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FrequencyModulate",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FrequencyModulate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FrequencyModulate",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FrequencyModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FrequencyModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FrequencyModulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_FrequencyModulate(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FrequencyModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp6 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_FrequencyModulate",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FrequencyModulate",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_FrequencyModulate",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_FrequencyModulate",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_FrequencyModulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_FrequencyModulate",5,"SLData_t const *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_FrequencyModulate",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulate",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDS_FrequencyModulate(arg1,arg2,arg3,arg4,(SLData_t const *)arg5,arg6);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FrequencyModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_FrequencyModulate",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FrequencyModulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FrequencyModulate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_FrequencyModulate",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FrequencyModulate",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FrequencyModulate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FrequencyModulate",6,"SLData_t const *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FrequencyModulate",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FrequencyModulate",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulate",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulate",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_FrequencyModulate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,(SLData_t const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FrequencyDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_FrequencyDemodulate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FrequencyDemodulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FrequencyDemodulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FrequencyDemodulate",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FrequencyDemodulate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FrequencyDemodulate",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FrequencyDemodulate",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyDemodulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyDemodulate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FrequencyDemodulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_FrequencyDemodulate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FrequencyModulateComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_FrequencyModulateComplex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FrequencyModulateComplex",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FrequencyModulateComplex",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FrequencyModulateComplex",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FrequencyModulateComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FrequencyModulateComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FrequencyModulateComplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_FrequencyModulateComplex(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FrequencyModulateComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp1 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDS_FrequencyModulateComplex",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_FrequencyModulateComplex",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FrequencyModulateComplex",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FrequencyModulateComplex",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_FrequencyModulateComplex",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_FrequencyModulateComplex",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_FrequencyModulateComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_FrequencyModulateComplex",7,"SLData_t const *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDS_FrequencyModulateComplex",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulateComplex",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulateComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulateComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulateComplex",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulateComplex",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulateComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulateComplex",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FrequencyModulateComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDS_FrequencyModulateComplex(arg1,arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FrequencyModulateComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_FrequencyModulateComplex",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FrequencyModulateComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FrequencyModulateComplex",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FrequencyModulateComplex",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FrequencyModulateComplex",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FrequencyModulateComplex",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FrequencyModulateComplex",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FrequencyModulateComplex",7,"SLData_t const *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FrequencyModulateComplex",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FrequencyModulateComplex",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FrequencyModulateComplex",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_FrequencyModulateComplex((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,(SLData_t const *)arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DeltaModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_DeltaModulate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DeltaModulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DeltaModulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_DeltaModulate",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_DeltaModulate",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DeltaModulate",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_DeltaModulate((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DeltaDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_DeltaDemodulate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DeltaDemodulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DeltaDemodulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_DeltaDemodulate",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_DeltaDemodulate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaDemodulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DeltaDemodulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_DeltaDemodulate((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DeltaModulate2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_DeltaModulate2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DeltaModulate2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DeltaModulate2",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_DeltaModulate2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_DeltaModulate2",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DeltaModulate2",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate2",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DeltaModulate2",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_DeltaModulate2((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_CostasQamDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg14 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLData_t *arg16 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg17 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg18 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLData_t *arg20 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg21 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg22 ;
  SLData_t arg23 ;
  SLFixData_t *arg24 = (SLFixData_t *) 0 ;
  SLData_t *arg25 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg26 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg27 = (SLFixData_t *) 0 ;
  SLFixData_t *arg28 = (SLFixData_t *) 0 ;
  SLArrayIndex_t *arg29 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg30 ;
  SLData_t *arg31 = (SLData_t *) 0 ;
  SLData_t *arg32 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg33 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp18 ;
  SLArrayIndex_t *argp22 ;
  SLData_t *argp23 ;
  SLArrayIndex_t *argp30 ;
  SLError_t result;
  
  SWIG_check_num_args("SIF_CostasQamDemodulate",33,33)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_CostasQamDemodulate",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_CostasQamDemodulate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_CostasQamDemodulate",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_CostasQamDemodulate",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_CostasQamDemodulate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_CostasQamDemodulate",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_CostasQamDemodulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_CostasQamDemodulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_CostasQamDemodulate",9,"SLData_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_CostasQamDemodulate",10,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_CostasQamDemodulate",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_CostasQamDemodulate",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_CostasQamDemodulate",13,"SLData_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SIF_CostasQamDemodulate",14,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SIF_CostasQamDemodulate",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SIF_CostasQamDemodulate",16,"SLData_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SIF_CostasQamDemodulate",17,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SIF_CostasQamDemodulate",18,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SIF_CostasQamDemodulate",19,"SLData_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SIF_CostasQamDemodulate",20,"SLData_t *");
  if(!SWIG_isptrtype(L,21)) SWIG_fail_arg("SIF_CostasQamDemodulate",21,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,22)) SWIG_fail_arg("SIF_CostasQamDemodulate",22,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,23)) SWIG_fail_arg("SIF_CostasQamDemodulate",23,"SLData_t const");
  if(!SWIG_isptrtype(L,24)) SWIG_fail_arg("SIF_CostasQamDemodulate",24,"SLFixData_t *");
  if(!SWIG_isptrtype(L,25)) SWIG_fail_arg("SIF_CostasQamDemodulate",25,"SLData_t *");
  if(!SWIG_isptrtype(L,26)) SWIG_fail_arg("SIF_CostasQamDemodulate",26,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,27)) SWIG_fail_arg("SIF_CostasQamDemodulate",27,"SLFixData_t *");
  if(!SWIG_isptrtype(L,28)) SWIG_fail_arg("SIF_CostasQamDemodulate",28,"SLFixData_t *");
  if(!SWIG_isptrtype(L,29)) SWIG_fail_arg("SIF_CostasQamDemodulate",29,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,30)) SWIG_fail_arg("SIF_CostasQamDemodulate",30,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,31)) SWIG_fail_arg("SIF_CostasQamDemodulate",31,"SLData_t *");
  if(!SWIG_isptrtype(L,32)) SWIG_fail_arg("SIF_CostasQamDemodulate",32,"SLData_t *");
  if(!SWIG_isptrtype(L,33)) SWIG_fail_arg("SIF_CostasQamDemodulate",33,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",16,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",19,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",20,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&arg21,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",21,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&argp22,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",22,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg22 = *argp22;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&argp23,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",23,SWIGTYPE_p_SLData_t);
  }
  arg23 = *argp23;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,24,(void**)&arg24,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",24,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,25,(void**)&arg25,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",25,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,26,(void**)&arg26,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",26,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,27,(void**)&arg27,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",27,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,28,(void**)&arg28,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",28,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,29,(void**)&arg29,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",29,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,30,(void**)&argp30,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",30,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg30 = *argp30;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,31,(void**)&arg31,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",31,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,32,(void**)&arg32,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",32,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,33,(void**)&arg33,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CostasQamDemodulate",33,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  result = SIF_CostasQamDemodulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_CostasQamDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLData_t arg16 ;
  enum SLCostasLoopFeedbackMode_t arg17 ;
  SLData_t *arg18 = (SLData_t *) 0 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg20 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg21 = (SLData_t *) 0 ;
  SLData_t *arg22 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg23 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg24 ;
  SLData_t *arg25 = (SLData_t *) 0 ;
  SLData_t *arg26 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg27 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg28 ;
  SLData_t arg29 ;
  SLFixData_t *arg30 = (SLFixData_t *) 0 ;
  SLData_t *arg31 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg32 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg33 = (SLFixData_t *) 0 ;
  SLFixData_t *arg34 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg35 ;
  SLData_t *arg36 = (SLData_t *) 0 ;
  SLData_t *arg37 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg38 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg39 ;
  SLData_t *argp1 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp14 ;
  SLData_t *argp16 ;
  SLArrayIndex_t *argp24 ;
  SLArrayIndex_t *argp28 ;
  SLData_t *argp29 ;
  SLArrayIndex_t *argp35 ;
  SLArrayIndex_t *argp39 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDS_CostasQamDemodulate",39,39)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_CostasQamDemodulate",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_CostasQamDemodulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_CostasQamDemodulate",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_CostasQamDemodulate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_CostasQamDemodulate",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_CostasQamDemodulate",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_CostasQamDemodulate",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDS_CostasQamDemodulate",8,"SLData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_CostasQamDemodulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_CostasQamDemodulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDS_CostasQamDemodulate",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDS_CostasQamDemodulate",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDS_CostasQamDemodulate",13,"SLData_t const *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDS_CostasQamDemodulate",14,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDS_CostasQamDemodulate",15,"SLData_t *");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDS_CostasQamDemodulate",16,"SLData_t const");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("SDS_CostasQamDemodulate",17,"enum SLCostasLoopFeedbackMode_t const");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDS_CostasQamDemodulate",18,"SLData_t *");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDS_CostasQamDemodulate",19,"SLData_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SDS_CostasQamDemodulate",20,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,21)) SWIG_fail_arg("SDS_CostasQamDemodulate",21,"SLData_t *");
  if(!SWIG_isptrtype(L,22)) SWIG_fail_arg("SDS_CostasQamDemodulate",22,"SLData_t *");
  if(!SWIG_isptrtype(L,23)) SWIG_fail_arg("SDS_CostasQamDemodulate",23,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,24)) SWIG_fail_arg("SDS_CostasQamDemodulate",24,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,25)) SWIG_fail_arg("SDS_CostasQamDemodulate",25,"SLData_t *");
  if(!SWIG_isptrtype(L,26)) SWIG_fail_arg("SDS_CostasQamDemodulate",26,"SLData_t *");
  if(!SWIG_isptrtype(L,27)) SWIG_fail_arg("SDS_CostasQamDemodulate",27,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,28)) SWIG_fail_arg("SDS_CostasQamDemodulate",28,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,29)) SWIG_fail_arg("SDS_CostasQamDemodulate",29,"SLData_t const");
  if(!SWIG_isptrtype(L,30)) SWIG_fail_arg("SDS_CostasQamDemodulate",30,"SLFixData_t *");
  if(!SWIG_isptrtype(L,31)) SWIG_fail_arg("SDS_CostasQamDemodulate",31,"SLData_t *");
  if(!SWIG_isptrtype(L,32)) SWIG_fail_arg("SDS_CostasQamDemodulate",32,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,33)) SWIG_fail_arg("SDS_CostasQamDemodulate",33,"SLFixData_t *");
  if(!SWIG_isptrtype(L,34)) SWIG_fail_arg("SDS_CostasQamDemodulate",34,"SLFixData_t *");
  if(!lua_isuserdata(L,35)) SWIG_fail_arg("SDS_CostasQamDemodulate",35,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,36)) SWIG_fail_arg("SDS_CostasQamDemodulate",36,"SLData_t *");
  if(!SWIG_isptrtype(L,37)) SWIG_fail_arg("SDS_CostasQamDemodulate",37,"SLData_t *");
  if(!SWIG_isptrtype(L,38)) SWIG_fail_arg("SDS_CostasQamDemodulate",38,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,39)) SWIG_fail_arg("SDS_CostasQamDemodulate",39,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",16,SWIGTYPE_p_SLData_t);
  }
  arg16 = *argp16;
  
  arg17 = (enum SLCostasLoopFeedbackMode_t const)(int)lua_tonumber(L, 17);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",18,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",19,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&arg21,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",21,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&arg22,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",22,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&arg23,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",23,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,24,(void**)&argp24,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",24,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg24 = *argp24;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,25,(void**)&arg25,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",25,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,26,(void**)&arg26,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",26,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,27,(void**)&arg27,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",27,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,28,(void**)&argp28,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",28,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg28 = *argp28;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,29,(void**)&argp29,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",29,SWIGTYPE_p_SLData_t);
  }
  arg29 = *argp29;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,30,(void**)&arg30,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",30,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,31,(void**)&arg31,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",31,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,32,(void**)&arg32,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",32,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,33,(void**)&arg33,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",33,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,34,(void**)&arg34,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",34,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,35,(void**)&argp35,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",35,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg35 = *argp35;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,36,(void**)&arg36,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",36,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,37,(void**)&arg37,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",37,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,38,(void**)&arg38,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",38,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,39,(void**)&argp39,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulate",39,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg39 = *argp39;
  
  result = SDS_CostasQamDemodulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(SLData_t const *)arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_CostasQamDemodulateDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLData_t arg16 ;
  enum SLCostasLoopFeedbackMode_t arg17 ;
  SLData_t *arg18 = (SLData_t *) 0 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg20 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg21 = (SLData_t *) 0 ;
  SLData_t *arg22 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg23 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg24 ;
  SLData_t *arg25 = (SLData_t *) 0 ;
  SLData_t *arg26 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg27 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg28 ;
  SLData_t arg29 ;
  SLFixData_t *arg30 = (SLFixData_t *) 0 ;
  SLData_t *arg31 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg32 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg33 = (SLFixData_t *) 0 ;
  SLFixData_t *arg34 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg35 ;
  SLData_t *arg36 = (SLData_t *) 0 ;
  SLData_t *arg37 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg38 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg39 ;
  SLData_t *arg40 = (SLData_t *) 0 ;
  SLData_t *arg41 = (SLData_t *) 0 ;
  SLData_t *arg42 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg43 = (SLArrayIndex_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp14 ;
  SLData_t *argp16 ;
  SLArrayIndex_t *argp24 ;
  SLArrayIndex_t *argp28 ;
  SLData_t *argp29 ;
  SLArrayIndex_t *argp35 ;
  SLArrayIndex_t *argp39 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDS_CostasQamDemodulateDebug",43,43)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",8,"SLData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",13,"SLData_t const *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",14,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",15,"SLData_t *");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",16,"SLData_t const");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",17,"enum SLCostasLoopFeedbackMode_t const");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",18,"SLData_t *");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",19,"SLData_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",20,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,21)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",21,"SLData_t *");
  if(!SWIG_isptrtype(L,22)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",22,"SLData_t *");
  if(!SWIG_isptrtype(L,23)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",23,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,24)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",24,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,25)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",25,"SLData_t *");
  if(!SWIG_isptrtype(L,26)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",26,"SLData_t *");
  if(!SWIG_isptrtype(L,27)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",27,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,28)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",28,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,29)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",29,"SLData_t const");
  if(!SWIG_isptrtype(L,30)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",30,"SLFixData_t *");
  if(!SWIG_isptrtype(L,31)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",31,"SLData_t *");
  if(!SWIG_isptrtype(L,32)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",32,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,33)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",33,"SLFixData_t *");
  if(!SWIG_isptrtype(L,34)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",34,"SLFixData_t *");
  if(!lua_isuserdata(L,35)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",35,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,36)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",36,"SLData_t *");
  if(!SWIG_isptrtype(L,37)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",37,"SLData_t *");
  if(!SWIG_isptrtype(L,38)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",38,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,39)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",39,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,40)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",40,"SLData_t *");
  if(!SWIG_isptrtype(L,41)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",41,"SLData_t *");
  if(!SWIG_isptrtype(L,42)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",42,"SLData_t *");
  if(!SWIG_isptrtype(L,43)) SWIG_fail_arg("SDS_CostasQamDemodulateDebug",43,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",16,SWIGTYPE_p_SLData_t);
  }
  arg16 = *argp16;
  
  arg17 = (enum SLCostasLoopFeedbackMode_t const)(int)lua_tonumber(L, 17);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",18,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",19,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&arg21,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",21,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&arg22,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",22,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&arg23,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",23,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,24,(void**)&argp24,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",24,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg24 = *argp24;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,25,(void**)&arg25,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",25,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,26,(void**)&arg26,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",26,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,27,(void**)&arg27,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",27,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,28,(void**)&argp28,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",28,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg28 = *argp28;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,29,(void**)&argp29,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",29,SWIGTYPE_p_SLData_t);
  }
  arg29 = *argp29;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,30,(void**)&arg30,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",30,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,31,(void**)&arg31,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",31,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,32,(void**)&arg32,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",32,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,33,(void**)&arg33,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",33,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,34,(void**)&arg34,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",34,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,35,(void**)&argp35,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",35,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg35 = *argp35;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,36,(void**)&arg36,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",36,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,37,(void**)&arg37,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",37,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,38,(void**)&arg38,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",38,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,39,(void**)&argp39,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",39,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg39 = *argp39;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,40,(void**)&arg40,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",40,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,41,(void**)&arg41,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",41,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,42,(void**)&arg42,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",42,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,43,(void**)&arg43,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_CostasQamDemodulateDebug",43,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  result = SDS_CostasQamDemodulateDebug(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(SLData_t const *)arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CostasQamDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLData_t arg16 ;
  enum SLCostasLoopFeedbackMode_t arg17 ;
  SLData_t *arg18 = (SLData_t *) 0 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg20 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg21 = (SLData_t *) 0 ;
  SLData_t *arg22 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg23 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg24 ;
  SLData_t *arg25 = (SLData_t *) 0 ;
  SLData_t *arg26 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg27 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg28 ;
  SLData_t arg29 ;
  SLFixData_t *arg30 = (SLFixData_t *) 0 ;
  SLData_t *arg31 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg32 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg33 = (SLFixData_t *) 0 ;
  SLFixData_t *arg34 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg35 ;
  SLData_t *arg36 = (SLData_t *) 0 ;
  SLData_t *arg37 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg38 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg39 ;
  SLArrayIndex_t arg40 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp14 ;
  SLData_t *argp16 ;
  SLArrayIndex_t *argp24 ;
  SLArrayIndex_t *argp28 ;
  SLData_t *argp29 ;
  SLArrayIndex_t *argp35 ;
  SLArrayIndex_t *argp39 ;
  SLArrayIndex_t *argp40 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_CostasQamDemodulate",40,40)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CostasQamDemodulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CostasQamDemodulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CostasQamDemodulate",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CostasQamDemodulate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CostasQamDemodulate",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_CostasQamDemodulate",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_CostasQamDemodulate",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_CostasQamDemodulate",8,"SLData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_CostasQamDemodulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_CostasQamDemodulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_CostasQamDemodulate",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_CostasQamDemodulate",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_CostasQamDemodulate",13,"SLData_t const *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_CostasQamDemodulate",14,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_CostasQamDemodulate",15,"SLData_t *");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_CostasQamDemodulate",16,"SLData_t const");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("SDA_CostasQamDemodulate",17,"enum SLCostasLoopFeedbackMode_t const");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDA_CostasQamDemodulate",18,"SLData_t *");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDA_CostasQamDemodulate",19,"SLData_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SDA_CostasQamDemodulate",20,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,21)) SWIG_fail_arg("SDA_CostasQamDemodulate",21,"SLData_t *");
  if(!SWIG_isptrtype(L,22)) SWIG_fail_arg("SDA_CostasQamDemodulate",22,"SLData_t *");
  if(!SWIG_isptrtype(L,23)) SWIG_fail_arg("SDA_CostasQamDemodulate",23,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,24)) SWIG_fail_arg("SDA_CostasQamDemodulate",24,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,25)) SWIG_fail_arg("SDA_CostasQamDemodulate",25,"SLData_t *");
  if(!SWIG_isptrtype(L,26)) SWIG_fail_arg("SDA_CostasQamDemodulate",26,"SLData_t *");
  if(!SWIG_isptrtype(L,27)) SWIG_fail_arg("SDA_CostasQamDemodulate",27,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,28)) SWIG_fail_arg("SDA_CostasQamDemodulate",28,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,29)) SWIG_fail_arg("SDA_CostasQamDemodulate",29,"SLData_t const");
  if(!SWIG_isptrtype(L,30)) SWIG_fail_arg("SDA_CostasQamDemodulate",30,"SLFixData_t *");
  if(!SWIG_isptrtype(L,31)) SWIG_fail_arg("SDA_CostasQamDemodulate",31,"SLData_t *");
  if(!SWIG_isptrtype(L,32)) SWIG_fail_arg("SDA_CostasQamDemodulate",32,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,33)) SWIG_fail_arg("SDA_CostasQamDemodulate",33,"SLFixData_t *");
  if(!SWIG_isptrtype(L,34)) SWIG_fail_arg("SDA_CostasQamDemodulate",34,"SLFixData_t *");
  if(!lua_isuserdata(L,35)) SWIG_fail_arg("SDA_CostasQamDemodulate",35,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,36)) SWIG_fail_arg("SDA_CostasQamDemodulate",36,"SLData_t *");
  if(!SWIG_isptrtype(L,37)) SWIG_fail_arg("SDA_CostasQamDemodulate",37,"SLData_t *");
  if(!SWIG_isptrtype(L,38)) SWIG_fail_arg("SDA_CostasQamDemodulate",38,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,39)) SWIG_fail_arg("SDA_CostasQamDemodulate",39,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,40)) SWIG_fail_arg("SDA_CostasQamDemodulate",40,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",16,SWIGTYPE_p_SLData_t);
  }
  arg16 = *argp16;
  
  arg17 = (enum SLCostasLoopFeedbackMode_t const)(int)lua_tonumber(L, 17);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",18,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",19,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&arg21,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",21,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&arg22,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",22,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&arg23,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",23,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,24,(void**)&argp24,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",24,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg24 = *argp24;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,25,(void**)&arg25,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",25,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,26,(void**)&arg26,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",26,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,27,(void**)&arg27,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",27,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,28,(void**)&argp28,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",28,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg28 = *argp28;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,29,(void**)&argp29,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",29,SWIGTYPE_p_SLData_t);
  }
  arg29 = *argp29;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,30,(void**)&arg30,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",30,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,31,(void**)&arg31,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",31,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,32,(void**)&arg32,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",32,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,33,(void**)&arg33,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",33,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,34,(void**)&arg34,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",34,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,35,(void**)&argp35,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",35,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg35 = *argp35;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,36,(void**)&arg36,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",36,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,37,(void**)&arg37,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",37,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,38,(void**)&arg38,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",38,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,39,(void**)&argp39,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",39,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg39 = *argp39;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,40,(void**)&argp40,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulate",40,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg40 = *argp40;
  
  result = SDA_CostasQamDemodulate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(SLData_t const *)arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CostasQamDemodulateDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLData_t arg16 ;
  enum SLCostasLoopFeedbackMode_t arg17 ;
  SLData_t *arg18 = (SLData_t *) 0 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg20 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg21 = (SLData_t *) 0 ;
  SLData_t *arg22 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg23 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg24 ;
  SLData_t *arg25 = (SLData_t *) 0 ;
  SLData_t *arg26 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg27 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg28 ;
  SLData_t arg29 ;
  SLFixData_t *arg30 = (SLFixData_t *) 0 ;
  SLData_t *arg31 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg32 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *arg33 = (SLFixData_t *) 0 ;
  SLFixData_t *arg34 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg35 ;
  SLData_t *arg36 = (SLData_t *) 0 ;
  SLData_t *arg37 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg38 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg39 ;
  SLArrayIndex_t arg40 ;
  SLData_t *arg41 = (SLData_t *) 0 ;
  SLData_t *arg42 = (SLData_t *) 0 ;
  SLData_t *arg43 = (SLData_t *) 0 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp14 ;
  SLData_t *argp16 ;
  SLArrayIndex_t *argp24 ;
  SLArrayIndex_t *argp28 ;
  SLData_t *argp29 ;
  SLArrayIndex_t *argp35 ;
  SLArrayIndex_t *argp39 ;
  SLArrayIndex_t *argp40 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_CostasQamDemodulateDebug",43,43)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",8,"SLData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",13,"SLData_t const *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",14,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",15,"SLData_t *");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",16,"SLData_t const");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",17,"enum SLCostasLoopFeedbackMode_t const");
  if(!SWIG_isptrtype(L,18)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",18,"SLData_t *");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",19,"SLData_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",20,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,21)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",21,"SLData_t *");
  if(!SWIG_isptrtype(L,22)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",22,"SLData_t *");
  if(!SWIG_isptrtype(L,23)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",23,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,24)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",24,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,25)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",25,"SLData_t *");
  if(!SWIG_isptrtype(L,26)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",26,"SLData_t *");
  if(!SWIG_isptrtype(L,27)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",27,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,28)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",28,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,29)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",29,"SLData_t const");
  if(!SWIG_isptrtype(L,30)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",30,"SLFixData_t *");
  if(!SWIG_isptrtype(L,31)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",31,"SLData_t *");
  if(!SWIG_isptrtype(L,32)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",32,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,33)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",33,"SLFixData_t *");
  if(!SWIG_isptrtype(L,34)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",34,"SLFixData_t *");
  if(!lua_isuserdata(L,35)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",35,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,36)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",36,"SLData_t *");
  if(!SWIG_isptrtype(L,37)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",37,"SLData_t *");
  if(!SWIG_isptrtype(L,38)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",38,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,39)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",39,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,40)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",40,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,41)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",41,"SLData_t *");
  if(!SWIG_isptrtype(L,42)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",42,"SLData_t *");
  if(!SWIG_isptrtype(L,43)) SWIG_fail_arg("SDA_CostasQamDemodulateDebug",43,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",16,SWIGTYPE_p_SLData_t);
  }
  arg16 = *argp16;
  
  arg17 = (enum SLCostasLoopFeedbackMode_t const)(int)lua_tonumber(L, 17);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&arg18,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",18,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",19,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",20,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,21,(void**)&arg21,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",21,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&arg22,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",22,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&arg23,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",23,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,24,(void**)&argp24,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",24,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg24 = *argp24;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,25,(void**)&arg25,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",25,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,26,(void**)&arg26,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",26,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,27,(void**)&arg27,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",27,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,28,(void**)&argp28,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",28,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg28 = *argp28;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,29,(void**)&argp29,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",29,SWIGTYPE_p_SLData_t);
  }
  arg29 = *argp29;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,30,(void**)&arg30,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",30,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,31,(void**)&arg31,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",31,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,32,(void**)&arg32,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",32,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,33,(void**)&arg33,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",33,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,34,(void**)&arg34,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",34,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,35,(void**)&argp35,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",35,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg35 = *argp35;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,36,(void**)&arg36,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",36,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,37,(void**)&arg37,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",37,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,38,(void**)&arg38,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",38,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,39,(void**)&argp39,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",39,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg39 = *argp39;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,40,(void**)&argp40,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",40,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg40 = *argp40;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,41,(void**)&arg41,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",41,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,42,(void**)&arg42,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",42,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,43,(void**)&arg43,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CostasQamDemodulateDebug",43,SWIGTYPE_p_SLData_t);
  }
  
  result = SDA_CostasQamDemodulateDebug((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,(SLData_t const *)arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_QpskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t arg12 ;
  SLData_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  
  SWIG_check_num_args("SIF_QpskModulate",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_QpskModulate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_QpskModulate",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_QpskModulate",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_QpskModulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_QpskModulate",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_QpskModulate",6,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_QpskModulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_QpskModulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_QpskModulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_QpskModulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_QpskModulate",11,"SLData_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_QpskModulate",12,"SLData_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SIF_QpskModulate",13,"SLData_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SIF_QpskModulate",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SIF_QpskModulate",15,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_QpskModulate",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskModulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  SIF_QpskModulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QpskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg7 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg8 ;
  SLFixData_t arg9 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg13 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLFixData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp8 ;
  SLFixData_t *argp9 ;
  SLArrayIndex_t *argp15 ;
  SLArrayIndex_t *argp16 ;
  
  SWIG_check_num_args("SDA_QpskModulate",16,16)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_QpskModulate",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QpskModulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_QpskModulate",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_QpskModulate",4,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_QpskModulate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_QpskModulate",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_QpskModulate",7,"SLComplexRect_s *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_QpskModulate",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_QpskModulate",9,"SLFixData_t const");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_QpskModulate",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_QpskModulate",11,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_QpskModulate",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_QpskModulate",13,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_QpskModulate",14,"SLData_t *");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_QpskModulate",15,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_QpskModulate",16,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_QpskModulate",7,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",9,SWIGTYPE_p_SLFixData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskModulate",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  SDA_QpskModulate(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_QpskDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t arg12 ;
  SLData_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  
  SWIG_check_num_args("SIF_QpskDemodulate",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_QpskDemodulate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_QpskDemodulate",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_QpskDemodulate",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_QpskDemodulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_QpskDemodulate",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_QpskDemodulate",6,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_QpskDemodulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_QpskDemodulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_QpskDemodulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_QpskDemodulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_QpskDemodulate",11,"SLData_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_QpskDemodulate",12,"SLData_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SIF_QpskDemodulate",13,"SLData_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SIF_QpskDemodulate",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SIF_QpskDemodulate",15,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QpskDemodulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  SIF_QpskDemodulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QpskDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg7 ;
  SLFixData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp7 ;
  SLFixData_t *argp8 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_QpskDemodulate",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_QpskDemodulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QpskDemodulate",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_QpskDemodulate",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_QpskDemodulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_QpskDemodulate",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_QpskDemodulate",6,"SLComplexRect_s *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_QpskDemodulate",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_QpskDemodulate",8,"SLFixData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_QpskDemodulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_QpskDemodulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_QpskDemodulate",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_QpskDemodulate",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_QpskDemodulate",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_QpskDemodulate",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_QpskDemodulate",15,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",8,SWIGTYPE_p_SLFixData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  result = SDA_QpskDemodulate((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QpskDemodulateDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg7 ;
  SLFixData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLData_t *arg16 = (SLData_t *) 0 ;
  SLComplexRect_s *arg17 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp7 ;
  SLFixData_t *argp8 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_QpskDemodulateDebug",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_QpskDemodulateDebug",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QpskDemodulateDebug",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_QpskDemodulateDebug",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_QpskDemodulateDebug",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_QpskDemodulateDebug",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_QpskDemodulateDebug",6,"SLComplexRect_s *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_QpskDemodulateDebug",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_QpskDemodulateDebug",8,"SLFixData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_QpskDemodulateDebug",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_QpskDemodulateDebug",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_QpskDemodulateDebug",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_QpskDemodulateDebug",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_QpskDemodulateDebug",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_QpskDemodulateDebug",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_QpskDemodulateDebug",15,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_QpskDemodulateDebug",16,"SLData_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_QpskDemodulateDebug",17,"SLComplexRect_s *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",8,SWIGTYPE_p_SLFixData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",16,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_QpskDemodulateDebug",17,SWIGTYPE_p_SLComplexRect_s);
  }
  
  result = SDA_QpskDemodulateDebug((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QpskDifferentialEncode(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_QpskDifferentialEncode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_QpskDifferentialEncode",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QpskDifferentialEncode",2,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QpskDifferentialEncode",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QpskDifferentialEncode",2,SWIGTYPE_p_SLFixData_t);
  }
  
  result = SDA_QpskDifferentialEncode(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QpskDifferentialDecode(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_QpskDifferentialDecode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_QpskDifferentialDecode",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QpskDifferentialDecode",2,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QpskDifferentialDecode",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QpskDifferentialDecode",2,SWIGTYPE_p_SLFixData_t);
  }
  
  result = SDA_QpskDifferentialDecode(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_FskModulate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FskModulate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FskModulate",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_FskModulate",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FskModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FskModulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FskModulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_FskModulate(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FskModulateByte(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLFixData_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLFixData_t *argp1 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLFixData_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_FskModulateByte",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_FskModulateByte",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FskModulateByte",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FskModulateByte",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FskModulateByte",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FskModulateByte",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FskModulateByte",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FskModulateByte",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FskModulateByte",8,"SLFixData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FskModulateByte",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",8,SWIGTYPE_p_SLFixData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FskModulateByte",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_FskModulateByte(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FskDemodulateByte(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLFixData_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLFixData_t *argp5 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_FskDemodulateByte",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FskDemodulateByte",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FskDemodulateByte",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FskDemodulateByte",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FskDemodulateByte",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FskDemodulateByte",5,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulateByte",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulateByte",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulateByte",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulateByte",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulateByte",5,SWIGTYPE_p_SLFixData_t);
  }
  arg5 = *argp5;
  
  result = SDA_FskDemodulateByte((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CpfskModulateByte(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLFixData_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLFixData_t *argp1 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLFixData_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_CpfskModulateByte",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_CpfskModulateByte",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CpfskModulateByte",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CpfskModulateByte",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CpfskModulateByte",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CpfskModulateByte",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CpfskModulateByte",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_CpfskModulateByte",7,"SLFixData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_CpfskModulateByte",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulateByte",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulateByte",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulateByte",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulateByte",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulateByte",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulateByte",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulateByte",7,SWIGTYPE_p_SLFixData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulateByte",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_CpfskModulateByte(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLFixData_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLFixData_t *argp1 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLFixData_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_FskModulate",9,9)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_FskModulate",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FskModulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FskModulate",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FskModulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FskModulate",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FskModulate",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FskModulate",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FskModulate",8,"SLFixData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FskModulate",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",8,SWIGTYPE_p_SLFixData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FskModulate",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_FskModulate(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FskDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLFixData_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLFixData_t *argp5 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_FskDemodulate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FskDemodulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FskDemodulate",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FskDemodulate",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FskDemodulate",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FskDemodulate",5,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FskDemodulate",5,SWIGTYPE_p_SLFixData_t);
  }
  arg5 = *argp5;
  
  result = SDA_FskDemodulate((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CpfskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLFixData_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLFixData_t *argp1 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLFixData_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_CpfskModulate",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_CpfskModulate",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CpfskModulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CpfskModulate",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CpfskModulate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CpfskModulate",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CpfskModulate",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_CpfskModulate",7,"SLFixData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_CpfskModulate",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulate",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulate",7,SWIGTYPE_p_SLFixData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CpfskModulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_CpfskModulate(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Qam16Modulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t arg12 ;
  SLData_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  
  SWIG_check_num_args("SIF_Qam16Modulate",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Qam16Modulate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_Qam16Modulate",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Qam16Modulate",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_Qam16Modulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_Qam16Modulate",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_Qam16Modulate",6,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_Qam16Modulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_Qam16Modulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_Qam16Modulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_Qam16Modulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_Qam16Modulate",11,"SLData_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_Qam16Modulate",12,"SLData_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SIF_Qam16Modulate",13,"SLData_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SIF_Qam16Modulate",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SIF_Qam16Modulate",15,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Modulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  SIF_Qam16Modulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Qam16Modulate(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg7 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg8 ;
  SLFixData_t arg9 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg13 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLFixData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp8 ;
  SLFixData_t *argp9 ;
  SLArrayIndex_t *argp15 ;
  SLArrayIndex_t *argp16 ;
  
  SWIG_check_num_args("SDA_Qam16Modulate",16,16)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_Qam16Modulate",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Qam16Modulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Qam16Modulate",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Qam16Modulate",4,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Qam16Modulate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Qam16Modulate",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_Qam16Modulate",7,"SLComplexRect_s *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Qam16Modulate",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_Qam16Modulate",9,"SLFixData_t const");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_Qam16Modulate",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_Qam16Modulate",11,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_Qam16Modulate",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_Qam16Modulate",13,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_Qam16Modulate",14,"SLData_t *");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_Qam16Modulate",15,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_Qam16Modulate",16,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",7,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",9,SWIGTYPE_p_SLFixData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Modulate",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  SDA_Qam16Modulate(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Qam16Demodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t arg12 ;
  SLData_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  
  SWIG_check_num_args("SIF_Qam16Demodulate",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Qam16Demodulate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_Qam16Demodulate",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_Qam16Demodulate",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_Qam16Demodulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_Qam16Demodulate",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_Qam16Demodulate",6,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_Qam16Demodulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_Qam16Demodulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_Qam16Demodulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_Qam16Demodulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_Qam16Demodulate",11,"SLData_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_Qam16Demodulate",12,"SLData_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SIF_Qam16Demodulate",13,"SLData_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SIF_Qam16Demodulate",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SIF_Qam16Demodulate",15,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Qam16Demodulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  SIF_Qam16Demodulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Qam16Demodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg7 ;
  SLFixData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp7 ;
  SLFixData_t *argp8 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_Qam16Demodulate",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Qam16Demodulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Qam16Demodulate",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Qam16Demodulate",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Qam16Demodulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Qam16Demodulate",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Qam16Demodulate",6,"SLComplexRect_s *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Qam16Demodulate",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Qam16Demodulate",8,"SLFixData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_Qam16Demodulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_Qam16Demodulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_Qam16Demodulate",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_Qam16Demodulate",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_Qam16Demodulate",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_Qam16Demodulate",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_Qam16Demodulate",15,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",8,SWIGTYPE_p_SLFixData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16Demodulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  result = SDA_Qam16Demodulate((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Qam16DemodulateDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg7 ;
  SLFixData_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLData_t *arg16 = (SLData_t *) 0 ;
  SLComplexRect_s *arg17 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp7 ;
  SLFixData_t *argp8 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_Qam16DemodulateDebug",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",6,"SLComplexRect_s *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",8,"SLFixData_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",15,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",16,"SLData_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_Qam16DemodulateDebug",17,"SLComplexRect_s *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",8,SWIGTYPE_p_SLFixData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",16,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_Qam16DemodulateDebug",17,SWIGTYPE_p_SLComplexRect_s);
  }
  
  result = SDA_Qam16DemodulateDebug((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Qam16DifferentialEncode(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_Qam16DifferentialEncode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_Qam16DifferentialEncode",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Qam16DifferentialEncode",2,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DifferentialEncode",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DifferentialEncode",2,SWIGTYPE_p_SLFixData_t);
  }
  
  result = SDA_Qam16DifferentialEncode(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Qam16DifferentialDecode(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_Qam16DifferentialDecode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_Qam16DifferentialDecode",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Qam16DifferentialDecode",2,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DifferentialDecode",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Qam16DifferentialDecode",2,SWIGTYPE_p_SLFixData_t);
  }
  
  result = SDA_Qam16DifferentialDecode(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_BpskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_BpskModulate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_BpskModulate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_BpskModulate",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_BpskModulate",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_BpskModulate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskModulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_BpskModulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_BpskModulate(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_BpskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLFixData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_BpskModulate",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_BpskModulate",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_BpskModulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_BpskModulate",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_BpskModulate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_BpskModulate",5,"SLFixData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_BpskModulate",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_BpskModulate",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulate",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulate",5,SWIGTYPE_p_SLFixData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskModulate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_BpskModulate(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_BpskModulateByte(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLFixData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_BpskModulateByte",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_BpskModulateByte",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_BpskModulateByte",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_BpskModulateByte",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_BpskModulateByte",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_BpskModulateByte",5,"SLFixData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_BpskModulateByte",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_BpskModulateByte",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulateByte",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulateByte",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulateByte",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulateByte",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulateByte",5,SWIGTYPE_p_SLFixData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskModulateByte",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskModulateByte",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_BpskModulateByte(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_BpskDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg13 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SIF_BpskDemodulate",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_BpskDemodulate",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_BpskDemodulate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_BpskDemodulate",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_BpskDemodulate",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_BpskDemodulate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_BpskDemodulate",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_BpskDemodulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_BpskDemodulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_BpskDemodulate",9,"SLData_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_BpskDemodulate",10,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_BpskDemodulate",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_BpskDemodulate",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_BpskDemodulate",13,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SIF_BpskDemodulate",14,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_BpskDemodulate",14,SWIGTYPE_p_SLData_t);
  }
  
  SIF_BpskDemodulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_BpskDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLData_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg17 = (SLData_t *) 0 ;
  SLFixData_t arg18 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp14 ;
  SLFixData_t *argp18 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_BpskDemodulate",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_BpskDemodulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_BpskDemodulate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_BpskDemodulate",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_BpskDemodulate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_BpskDemodulate",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_BpskDemodulate",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_BpskDemodulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_BpskDemodulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_BpskDemodulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_BpskDemodulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_BpskDemodulate",11,"SLData_t const *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_BpskDemodulate",12,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_BpskDemodulate",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_BpskDemodulate",14,"SLData_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_BpskDemodulate",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_BpskDemodulate",16,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_BpskDemodulate",17,"SLData_t *");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_BpskDemodulate",18,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",14,SWIGTYPE_p_SLData_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",17,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulate",18,SWIGTYPE_p_SLFixData_t);
  }
  arg18 = *argp18;
  
  result = SDA_BpskDemodulate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(SLData_t const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_BpskDemodulateDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLData_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg17 = (SLData_t *) 0 ;
  SLFixData_t arg18 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp14 ;
  SLFixData_t *argp18 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_BpskDemodulateDebug",19,19)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_BpskDemodulateDebug",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_BpskDemodulateDebug",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_BpskDemodulateDebug",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_BpskDemodulateDebug",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_BpskDemodulateDebug",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_BpskDemodulateDebug",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_BpskDemodulateDebug",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_BpskDemodulateDebug",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_BpskDemodulateDebug",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_BpskDemodulateDebug",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_BpskDemodulateDebug",11,"SLData_t const *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_BpskDemodulateDebug",12,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_BpskDemodulateDebug",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_BpskDemodulateDebug",14,"SLData_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_BpskDemodulateDebug",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_BpskDemodulateDebug",16,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_BpskDemodulateDebug",17,"SLData_t *");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_BpskDemodulateDebug",18,"SLFixData_t const");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDA_BpskDemodulateDebug",19,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",14,SWIGTYPE_p_SLData_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",17,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",18,SWIGTYPE_p_SLFixData_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_BpskDemodulateDebug",19,SWIGTYPE_p_SLData_t);
  }
  
  result = SDA_BpskDemodulateDebug((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(SLData_t const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DpskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_DpskModulate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DpskModulate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_DpskModulate",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_DpskModulate",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_DpskModulate",4,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_DpskModulate",5,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskModulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DpskModulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskModulate",5,SWIGTYPE_p_SLData_t);
  }
  
  SIF_DpskModulate(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DpskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLFixData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_DpskModulate",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_DpskModulate",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DpskModulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_DpskModulate",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_DpskModulate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DpskModulate",5,"SLFixData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_DpskModulate",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_DpskModulate",7,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_DpskModulate",8,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulate",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulate",5,SWIGTYPE_p_SLFixData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskModulate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulate",8,SWIGTYPE_p_SLData_t);
  }
  
  SDA_DpskModulate(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DpskModulateByte(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLFixData_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_DpskModulateByte",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_DpskModulateByte",1,"SLFixData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DpskModulateByte",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_DpskModulateByte",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_DpskModulateByte",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DpskModulateByte",5,"SLFixData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_DpskModulateByte",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_DpskModulateByte",7,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_DpskModulateByte",8,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulateByte",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulateByte",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulateByte",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulateByte",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulateByte",5,SWIGTYPE_p_SLFixData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulateByte",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskModulateByte",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskModulateByte",8,SWIGTYPE_p_SLData_t);
  }
  
  SDA_DpskModulateByte(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DpskDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg13 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SIF_DpskDemodulate",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DpskDemodulate",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_DpskDemodulate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_DpskDemodulate",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_DpskDemodulate",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_DpskDemodulate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_DpskDemodulate",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_DpskDemodulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_DpskDemodulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_DpskDemodulate",9,"SLData_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SIF_DpskDemodulate",10,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_DpskDemodulate",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_DpskDemodulate",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SIF_DpskDemodulate",13,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SIF_DpskDemodulate",14,"SLData_t *");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SIF_DpskDemodulate",15,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DpskDemodulate",15,SWIGTYPE_p_SLData_t);
  }
  
  SIF_DpskDemodulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DpskDemodulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLData_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg17 = (SLData_t *) 0 ;
  SLFixData_t arg18 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp14 ;
  SLFixData_t *argp18 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_DpskDemodulate",19,19)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DpskDemodulate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DpskDemodulate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DpskDemodulate",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_DpskDemodulate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DpskDemodulate",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_DpskDemodulate",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_DpskDemodulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_DpskDemodulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_DpskDemodulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_DpskDemodulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_DpskDemodulate",11,"SLData_t const *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_DpskDemodulate",12,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_DpskDemodulate",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_DpskDemodulate",14,"SLData_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_DpskDemodulate",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_DpskDemodulate",16,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_DpskDemodulate",17,"SLData_t *");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_DpskDemodulate",18,"SLFixData_t const");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDA_DpskDemodulate",19,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",14,SWIGTYPE_p_SLData_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",17,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",18,SWIGTYPE_p_SLFixData_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulate",19,SWIGTYPE_p_SLData_t);
  }
  
  result = SDA_DpskDemodulate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(SLData_t const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DpskDemodulateDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t arg12 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLData_t arg14 ;
  SLData_t *arg15 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg17 = (SLData_t *) 0 ;
  SLFixData_t arg18 ;
  SLData_t *arg19 = (SLData_t *) 0 ;
  SLData_t *arg20 = (SLData_t *) 0 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp12 ;
  SLData_t *argp14 ;
  SLFixData_t *argp18 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_DpskDemodulateDebug",20,20)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DpskDemodulateDebug",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DpskDemodulateDebug",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DpskDemodulateDebug",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_DpskDemodulateDebug",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DpskDemodulateDebug",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_DpskDemodulateDebug",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_DpskDemodulateDebug",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_DpskDemodulateDebug",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_DpskDemodulateDebug",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_DpskDemodulateDebug",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_DpskDemodulateDebug",11,"SLData_t const *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_DpskDemodulateDebug",12,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_DpskDemodulateDebug",13,"SLData_t *");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_DpskDemodulateDebug",14,"SLData_t const");
  if(!SWIG_isptrtype(L,15)) SWIG_fail_arg("SDA_DpskDemodulateDebug",15,"SLData_t *");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_DpskDemodulateDebug",16,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_DpskDemodulateDebug",17,"SLData_t *");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_DpskDemodulateDebug",18,"SLFixData_t const");
  if(!SWIG_isptrtype(L,19)) SWIG_fail_arg("SDA_DpskDemodulateDebug",19,"SLData_t *");
  if(!SWIG_isptrtype(L,20)) SWIG_fail_arg("SDA_DpskDemodulateDebug",20,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",14,SWIGTYPE_p_SLData_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&arg15,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",15,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",17,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",18,SWIGTYPE_p_SLFixData_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&arg19,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",19,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&arg20,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DpskDemodulateDebug",20,SWIGTYPE_p_SLData_t);
  }
  
  result = SDA_DpskDemodulateDebug((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(SLData_t const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_PiByFourDQpskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t arg12 ;
  SLData_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t *arg16 = (SLArrayIndex_t *) 0 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp12 ;
  SLData_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  
  SWIG_check_num_args("SIF_PiByFourDQpskModulate",16,16)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",6,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",11,"SLData_t *");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",12,"SLData_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",13,"SLData_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",15,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SIF_PiByFourDQpskModulate",16,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",13,SWIGTYPE_p_SLData_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_PiByFourDQpskModulate",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SIF_PiByFourDQpskModulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PiByFourDQpskModulate(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLComplexRect_s *arg7 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg8 ;
  SLFixData_t arg9 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg11 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg13 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLArrayIndex_t *arg17 = (SLArrayIndex_t *) 0 ;
  SLFixData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp8 ;
  SLFixData_t *argp9 ;
  SLArrayIndex_t *argp15 ;
  SLArrayIndex_t *argp16 ;
  
  SWIG_check_num_args("SDA_PiByFourDQpskModulate",17,17)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",4,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",6,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",7,"SLComplexRect_s *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",9,"SLFixData_t const");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",10,"SLData_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",11,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",12,"SLData_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",13,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",14,"SLData_t *");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",15,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",16,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,17)) SWIG_fail_arg("SDA_PiByFourDQpskModulate",17,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",7,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",9,SWIGTYPE_p_SLFixData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&arg17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PiByFourDQpskModulate",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SDA_PiByFourDQpskModulate(arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ChannelizationCode(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDS_ChannelizationCode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_ChannelizationCode",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ChannelizationCode",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_ChannelizationCode",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ChannelizationCode",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ChannelizationCode",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_ChannelizationCode",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDS_ChannelizationCode(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexQPSKSpread(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLComplexRect_s *arg7 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg8 ;
  SLFixData_t *argp1 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_ComplexQPSKSpread",8,8)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_ComplexQPSKSpread",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexQPSKSpread",2,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexQPSKSpread",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexQPSKSpread",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ComplexQPSKSpread",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ComplexQPSKSpread",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_ComplexQPSKSpread",7,"SLComplexRect_s const *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_ComplexQPSKSpread",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKSpread",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKSpread",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKSpread",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKSpread",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKSpread",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKSpread",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKSpread",7,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKSpread",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_ComplexQPSKSpread(arg1,arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,(SLComplexRect_s const *)arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexQPSKDeSpread(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLComplexRect_s *arg6 = (SLComplexRect_s *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp8 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_ComplexQPSKDeSpread",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexQPSKDeSpread",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexQPSKDeSpread",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexQPSKDeSpread",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexQPSKDeSpread",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ComplexQPSKDeSpread",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ComplexQPSKDeSpread",6,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_ComplexQPSKDeSpread",7,"SLData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_ComplexQPSKDeSpread",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKDeSpread",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKDeSpread",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKDeSpread",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKDeSpread",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKDeSpread",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKDeSpread",6,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKDeSpread",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexQPSKDeSpread",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  result = SDA_ComplexQPSKDeSpread((SLComplexRect_s const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5,(SLComplexRect_s const *)arg6,arg7,arg8);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_AsyncCharacterLength(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t arg1 ;
  enum SLParity_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp1 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_AsyncCharacterLength",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_AsyncCharacterLength",1,"SLArrayIndex_t const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SUF_AsyncCharacterLength",2,"enum SLParity_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_AsyncCharacterLength",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_AsyncCharacterLength",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg1 = *argp1;
  
  arg2 = (enum SLParity_t const)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_AsyncCharacterLength",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_AsyncCharacterLength(arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SyncToAsyncConverter(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt8_t *arg1 = (SLUInt8_t *) 0 ;
  SLUInt8_t *arg2 = (SLUInt8_t *) 0 ;
  SLArrayIndex_t arg3 ;
  enum SLParity_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_SyncToAsyncConverter",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SyncToAsyncConverter",1,"SLUInt8_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SyncToAsyncConverter",2,"SLUInt8_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SyncToAsyncConverter",3,"SLArrayIndex_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_SyncToAsyncConverter",4,"enum SLParity_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SyncToAsyncConverter",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_SyncToAsyncConverter",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_SyncToAsyncConverter",1,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_SyncToAsyncConverter",2,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SyncToAsyncConverter",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLParity_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SyncToAsyncConverter",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SyncToAsyncConverter",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_SyncToAsyncConverter((SLUInt8_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AsyncToSyncConverter(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt8_t *arg1 = (SLUInt8_t *) 0 ;
  SLUInt8_t *arg2 = (SLUInt8_t *) 0 ;
  SLArrayIndex_t arg3 ;
  enum SLParity_t arg4 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_AsyncToSyncConverter",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AsyncToSyncConverter",1,"SLUInt8_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AsyncToSyncConverter",2,"SLUInt8_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AsyncToSyncConverter",3,"SLArrayIndex_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_AsyncToSyncConverter",4,"enum SLParity_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_AsyncToSyncConverter",5,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_AsyncToSyncConverter",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_AsyncToSyncConverter",1,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_AsyncToSyncConverter",2,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncToSyncConverter",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLParity_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncToSyncConverter",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncToSyncConverter",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_AsyncToSyncConverter((SLUInt8_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_AsyncAddRemoveStopBits(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  
  SWIG_check_num_args("SIF_AsyncAddRemoveStopBits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_AsyncAddRemoveStopBits",1,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AsyncAddRemoveStopBits",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SIF_AsyncAddRemoveStopBits(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AsyncRemoveStopBits(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt8_t *arg1 = (SLUInt8_t *) 0 ;
  SLUInt8_t *arg2 = (SLUInt8_t *) 0 ;
  SLArrayIndex_t arg3 ;
  enum SLParity_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_AsyncRemoveStopBits",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AsyncRemoveStopBits",1,"SLUInt8_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AsyncRemoveStopBits",2,"SLUInt8_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AsyncRemoveStopBits",3,"SLArrayIndex_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_AsyncRemoveStopBits",4,"enum SLParity_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_AsyncRemoveStopBits",5,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_AsyncRemoveStopBits",6,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_AsyncRemoveStopBits",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_AsyncRemoveStopBits",1,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_AsyncRemoveStopBits",2,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncRemoveStopBits",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLParity_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncRemoveStopBits",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncRemoveStopBits",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncRemoveStopBits",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDA_AsyncRemoveStopBits((SLUInt8_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AsyncAddStopBits(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt8_t *arg1 = (SLUInt8_t *) 0 ;
  SLUInt8_t *arg2 = (SLUInt8_t *) 0 ;
  SLArrayIndex_t arg3 ;
  enum SLParity_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_AsyncAddStopBits",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AsyncAddStopBits",1,"SLUInt8_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AsyncAddStopBits",2,"SLUInt8_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AsyncAddStopBits",3,"SLArrayIndex_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_AsyncAddStopBits",4,"enum SLParity_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_AsyncAddStopBits",5,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_AsyncAddStopBits",6,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_AsyncAddStopBits",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_AsyncAddStopBits",1,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_AsyncAddStopBits",2,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncAddStopBits",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLParity_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncAddStopBits",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncAddStopBits",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AsyncAddStopBits",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDA_AsyncAddStopBits((SLUInt8_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DecreaseWordLength(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt8_t *arg1 = (SLUInt8_t *) 0 ;
  SLUInt8_t *arg2 = (SLUInt8_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_DecreaseWordLength",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DecreaseWordLength",1,"SLUInt8_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DecreaseWordLength",2,"SLUInt8_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DecreaseWordLength",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_DecreaseWordLength",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DecreaseWordLength",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_DecreaseWordLength",1,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_DecreaseWordLength",2,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DecreaseWordLength",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DecreaseWordLength",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DecreaseWordLength",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_DecreaseWordLength((SLUInt8_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_IncreaseWordLength(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt8_t *arg1 = (SLUInt8_t *) 0 ;
  SLUInt8_t *arg2 = (SLUInt8_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_IncreaseWordLength",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_IncreaseWordLength",1,"SLUInt8_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_IncreaseWordLength",2,"SLUInt8_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_IncreaseWordLength",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_IncreaseWordLength",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_IncreaseWordLength",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_IncreaseWordLength",1,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt8_t,0))){
    SWIG_fail_ptr("SDA_IncreaseWordLength",2,SWIGTYPE_p_SLUInt8_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IncreaseWordLength",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IncreaseWordLength",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_IncreaseWordLength",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_IncreaseWordLength((SLUInt8_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Scrambler1417(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Scrambler1417",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Scrambler1417",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Scrambler1417",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Scrambler1417",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_Scrambler1417",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_Scrambler1417(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Descrambler1417(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Descrambler1417",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Descrambler1417",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Descrambler1417",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Descrambler1417",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_Descrambler1417",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_Descrambler1417(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Scrambler1417WithInversion(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *arg3 = (SLFixData_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Scrambler1417WithInversion",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Scrambler1417WithInversion",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Scrambler1417WithInversion",2,"SLUInt32_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_Scrambler1417WithInversion",3,"SLFixData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_Scrambler1417WithInversion",4,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Scrambler1417WithInversion",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_Scrambler1417WithInversion",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Scrambler1417WithInversion",3,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Scrambler1417WithInversion",4,SWIGTYPE_p_SLFixData_t);
  }
  
  result = SDS_Scrambler1417WithInversion(arg1,arg2,arg3,arg4);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Descrambler1417WithInversion(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *arg3 = (SLFixData_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Descrambler1417WithInversion",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Descrambler1417WithInversion",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Descrambler1417WithInversion",2,"SLUInt32_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_Descrambler1417WithInversion",3,"SLFixData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_Descrambler1417WithInversion",4,"SLFixData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Descrambler1417WithInversion",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_Descrambler1417WithInversion",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Descrambler1417WithInversion",3,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Descrambler1417WithInversion",4,SWIGTYPE_p_SLFixData_t);
  }
  
  result = SDS_Descrambler1417WithInversion(arg1,arg2,arg3,arg4);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Scrambler1823(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Scrambler1823",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Scrambler1823",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Scrambler1823",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Scrambler1823",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_Scrambler1823",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_Scrambler1823(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Descrambler1823(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Descrambler1823",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Descrambler1823",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Descrambler1823",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Descrambler1823",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_Descrambler1823",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_Descrambler1823(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Scrambler523(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Scrambler523",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Scrambler523",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Scrambler523",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Scrambler523",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_Scrambler523",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_Scrambler523(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Descrambler523(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Descrambler523",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Descrambler523",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_Descrambler523",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_Descrambler523",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_Descrambler523",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_Descrambler523(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ScramblerDescramblerPN9(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ScramblerDescramblerPN9",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ScramblerDescramblerPN9",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ScramblerDescramblerPN9",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblerPN9",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblerPN9",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_ScramblerDescramblerPN9(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SequenceGeneratorPN9(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt32_t *arg1 = (SLUInt32_t *) 0 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_SequenceGeneratorPN9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_SequenceGeneratorPN9",1,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_SequenceGeneratorPN9",1,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_SequenceGeneratorPN9(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ScramblerDescramblerPN15(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ScramblerDescramblerPN15",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ScramblerDescramblerPN15",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ScramblerDescramblerPN15",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblerPN15",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblerPN15",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_ScramblerDescramblerPN15(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SequenceGeneratorPN15(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt32_t *arg1 = (SLUInt32_t *) 0 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_SequenceGeneratorPN15",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_SequenceGeneratorPN15",1,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_SequenceGeneratorPN15",1,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_SequenceGeneratorPN15(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ScramblerDescramblergCRC24(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ScramblerDescramblergCRC24",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ScramblerDescramblergCRC24",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ScramblerDescramblergCRC24",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblergCRC24",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblergCRC24",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_ScramblerDescramblergCRC24(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SequenceGeneratorgCRC24(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt32_t *arg1 = (SLUInt32_t *) 0 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_SequenceGeneratorgCRC24",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_SequenceGeneratorgCRC24",1,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_SequenceGeneratorgCRC24",1,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_SequenceGeneratorgCRC24(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ScramblerDescramblergCRC16(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ScramblerDescramblergCRC16",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ScramblerDescramblergCRC16",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ScramblerDescramblergCRC16",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblergCRC16",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblergCRC16",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_ScramblerDescramblergCRC16(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SequenceGeneratorgCRC16(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt32_t *arg1 = (SLUInt32_t *) 0 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_SequenceGeneratorgCRC16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_SequenceGeneratorgCRC16",1,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_SequenceGeneratorgCRC16",1,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_SequenceGeneratorgCRC16(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ScramblerDescramblergCRC12(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ScramblerDescramblergCRC12",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ScramblerDescramblergCRC12",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ScramblerDescramblergCRC12",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblergCRC12",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblergCRC12",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_ScramblerDescramblergCRC12(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SequenceGeneratorgCRC12(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt32_t *arg1 = (SLUInt32_t *) 0 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_SequenceGeneratorgCRC12",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_SequenceGeneratorgCRC12",1,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_SequenceGeneratorgCRC12",1,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_SequenceGeneratorgCRC12(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ScramblerDescramblergCRC8(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_ScramblerDescramblergCRC8",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ScramblerDescramblergCRC8",1,"SLFixData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ScramblerDescramblergCRC8",2,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblergCRC8",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_ScramblerDescramblergCRC8",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_ScramblerDescramblergCRC8(arg1,arg2);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SequenceGeneratorgCRC8(lua_State* L) {
  int SWIG_arg = 0;
  SLUInt32_t *arg1 = (SLUInt32_t *) 0 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_SequenceGeneratorgCRC8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_SequenceGeneratorgCRC8",1,"SLUInt32_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_SequenceGeneratorgCRC8",1,SWIGTYPE_p_SLUInt32_t);
  }
  
  result = SDS_SequenceGeneratorgCRC8(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_LongCodeGenerator3GPPDL(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLUInt32_t *arg3 = (SLUInt32_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDS_LongCodeGenerator3GPPDL",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_LongCodeGenerator3GPPDL",1,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_LongCodeGenerator3GPPDL",2,"SLUInt32_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_LongCodeGenerator3GPPDL",3,"SLUInt32_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_LongCodeGenerator3GPPDL",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_LongCodeGenerator3GPPDL",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_LongCodeGenerator3GPPDL",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_LongCodeGenerator3GPPDL",3,SWIGTYPE_p_SLUInt32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_LongCodeGenerator3GPPDL",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDS_LongCodeGenerator3GPPDL(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_LongCodeGenerator3GPPUL(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLUInt32_t *arg2 = (SLUInt32_t *) 0 ;
  SLUInt32_t *arg3 = (SLUInt32_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDS_LongCodeGenerator3GPPUL",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_LongCodeGenerator3GPPUL",1,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_LongCodeGenerator3GPPUL",2,"SLUInt32_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_LongCodeGenerator3GPPUL",3,"SLUInt32_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_LongCodeGenerator3GPPUL",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDS_LongCodeGenerator3GPPUL",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_LongCodeGenerator3GPPUL",2,SWIGTYPE_p_SLUInt32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLUInt32_t,0))){
    SWIG_fail_ptr("SDS_LongCodeGenerator3GPPUL",3,SWIGTYPE_p_SLUInt32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_LongCodeGenerator3GPPUL",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDS_LongCodeGenerator3GPPUL(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Multiplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Multiplex",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Multiplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Multiplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Multiplex",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Multiplex",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Multiplex",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Multiplex",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Multiplex",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Multiplex",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Multiplex",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Multiplex((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Demultiplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Demultiplex",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Demultiplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Demultiplex",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Demultiplex",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Demultiplex",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Demultiplex",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demultiplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demultiplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demultiplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demultiplex",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demultiplex",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Demultiplex((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Mux2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Mux2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Mux2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Mux2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Mux2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Mux2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Mux2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Mux2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Demux2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Demux2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Demux2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Demux2",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Demux2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Demux2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demux2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Demux2((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Mux3(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Mux3",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Mux3",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Mux3",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Mux3",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Mux3",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Mux3",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux3",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux3",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux3",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux3",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Mux3",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Mux3((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Demux3(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Demux3",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Demux3",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Demux3",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Demux3",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Demux3",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Demux3",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux3",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux3",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux3",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux3",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demux3",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Demux3((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Mux4(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Mux4",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Mux4",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Mux4",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Mux4",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Mux4",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Mux4",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Mux4",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux4",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux4",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux4",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux4",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux4",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Mux4",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Mux4((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Demux4(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Demux4",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Demux4",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Demux4",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Demux4",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Demux4",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Demux4",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Demux4",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux4",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux4",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux4",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux4",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux4",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demux4",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Demux4((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Mux5(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_Mux5",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Mux5",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Mux5",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Mux5",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Mux5",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Mux5",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Mux5",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Mux5",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux5",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux5",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux5",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux5",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux5",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux5",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Mux5",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_Mux5((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,(SLData_t const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Demux5(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_Demux5",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Demux5",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Demux5",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Demux5",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Demux5",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Demux5",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Demux5",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Demux5",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux5",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux5",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux5",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux5",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux5",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux5",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demux5",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_Demux5((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Mux6(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_Mux6",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Mux6",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Mux6",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Mux6",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Mux6",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Mux6",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Mux6",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_Mux6",7,"SLData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Mux6",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux6",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux6",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux6",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux6",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux6",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux6",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux6",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Mux6",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_Mux6((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,(SLData_t const *)arg5,(SLData_t const *)arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Demux6(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_Demux6",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Demux6",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Demux6",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Demux6",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Demux6",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Demux6",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Demux6",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_Demux6",7,"SLData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Demux6",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux6",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux6",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux6",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux6",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux6",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux6",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux6",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demux6",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_Demux6((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Mux7(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_Mux7",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Mux7",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Mux7",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Mux7",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Mux7",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Mux7",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Mux7",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_Mux7",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_Mux7",8,"SLData_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_Mux7",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux7",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux7",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux7",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux7",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux7",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux7",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux7",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux7",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Mux7",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_Mux7((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,(SLData_t const *)arg5,(SLData_t const *)arg6,(SLData_t const *)arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Demux7(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_Demux7",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Demux7",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Demux7",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Demux7",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Demux7",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Demux7",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Demux7",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_Demux7",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_Demux7",8,"SLData_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_Demux7",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux7",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux7",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux7",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux7",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux7",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux7",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux7",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux7",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demux7",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_Demux7((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Mux8(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDA_Mux8",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Mux8",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Mux8",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Mux8",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Mux8",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Mux8",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Mux8",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_Mux8",7,"SLData_t const *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_Mux8",8,"SLData_t const *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_Mux8",9,"SLData_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_Mux8",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mux8",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Mux8",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDA_Mux8((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,(SLData_t const *)arg5,(SLData_t const *)arg6,(SLData_t const *)arg7,(SLData_t const *)arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Demux8(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDA_Demux8",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Demux8",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Demux8",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Demux8",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Demux8",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Demux8",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Demux8",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_Demux8",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_Demux8",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_Demux8",9,"SLData_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_Demux8",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Demux8",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Demux8",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDA_Demux8((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Decimate(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  
  SWIG_check_num_args("SIF_Decimate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Decimate",1,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Decimate",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SIF_Decimate(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Decimate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLFixData_t arg3 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLFixData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Decimate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Decimate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Decimate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Decimate",3,"SLFixData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Decimate",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Decimate",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Decimate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Decimate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Decimate",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Decimate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Decimate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Decimate((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  
  SWIG_check_num_args("SIF_Interpolate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Interpolate",1,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Interpolate",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SIF_Interpolate(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLFixData_t arg3 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLFixData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Interpolate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Interpolate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Interpolate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Interpolate",3,"SLFixData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Interpolate",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Interpolate",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Interpolate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Interpolate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_Interpolate",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Interpolate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Interpolate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Interpolate((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FilterAndDecimate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_FilterAndDecimate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FilterAndDecimate",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_FilterAndDecimate",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_FilterAndDecimate",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_FilterAndDecimate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FilterAndDecimate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FilterAndDecimate",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FilterAndDecimate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FilterAndDecimate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_FilterAndDecimate(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FilterAndDecimate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLFixData_t arg3 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLFixData_t *argp3 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_FilterAndDecimate",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FilterAndDecimate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FilterAndDecimate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_FilterAndDecimate",3,"SLFixData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FilterAndDecimate",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_FilterAndDecimate",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_FilterAndDecimate",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_FilterAndDecimate",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_FilterAndDecimate",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_FilterAndDecimate",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FilterAndDecimate",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_FilterAndDecimate((SLData_t const *)arg1,arg2,arg3,arg4,arg5,(SLData_t const *)arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_InterpolateAndFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_InterpolateAndFilter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_InterpolateAndFilter",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_InterpolateAndFilter",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_InterpolateAndFilter",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_InterpolateAndFilter",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_InterpolateAndFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_InterpolateAndFilter",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_InterpolateAndFilter",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_InterpolateAndFilter",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_InterpolateAndFilter(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateAndFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLFixData_t arg3 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg7 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLFixData_t *argp3 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_InterpolateAndFilter",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateAndFilter",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_InterpolateAndFilter",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_InterpolateAndFilter",3,"SLFixData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_InterpolateAndFilter",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_InterpolateAndFilter",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_InterpolateAndFilter",6,"SLData_t const *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_InterpolateAndFilter",7,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_InterpolateAndFilter",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_InterpolateAndFilter",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateAndFilter",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_InterpolateAndFilter((SLData_t const *)arg1,arg2,arg3,arg4,arg5,(SLData_t const *)arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ResampleLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_ResampleLinear",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ResampleLinear",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ResampleLinear",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ResampleLinear",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ResampleLinear",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinear",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinear",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinear",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinear",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_ResampleLinear((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ResampleLinearNSamples(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_ResampleLinearNSamples",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ResampleLinearNSamples",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ResampleLinearNSamples",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ResampleLinearNSamples",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ResampleLinearNSamples",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ResampleLinearNSamples",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearNSamples",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearNSamples",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearNSamples",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearNSamples",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearNSamples",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_ResampleLinearNSamples((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateLinear1D(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateLinear1D",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateLinear1D",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_InterpolateLinear1D",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_InterpolateLinear1D",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateLinear1D",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateLinear1D",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateLinear1D",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_InterpolateLinear1D((SLData_t const *)arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateLinear2D(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateLinear2D",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateLinear2D",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_InterpolateLinear2D",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_InterpolateLinear2D",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_InterpolateLinear2D",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateLinear2D",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateLinear2D",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateLinear2D",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateLinear2D",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_InterpolateLinear2D((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ResampleSinc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_ResampleSinc",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ResampleSinc",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ResampleSinc",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_ResampleSinc",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_ResampleSinc",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleSinc",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleSinc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ResampleSinc",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ResampleSinc",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_ResampleSinc(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ResampleWindowedSinc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  enum SLWindow_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SIF_ResampleWindowedSinc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ResampleWindowedSinc",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ResampleWindowedSinc",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_ResampleWindowedSinc",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ResampleWindowedSinc",4,"SLData_t *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SIF_ResampleWindowedSinc",5,"enum SLWindow_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_ResampleWindowedSinc",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_ResampleWindowedSinc",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSinc",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSinc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSinc",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSinc",4,SWIGTYPE_p_SLData_t);
  }
  
  arg5 = (enum SLWindow_t const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSinc",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSinc",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SIF_ResampleWindowedSinc(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ResampleSinc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_ResampleSinc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ResampleSinc",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ResampleSinc",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ResampleSinc",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ResampleSinc",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ResampleSinc",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ResampleSinc",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ResampleSinc",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSinc",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSinc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSinc",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSinc",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSinc",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleSinc",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleSinc",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDA_ResampleSinc((SLData_t const *)arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ResampleSincNSamples(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_ResampleSincNSamples",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ResampleSincNSamples",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ResampleSincNSamples",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ResampleSincNSamples",3,"SLData_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ResampleSincNSamples",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ResampleSincNSamples",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ResampleSincNSamples",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ResampleSincNSamples",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_ResampleSincNSamples",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincNSamples",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincNSamples",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincNSamples",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincNSamples",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincNSamples",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincNSamples",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincNSamples",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincNSamples",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  result = SDA_ResampleSincNSamples((SLData_t const *)arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_InterpolateSinc1D(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_InterpolateSinc1D",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_InterpolateSinc1D",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_InterpolateSinc1D",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_InterpolateSinc1D",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_InterpolateSinc1D",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_InterpolateSinc1D",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_InterpolateSinc1D",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_InterpolateSinc1D",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_InterpolateSinc1D",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_InterpolateSinc1D(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_InterpolateWindowedSinc1D(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  enum SLWindow_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SIF_InterpolateWindowedSinc1D",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_InterpolateWindowedSinc1D",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_InterpolateWindowedSinc1D",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_InterpolateWindowedSinc1D",3,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_InterpolateWindowedSinc1D",4,"SLData_t *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SIF_InterpolateWindowedSinc1D",5,"enum SLWindow_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_InterpolateWindowedSinc1D",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_InterpolateWindowedSinc1D",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_InterpolateWindowedSinc1D",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_InterpolateWindowedSinc1D",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_InterpolateWindowedSinc1D",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_InterpolateWindowedSinc1D",4,SWIGTYPE_p_SLData_t);
  }
  
  arg5 = (enum SLWindow_t const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_InterpolateWindowedSinc1D",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_InterpolateWindowedSinc1D",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SIF_InterpolateWindowedSinc1D(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateSinc1D(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp2 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateSinc1D",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateSinc1D",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_InterpolateSinc1D",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_InterpolateSinc1D",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_InterpolateSinc1D",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_InterpolateSinc1D",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_InterpolateSinc1D",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateSinc1D",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateSinc1D",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateSinc1D",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateSinc1D",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateSinc1D",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateSinc1D",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_InterpolateSinc1D((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ResampleLinearContiguous(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIF_ResampleLinearContiguous",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ResampleLinearContiguous",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ResampleLinearContiguous",2,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleLinearContiguous",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleLinearContiguous",2,SWIGTYPE_p_SLData_t);
  }
  
  SIF_ResampleLinearContiguous(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ResampleLinearContiguous(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_ResampleLinearContiguous",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ResampleLinearContiguous",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ResampleLinearContiguous",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ResampleLinearContiguous",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ResampleLinearContiguous",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ResampleLinearContiguous",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ResampleLinearContiguous",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearContiguous",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearContiguous",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearContiguous",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearContiguous",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearContiguous",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleLinearContiguous",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_ResampleLinearContiguous((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ResampleSincContiguous(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SIF_ResampleSincContiguous",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ResampleSincContiguous",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ResampleSincContiguous",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_ResampleSincContiguous",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ResampleSincContiguous",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_ResampleSincContiguous",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_ResampleSincContiguous",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleSincContiguous",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleSincContiguous",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleSincContiguous",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleSincContiguous",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ResampleSincContiguous",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ResampleSincContiguous",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SIF_ResampleSincContiguous(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ResampleWindowedSincContiguous(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  enum SLWindow_t arg7 ;
  SLData_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SIF_ResampleWindowedSincContiguous",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",5,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",6,"SLData_t *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",7,"enum SLWindow_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",8,"SLData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SIF_ResampleWindowedSincContiguous",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSincContiguous",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSincContiguous",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSincContiguous",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSincContiguous",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSincContiguous",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSincContiguous",6,SWIGTYPE_p_SLData_t);
  }
  
  arg7 = (enum SLWindow_t const)(int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSincContiguous",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ResampleWindowedSincContiguous",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SIF_ResampleWindowedSincContiguous(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ResampleSincContiguous(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_ResampleSincContiguous",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ResampleSincContiguous",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ResampleSincContiguous",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ResampleSincContiguous",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ResampleSincContiguous",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ResampleSincContiguous",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ResampleSincContiguous",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ResampleSincContiguous",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_ResampleSincContiguous",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_ResampleSincContiguous",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ResampleSincContiguous",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  result = SDA_ResampleSincContiguous((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_InterpolateQuadratic1D(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_InterpolateQuadratic1D",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_InterpolateQuadratic1D",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_InterpolateQuadratic1D",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_InterpolateQuadratic1D",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_InterpolateQuadratic1D",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadratic1D",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadratic1D",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadratic1D",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadratic1D",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  result = SDS_InterpolateQuadratic1D(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_InterpolateQuadraticBSpline1D(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_InterpolateQuadraticBSpline1D",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_InterpolateQuadraticBSpline1D",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_InterpolateQuadraticBSpline1D",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_InterpolateQuadraticBSpline1D",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_InterpolateQuadraticBSpline1D",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadraticBSpline1D",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadraticBSpline1D",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadraticBSpline1D",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadraticBSpline1D",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  result = SDS_InterpolateQuadraticBSpline1D(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_InterpolateQuadraticLagrange1D(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_InterpolateQuadraticLagrange1D",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_InterpolateQuadraticLagrange1D",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_InterpolateQuadraticLagrange1D",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_InterpolateQuadraticLagrange1D",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_InterpolateQuadraticLagrange1D",4,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadraticLagrange1D",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadraticLagrange1D",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadraticLagrange1D",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateQuadraticLagrange1D",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  result = SDS_InterpolateQuadraticLagrange1D(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DtmfGenerate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *argp2 ;
  
  SWIG_check_num_args("SIF_DtmfGenerate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DtmfGenerate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_DtmfGenerate",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DtmfGenerate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DtmfGenerate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  SIF_DtmfGenerate(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DtmfGenerate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLFixData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLFixData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLError_t result;
  
  SWIG_check_num_args("SDA_DtmfGenerate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DtmfGenerate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_DtmfGenerate",2,"SLFixData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DtmfGenerate",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_DtmfGenerate",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DtmfGenerate",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DtmfGenerate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DtmfGenerate",2,SWIGTYPE_p_SLFixData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DtmfGenerate",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DtmfGenerate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DtmfGenerate",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_DtmfGenerate(arg1,arg2,arg3,(SLData_t const *)arg4,arg5);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DtmfDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLArrayIndex_t arg2 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_DtmfDetect",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SIF_DtmfDetect",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_DtmfDetect",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DtmfDetect",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DtmfDetect",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_DtmfDetect(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DtmfDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLStatus_t result;
  
  SWIG_check_num_args("SDA_DtmfDetect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DtmfDetect",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_DtmfDetect",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DtmfDetect",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DtmfDetect",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_DtmfDetect(arg1,arg2);
  {
    SLStatus_t * resultptr = new SLStatus_t((const SLStatus_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLStatus_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DtmfDetectAndValidate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLFixData_t *arg3 = (SLFixData_t *) 0 ;
  SLFixData_t *arg4 = (SLFixData_t *) 0 ;
  SLFixData_t *arg5 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp6 ;
  SLStatus_t result;
  
  SWIG_check_num_args("SDA_DtmfDetectAndValidate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DtmfDetectAndValidate",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_DtmfDetectAndValidate",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_DtmfDetectAndValidate",3,"SLFixData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_DtmfDetectAndValidate",4,"SLFixData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_DtmfDetectAndValidate",5,"SLFixData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_DtmfDetectAndValidate",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DtmfDetectAndValidate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DtmfDetectAndValidate",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DtmfDetectAndValidate",3,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DtmfDetectAndValidate",4,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_DtmfDetectAndValidate",5,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DtmfDetectAndValidate",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_DtmfDetectAndValidate(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLStatus_t * resultptr = new SLStatus_t((const SLStatus_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLStatus_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_AsciiToKeyCode(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SUF_AsciiToKeyCode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_AsciiToKeyCode",1,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SUF_AsciiToKeyCode",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  result = SUF_AsciiToKeyCode(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_KeyCodeToAscii(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SUF_KeyCodeToAscii",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_KeyCodeToAscii",1,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SUF_KeyCodeToAscii",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  result = SUF_KeyCodeToAscii(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_PreEmphasisFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIF_PreEmphasisFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_PreEmphasisFilter",1,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_PreEmphasisFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  SIF_PreEmphasisFilter(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PreEmphasisFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_PreEmphasisFilter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PreEmphasisFilter",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PreEmphasisFilter",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PreEmphasisFilter",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_PreEmphasisFilter",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_PreEmphasisFilter",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PreEmphasisFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PreEmphasisFilter",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PreEmphasisFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PreEmphasisFilter",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PreEmphasisFilter",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_PreEmphasisFilter(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DeEmphasisFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIF_DeEmphasisFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DeEmphasisFilter",1,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DeEmphasisFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  SIF_DeEmphasisFilter(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DeEmphasisFilter(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_DeEmphasisFilter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DeEmphasisFilter",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DeEmphasisFilter",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DeEmphasisFilter",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_DeEmphasisFilter",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DeEmphasisFilter",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeEmphasisFilter",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeEmphasisFilter",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeEmphasisFilter",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeEmphasisFilter",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DeEmphasisFilter",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_DeEmphasisFilter(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AdpcmEncoder(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_AdpcmEncoder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AdpcmEncoder",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AdpcmEncoder",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AdpcmEncoder",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AdpcmEncoder",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AdpcmEncoder",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AdpcmEncoder",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_AdpcmEncoder((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AdpcmEncoderDebug(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_AdpcmEncoderDebug",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AdpcmEncoderDebug",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AdpcmEncoderDebug",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_AdpcmEncoderDebug",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_AdpcmEncoderDebug",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AdpcmEncoderDebug",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AdpcmEncoderDebug",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AdpcmEncoderDebug",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AdpcmEncoderDebug",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_AdpcmEncoderDebug((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AdpcmDecoder(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_AdpcmDecoder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AdpcmDecoder",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AdpcmDecoder",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AdpcmDecoder",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AdpcmDecoder",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AdpcmDecoder",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AdpcmDecoder",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_AdpcmDecoder((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Max(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_Max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Max",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Max",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Max",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Max",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_Max((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_AbsMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsMax",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_AbsMax",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMax",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsMax",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_AbsMax((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Min(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_Min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Min",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Min",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Min",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Min",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_Min((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsMin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_AbsMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsMin",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_AbsMin",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsMin",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_AbsMin((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Middle(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_Middle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Middle",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Middle",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Middle",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Middle",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_Middle((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Range(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_Range",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Range",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Range",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Range",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Range",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_Range((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MaxIndex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_MaxIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MaxIndex",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_MaxIndex",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MaxIndex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MaxIndex",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_MaxIndex((SLData_t const *)arg1,arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsMaxIndex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_AbsMaxIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsMaxIndex",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_AbsMaxIndex",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMaxIndex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsMaxIndex",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_AbsMaxIndex((SLData_t const *)arg1,arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MinIndex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_MinIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MinIndex",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_MinIndex",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MinIndex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MinIndex",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_MinIndex((SLData_t const *)arg1,arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsMinIndex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_AbsMinIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsMinIndex",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_AbsMinIndex",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMinIndex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsMinIndex",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_AbsMinIndex((SLData_t const *)arg1,arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Max(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Max",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Max",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Max",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Max",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Max",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_Max(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_AbsMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_AbsMax",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_AbsMax",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_AbsMax",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AbsMax",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AbsMax",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_AbsMax(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Min(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Min",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Min",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Min",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Min",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Min",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_Min(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_AbsMin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_AbsMin",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_AbsMin",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_AbsMin",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AbsMin",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AbsMin",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_AbsMin(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LocalMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LocalMax",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LocalMax",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LocalMax",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LocalMax",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LocalMax",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LocalMax",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalMax",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalMax",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalMax",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_LocalMax((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LocalAbsMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LocalAbsMax",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LocalAbsMax",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LocalAbsMax",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LocalAbsMax",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LocalAbsMax",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LocalAbsMax",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalAbsMax",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalAbsMax",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalAbsMax",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_LocalAbsMax((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LocalMin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LocalMin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LocalMin",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LocalMin",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LocalMin",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LocalMin",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LocalMin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalMin",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalMin",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalMin",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_LocalMin((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LocalAbsMin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LocalAbsMin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LocalAbsMin",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LocalAbsMin",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LocalAbsMin",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LocalAbsMin",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LocalAbsMin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalAbsMin",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalAbsMin",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LocalAbsMin",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_LocalAbsMin((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Max2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Max2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Max2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Max2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Max2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Max2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Max2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Max2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Max2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Max2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Max2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsMax2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_AbsMax2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsMax2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AbsMax2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_AbsMax2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_AbsMax2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMax2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMax2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMax2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsMax2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_AbsMax2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignedAbsMax2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SignedAbsMax2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignedAbsMax2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SignedAbsMax2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SignedAbsMax2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SignedAbsMax2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignedAbsMax2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignedAbsMax2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignedAbsMax2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignedAbsMax2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SignedAbsMax2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Min2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Min2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Min2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Min2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Min2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Min2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Min2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Min2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Min2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Min2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Min2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsMin2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_AbsMin2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsMin2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AbsMin2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_AbsMin2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_AbsMin2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMin2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMin2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMin2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsMin2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_AbsMin2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SignedAbsMin2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SignedAbsMin2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SignedAbsMin2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SignedAbsMin2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SignedAbsMin2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SignedAbsMin2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignedAbsMin2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignedAbsMin2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SignedAbsMin2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SignedAbsMin2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SignedAbsMin2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PeakHold(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_PeakHold",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PeakHold",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PeakHold",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PeakHold",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_PeakHold",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_PeakHold",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakHold",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakHold",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakHold",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakHold",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PeakHold",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_PeakHold((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PeakHoldPerSample(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_PeakHoldPerSample",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PeakHoldPerSample",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PeakHoldPerSample",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PeakHoldPerSample",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_PeakHoldPerSample",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakHoldPerSample",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakHoldPerSample",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakHoldPerSample",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PeakHoldPerSample",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_PeakHoldPerSample((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DetectFirstPeakOverThreshold(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_DetectFirstPeakOverThreshold",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DetectFirstPeakOverThreshold",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_DetectFirstPeakOverThreshold",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DetectFirstPeakOverThreshold",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DetectFirstPeakOverThreshold",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DetectFirstPeakOverThreshold",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DetectFirstPeakOverThreshold",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_DetectFirstPeakOverThreshold((SLData_t const *)arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Round(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  enum SLRoundingMode_t arg2 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Round",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Round",1,"SLData_t const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SDS_Round",2,"enum SLRoundingMode_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Round",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  arg2 = (enum SLRoundingMode_t const)(int)lua_tonumber(L, 2);
  result = SDS_Round(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Round(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  enum SLRoundingMode_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Round",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Round",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Round",2,"SLData_t *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDA_Round",3,"enum SLRoundingMode_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Round",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Round",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Round",2,SWIGTYPE_p_SLData_t);
  }
  
  arg3 = (enum SLRoundingMode_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Round",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Round((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Clip(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  enum SLClipMode_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Clip",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Clip",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Clip",2,"SLData_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDS_Clip",3,"enum SLClipMode_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Clip",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Clip",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (enum SLClipMode_t const)(int)lua_tonumber(L, 3);
  result = SDS_Clip(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Clip(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  enum SLClipMode_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Clip",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Clip",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Clip",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Clip",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_Clip",4,"enum SLClipMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Clip",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Clip",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Clip",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Clip",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLClipMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Clip",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Clip((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Threshold(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  enum SLThresholdMode_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Threshold",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Threshold",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Threshold",2,"SLData_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDS_Threshold",3,"enum SLThresholdMode_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Threshold",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Threshold",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (enum SLThresholdMode_t const)(int)lua_tonumber(L, 3);
  result = SDS_Threshold(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Threshold(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  enum SLThresholdMode_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Threshold",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Threshold",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Threshold",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Threshold",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_Threshold",4,"enum SLThresholdMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Threshold",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Threshold",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Threshold",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Threshold",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLThresholdMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Threshold",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Threshold((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SoftThreshold(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_SoftThreshold",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_SoftThreshold",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_SoftThreshold",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SoftThreshold",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SoftThreshold",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_SoftThreshold(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SoftThreshold(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SoftThreshold",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SoftThreshold",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SoftThreshold",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SoftThreshold",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SoftThreshold",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SoftThreshold",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SoftThreshold",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SoftThreshold",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SoftThreshold",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SoftThreshold((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ThresholdAndClamp(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  enum SLThresholdMode_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ThresholdAndClamp",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ThresholdAndClamp",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ThresholdAndClamp",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_ThresholdAndClamp",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDS_ThresholdAndClamp",4,"enum SLThresholdMode_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ThresholdAndClamp",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ThresholdAndClamp",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ThresholdAndClamp",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLThresholdMode_t const)(int)lua_tonumber(L, 4);
  result = SDS_ThresholdAndClamp(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ThresholdAndClamp(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  enum SLThresholdMode_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_ThresholdAndClamp",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ThresholdAndClamp",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ThresholdAndClamp",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ThresholdAndClamp",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ThresholdAndClamp",4,"SLData_t const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SDA_ThresholdAndClamp",5,"enum SLThresholdMode_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ThresholdAndClamp",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ThresholdAndClamp",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ThresholdAndClamp",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ThresholdAndClamp",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ThresholdAndClamp",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  arg5 = (enum SLThresholdMode_t const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ThresholdAndClamp",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_ThresholdAndClamp((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Clamp(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  enum SLThresholdMode_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Clamp",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Clamp",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Clamp",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Clamp",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDS_Clamp",4,"enum SLThresholdMode_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Clamp",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Clamp",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Clamp",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLThresholdMode_t const)(int)lua_tonumber(L, 4);
  result = SDS_Clamp(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Clamp(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  enum SLThresholdMode_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Clamp",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Clamp",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Clamp",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Clamp",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Clamp",4,"SLData_t const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SDA_Clamp",5,"enum SLThresholdMode_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Clamp",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Clamp",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Clamp",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Clamp",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Clamp",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  arg5 = (enum SLThresholdMode_t const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Clamp",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Clamp((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TestOverThreshold(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_TestOverThreshold",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TestOverThreshold",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_TestOverThreshold",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_TestOverThreshold",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TestOverThreshold",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TestOverThreshold",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TestOverThreshold",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_TestOverThreshold((SLData_t const *)arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TestAbsOverThreshold(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_TestAbsOverThreshold",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TestAbsOverThreshold",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_TestAbsOverThreshold",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_TestAbsOverThreshold",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TestAbsOverThreshold",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TestAbsOverThreshold",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TestAbsOverThreshold",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_TestAbsOverThreshold((SLData_t const *)arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SelectMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SelectMax",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SelectMax",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SelectMax",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SelectMax",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SelectMax",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMax",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMax",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMax",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SelectMax",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SelectMax((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SelectMin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SelectMin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SelectMin",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SelectMin",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SelectMin",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SelectMin",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMin",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SelectMin",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SelectMin((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SelectMagnitudeSquaredMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_SelectMagnitudeSquaredMax",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMax",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMax",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMax",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMax",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMax",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMax",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMax",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMax",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMax",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMax",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMax",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMax",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMax",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMax",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_SelectMagnitudeSquaredMax((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SelectMagnitudeSquaredMin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_SelectMagnitudeSquaredMin",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMin",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMin",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMin",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMin",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMin",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMin",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_SelectMagnitudeSquaredMin",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMin",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMin",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMin",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMin",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SelectMagnitudeSquaredMin",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_SelectMagnitudeSquaredMin((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SetMinValue(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_SetMinValue",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_SetMinValue",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_SetMinValue",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SetMinValue",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SetMinValue",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_SetMinValue(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SetMinValue(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SetMinValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SetMinValue",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SetMinValue",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SetMinValue",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SetMinValue",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMinValue",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMinValue",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMinValue",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SetMinValue",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SetMinValue((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PeakToAverageRatio(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PeakToAverageRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PeakToAverageRatio",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_PeakToAverageRatio",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAverageRatio",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PeakToAverageRatio",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_PeakToAverageRatio((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PeakToAveragePowerRatio(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PeakToAveragePowerRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PeakToAveragePowerRatio",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_PeakToAveragePowerRatio",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatio",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatio",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_PeakToAveragePowerRatio((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PeakToAveragePowerRatioDB(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PeakToAveragePowerRatioDB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PeakToAveragePowerRatioDB",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_PeakToAveragePowerRatioDB",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatioDB",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatioDB",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_PeakToAveragePowerRatioDB((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PeakToAverageRatioComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PeakToAverageRatioComplex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PeakToAverageRatioComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PeakToAverageRatioComplex",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PeakToAverageRatioComplex",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAverageRatioComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAverageRatioComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PeakToAverageRatioComplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_PeakToAverageRatioComplex((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PeakToAveragePowerRatioComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PeakToAveragePowerRatioComplex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PeakToAveragePowerRatioComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PeakToAveragePowerRatioComplex",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PeakToAveragePowerRatioComplex",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatioComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatioComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatioComplex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_PeakToAveragePowerRatioComplex((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PeakToAveragePowerRatioComplexDB(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PeakToAveragePowerRatioComplexDB",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PeakToAveragePowerRatioComplexDB",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PeakToAveragePowerRatioComplexDB",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PeakToAveragePowerRatioComplexDB",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatioComplexDB",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatioComplexDB",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PeakToAveragePowerRatioComplexDB",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_PeakToAveragePowerRatioComplexDB((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MovePeakTowardsDeadBand(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_MovePeakTowardsDeadBand",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MovePeakTowardsDeadBand",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MovePeakTowardsDeadBand",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_MovePeakTowardsDeadBand",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_MovePeakTowardsDeadBand",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_MovePeakTowardsDeadBand",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MovePeakTowardsDeadBand",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MovePeakTowardsDeadBand",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MovePeakTowardsDeadBand",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MovePeakTowardsDeadBand",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MovePeakTowardsDeadBand",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_MovePeakTowardsDeadBand((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Envelope(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIF_Envelope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Envelope",1,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Envelope",1,SWIGTYPE_p_SLData_t);
  }
  
  SIF_Envelope(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Envelope(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Envelope",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Envelope",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Envelope",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Envelope",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_Envelope",4,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Envelope",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Envelope",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Envelope",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Envelope",4,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_Envelope(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Envelope(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Envelope",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Envelope",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Envelope",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Envelope",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Envelope",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Envelope",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Envelope",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Envelope",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Envelope",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Envelope",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Envelope",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Envelope",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Envelope",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Envelope((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_EnvelopeRMS(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  
  SWIG_check_num_args("SIF_EnvelopeRMS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_EnvelopeRMS",1,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EnvelopeRMS",1,SWIGTYPE_p_SLData_t);
  }
  
  SIF_EnvelopeRMS(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_EnvelopeRMS(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_EnvelopeRMS",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_EnvelopeRMS",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_EnvelopeRMS",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_EnvelopeRMS",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_EnvelopeRMS",4,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeRMS",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeRMS",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeRMS",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeRMS",4,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_EnvelopeRMS(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_EnvelopeRMS(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_EnvelopeRMS",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_EnvelopeRMS",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_EnvelopeRMS",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_EnvelopeRMS",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_EnvelopeRMS",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_EnvelopeRMS",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_EnvelopeRMS",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeRMS",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeRMS",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeRMS",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeRMS",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeRMS",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeRMS",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_EnvelopeRMS((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_EnvelopeHilbert(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SIF_EnvelopeHilbert",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_EnvelopeHilbert",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_EnvelopeHilbert",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_EnvelopeHilbert",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_EnvelopeHilbert",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SIF_EnvelopeHilbert",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SIF_EnvelopeHilbert",6,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SIF_EnvelopeHilbert",7,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EnvelopeHilbert",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EnvelopeHilbert",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EnvelopeHilbert",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EnvelopeHilbert",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EnvelopeHilbert",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_EnvelopeHilbert",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_EnvelopeHilbert",7,SWIGTYPE_p_SLData_t);
  }
  
  SIF_EnvelopeHilbert(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_EnvelopeHilbert(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg6 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t arg9 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLData_t *argp9 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_EnvelopeHilbert",10,10)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_EnvelopeHilbert",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_EnvelopeHilbert",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_EnvelopeHilbert",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_EnvelopeHilbert",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_EnvelopeHilbert",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_EnvelopeHilbert",6,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_EnvelopeHilbert",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDS_EnvelopeHilbert",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDS_EnvelopeHilbert",9,"SLData_t const");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDS_EnvelopeHilbert",10,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EnvelopeHilbert",10,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_EnvelopeHilbert(arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_EnvelopeHilbert(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLData_t arg11 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  SLData_t *argp11 ;
  SLArrayIndex_t *argp13 ;
  
  SWIG_check_num_args("SDA_EnvelopeHilbert",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_EnvelopeHilbert",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_EnvelopeHilbert",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_EnvelopeHilbert",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_EnvelopeHilbert",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_EnvelopeHilbert",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_EnvelopeHilbert",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_EnvelopeHilbert",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_EnvelopeHilbert",8,"SLData_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_EnvelopeHilbert",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_EnvelopeHilbert",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_EnvelopeHilbert",11,"SLData_t const");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_EnvelopeHilbert",12,"SLData_t *");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_EnvelopeHilbert",13,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",11,SWIGTYPE_p_SLData_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_EnvelopeHilbert",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  SDA_EnvelopeHilbert((SLData_t const *)arg1,arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_InterpolateThreePointQuadraticVertexMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_InterpolateThreePointQuadraticVertexMagnitude",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_InterpolateThreePointQuadraticVertexMagnitude",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_InterpolateThreePointQuadraticVertexMagnitude",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_InterpolateThreePointQuadraticVertexMagnitude",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateThreePointQuadraticVertexMagnitude",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateThreePointQuadraticVertexMagnitude",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateThreePointQuadraticVertexMagnitude",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_InterpolateThreePointQuadraticVertexMagnitude(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_InterpolateThreePointQuadraticVertexLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_InterpolateThreePointQuadraticVertexLocation",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_InterpolateThreePointQuadraticVertexLocation",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_InterpolateThreePointQuadraticVertexLocation",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_InterpolateThreePointQuadraticVertexLocation",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateThreePointQuadraticVertexLocation",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateThreePointQuadraticVertexLocation",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateThreePointQuadraticVertexLocation",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_InterpolateThreePointQuadraticVertexLocation(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",6,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  result = SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_InterpolateArbitraryThreePointQuadraticVertexLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",6,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_InterpolateArbitraryThreePointQuadraticVertexLocation",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  result = SDS_InterpolateArbitraryThreePointQuadraticVertexLocation(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateThreePointQuadraticVertexMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateThreePointQuadraticVertexMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateThreePointQuadraticVertexMagnitude",1,"SLData_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateThreePointQuadraticVertexMagnitude",1,SWIGTYPE_p_SLData_t);
  }
  
  result = SDA_InterpolateThreePointQuadraticVertexMagnitude((SLData_t const *)arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateThreePointQuadraticVertexLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateThreePointQuadraticVertexLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateThreePointQuadraticVertexLocation",1,"SLData_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateThreePointQuadraticVertexLocation",1,SWIGTYPE_p_SLData_t);
  }
  
  result = SDA_InterpolateThreePointQuadraticVertexLocation((SLData_t const *)arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateArbitraryThreePointQuadraticVertexLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateArbitraryThreePointQuadraticVertexLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateArbitraryThreePointQuadraticVertexLocation",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_InterpolateArbitraryThreePointQuadraticVertexLocation",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateArbitraryThreePointQuadraticVertexLocation",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateArbitraryThreePointQuadraticVertexLocation",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_InterpolateArbitraryThreePointQuadraticVertexLocation((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirstMinVertex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_FirstMinVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirstMinVertex",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FirstMinVertex",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstMinVertex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirstMinVertex",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_FirstMinVertex((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirstMinVertexPos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FirstMinVertexPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirstMinVertexPos",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FirstMinVertexPos",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstMinVertexPos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirstMinVertexPos",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_FirstMinVertexPos((SLData_t const *)arg1,arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirstMaxVertex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_FirstMaxVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirstMaxVertex",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FirstMaxVertex",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstMaxVertex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirstMaxVertex",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_FirstMaxVertex((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirstMaxVertexPos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FirstMaxVertexPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirstMaxVertexPos",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FirstMaxVertexPos",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstMaxVertexPos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirstMaxVertexPos",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_FirstMaxVertexPos((SLData_t const *)arg1,arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_NLargest(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_NLargest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_NLargest",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_NLargest",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_NLargest",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_NLargest",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NLargest",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NLargest",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_NLargest",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_NLargest",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_NLargest((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_NSmallest(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_NSmallest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_NSmallest",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_NSmallest",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_NSmallest",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_NSmallest",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NSmallest",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NSmallest",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_NSmallest",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_NSmallest",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_NSmallest((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Divide(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Divide",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Divide",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Divide",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Divide",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Divide",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Divide",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Divide",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Divide",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Divide",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Divide((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Divide2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Divide2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Divide2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Divide2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Divide2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Divide2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Divide2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Divide2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Divide2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Divide2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Divide2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Multiply(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Multiply",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Multiply",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Multiply",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Multiply",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Multiply",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiply",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiply",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiply",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Multiply",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Multiply((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Multiply2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Multiply2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Multiply2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Multiply2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Multiply2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Multiply2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiply2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiply2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Multiply2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Multiply2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Multiply2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ComplexMultiply(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  
  SWIG_check_num_args("SDS_ComplexMultiply",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ComplexMultiply",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ComplexMultiply",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_ComplexMultiply",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_ComplexMultiply",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_ComplexMultiply",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_ComplexMultiply",6,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexMultiply",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexMultiply",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexMultiply",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexMultiply",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexMultiply",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexMultiply",6,SWIGTYPE_p_SLData_t);
  }
  
  SDS_ComplexMultiply(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ComplexInverse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  
  SWIG_check_num_args("SDS_ComplexInverse",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ComplexInverse",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ComplexInverse",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_ComplexInverse",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_ComplexInverse",4,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexInverse",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexInverse",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexInverse",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexInverse",4,SWIGTYPE_p_SLData_t);
  }
  
  SDS_ComplexInverse(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexInverse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_ComplexInverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexInverse",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexInverse",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexInverse",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexInverse",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ComplexInverse",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexInverse",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexInverse",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexInverse",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexInverse",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexInverse",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_ComplexInverse((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ComplexDivide(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  
  SWIG_check_num_args("SDS_ComplexDivide",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ComplexDivide",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ComplexDivide",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_ComplexDivide",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_ComplexDivide",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_ComplexDivide",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_ComplexDivide",6,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexDivide",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexDivide",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexDivide",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexDivide",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexDivide",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ComplexDivide",6,SWIGTYPE_p_SLData_t);
  }
  
  SDS_ComplexDivide(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexScalarMultiply(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_ComplexScalarMultiply",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexScalarMultiply",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexScalarMultiply",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexScalarMultiply",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexScalarMultiply",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ComplexScalarMultiply",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ComplexScalarMultiply",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarMultiply",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarMultiply",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarMultiply",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarMultiply",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarMultiply",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarMultiply",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_ComplexScalarMultiply((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexMultiply2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_ComplexMultiply2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexMultiply2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexMultiply2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexMultiply2",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexMultiply2",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ComplexMultiply2",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ComplexMultiply2",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ComplexMultiply2",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexMultiply2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexMultiply2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexMultiply2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexMultiply2",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexMultiply2",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexMultiply2",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexMultiply2",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_ComplexMultiply2((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexScalarDivide(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_ComplexScalarDivide",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexScalarDivide",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexScalarDivide",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexScalarDivide",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexScalarDivide",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ComplexScalarDivide",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ComplexScalarDivide",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarDivide",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarDivide",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarDivide",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarDivide",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarDivide",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarDivide",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_ComplexScalarDivide((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexDivide2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_ComplexDivide2",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexDivide2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexDivide2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexDivide2",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexDivide2",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_ComplexDivide2",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_ComplexDivide2",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ComplexDivide2",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDivide2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDivide2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDivide2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDivide2",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDivide2",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDivide2",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexDivide2",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_ComplexDivide2((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RealDotProduct(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_RealDotProduct",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RealDotProduct",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RealDotProduct",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_RealDotProduct",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealDotProduct",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealDotProduct",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RealDotProduct",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_RealDotProduct((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexDotProduct(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SDA_ComplexDotProduct",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexDotProduct",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexDotProduct",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexDotProduct",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexDotProduct",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ComplexDotProduct",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDotProduct",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDotProduct",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDotProduct",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexDotProduct",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexDotProduct",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_ComplexDotProduct((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SumAndDifference(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_SumAndDifference",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SumAndDifference",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SumAndDifference",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SumAndDifference",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_SumAndDifference",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SumAndDifference",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumAndDifference",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumAndDifference",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumAndDifference",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumAndDifference",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SumAndDifference",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_SumAndDifference((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Add2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Add2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Add2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Add2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Add2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Add2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Add2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Add2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Add3(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Add3",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Add3",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Add3",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Add3",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Add3",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Add3",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add3",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add3",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add3",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add3",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Add3",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Add3((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Add4(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Add4",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Add4",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Add4",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Add4",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Add4",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Add4",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Add4",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add4",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add4",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add4",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add4",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add4",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Add4",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Add4((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Add5(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_Add5",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Add5",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Add5",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Add5",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Add5",4,"SLData_t const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_Add5",5,"SLData_t const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_Add5",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Add5",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add5",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add5",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add5",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add5",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add5",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add5",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Add5",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_Add5((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,(SLData_t const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_WeightedSum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_WeightedSum",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_WeightedSum",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_WeightedSum",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_WeightedSum",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_WeightedSum",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_WeightedSum",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WeightedSum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WeightedSum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WeightedSum",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_WeightedSum",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_WeightedSum",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_WeightedSum((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Subtract2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Subtract2",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Subtract2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Subtract2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Subtract2",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Subtract2",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Subtract2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Subtract2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Subtract2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Subtract2",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Subtract2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Add(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Add",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Add",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Add",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Add",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Add",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Add",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Add",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Add((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PositiveOffset(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PositiveOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PositiveOffset",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PositiveOffset",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PositiveOffset",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PositiveOffset",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PositiveOffset",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PositiveOffset",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_PositiveOffset((SLData_t const *)arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_NegativeOffset(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_NegativeOffset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_NegativeOffset",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_NegativeOffset",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_NegativeOffset",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NegativeOffset",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_NegativeOffset",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_NegativeOffset",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_NegativeOffset((SLData_t const *)arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Negate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Negate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Negate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Negate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Negate",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Negate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Negate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Negate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Negate((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Inverse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Inverse",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Inverse",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Inverse",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Inverse",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Inverse",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Inverse",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Inverse((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Square(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Square",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Square",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Square",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Square",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Square",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Square",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Square",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Square((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Sqrt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Sqrt",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Sqrt",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Sqrt",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sqrt",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sqrt",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Sqrt",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Sqrt((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Difference(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Difference",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Difference",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Difference",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Difference",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Difference",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Difference",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Difference",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Difference",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Difference",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Difference((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SumOfDifferences(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_SumOfDifferences",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SumOfDifferences",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SumOfDifferences",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SumOfDifferences",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumOfDifferences",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumOfDifferences",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SumOfDifferences",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_SumOfDifferences((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Roots(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLError_t result;
  
  SWIG_check_num_args("SDS_Roots",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Roots",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Roots",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Roots",3,"SLData_t const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_Roots",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_Roots",5,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Roots",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Roots",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Roots",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Roots",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Roots",5,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_Roots(arg1,arg2,arg3,arg4,arg5);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Factorial(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Factorial",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Factorial",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Factorial",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_Factorial(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Permutations(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Permutations",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Permutations",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Permutations",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Permutations",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Permutations",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_Permutations(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Combinations(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Combinations",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Combinations",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Combinations",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Combinations",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Combinations",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_Combinations(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_OverlapAndAddLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_OverlapAndAddLinear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_OverlapAndAddLinear",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_OverlapAndAddLinear",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OverlapAndAddLinear",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_OverlapAndAddLinear",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_OverlapAndAddLinear(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OverlapAndAddLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_OverlapAndAddLinear",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OverlapAndAddLinear",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OverlapAndAddLinear",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_OverlapAndAddLinear",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_OverlapAndAddLinear",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OverlapAndAddLinear",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinear",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinear",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinear",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinear",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinear",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_OverlapAndAddLinear((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OverlapAndAddLinearWithClip(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_OverlapAndAddLinearWithClip",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OverlapAndAddLinearWithClip",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OverlapAndAddLinearWithClip",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_OverlapAndAddLinearWithClip",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_OverlapAndAddLinearWithClip",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OverlapAndAddLinearWithClip",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_OverlapAndAddLinearWithClip",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinearWithClip",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinearWithClip",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinearWithClip",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinearWithClip",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinearWithClip",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddLinearWithClip",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_OverlapAndAddLinearWithClip((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OverlapAndAddArbitrary(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_OverlapAndAddArbitrary",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OverlapAndAddArbitrary",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OverlapAndAddArbitrary",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_OverlapAndAddArbitrary",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_OverlapAndAddArbitrary",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OverlapAndAddArbitrary",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitrary",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitrary",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitrary",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitrary",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitrary",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_OverlapAndAddArbitrary((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OverlapAndAddArbitraryWithClip(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_OverlapAndAddArbitraryWithClip",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OverlapAndAddArbitraryWithClip",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OverlapAndAddArbitraryWithClip",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_OverlapAndAddArbitraryWithClip",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_OverlapAndAddArbitraryWithClip",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OverlapAndAddArbitraryWithClip",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_OverlapAndAddArbitraryWithClip",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitraryWithClip",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitraryWithClip",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitraryWithClip",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitraryWithClip",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitraryWithClip",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OverlapAndAddArbitraryWithClip",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_OverlapAndAddArbitraryWithClip((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_DegreesToRadians(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_DegreesToRadians",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_DegreesToRadians",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_DegreesToRadians",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_DegreesToRadians(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DegreesToRadians(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_DegreesToRadians",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DegreesToRadians",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DegreesToRadians",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_DegreesToRadians",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DegreesToRadians",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DegreesToRadians",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DegreesToRadians",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_DegreesToRadians((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_RadiansToDegrees(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_RadiansToDegrees",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_RadiansToDegrees",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_RadiansToDegrees",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_RadiansToDegrees(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RadiansToDegrees(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_RadiansToDegrees",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RadiansToDegrees",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RadiansToDegrees",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_RadiansToDegrees",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RadiansToDegrees",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RadiansToDegrees",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RadiansToDegrees",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_RadiansToDegrees((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_DetectNAN(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDS_DetectNAN",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_DetectNAN",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_DetectNAN",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_DetectNAN(arg1);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DetectNAN(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_DetectNAN",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DetectNAN",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_DetectNAN",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DetectNAN",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DetectNAN",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_DetectNAN((SLData_t const *)arg1,arg2);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Rotate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Rotate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Rotate",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Rotate",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Rotate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rotate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Rotate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rotate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Rotate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Rotate((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Reverse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Reverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Reverse",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Reverse",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Reverse",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Reverse",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Reverse",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Reverse",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Reverse((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Scale(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Scale",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Scale",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Scale",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Scale",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Scale",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Scale",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Scale",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Scale",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_Scale((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MeanSquare(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_MeanSquare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MeanSquare",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_MeanSquare",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MeanSquare",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MeanSquare",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_MeanSquare((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MeanSquareError(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_MeanSquareError",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MeanSquareError",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MeanSquareError",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_MeanSquareError",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_MeanSquareError",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MeanSquareError",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MeanSquareError",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MeanSquareError",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MeanSquareError",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_MeanSquareError((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RootMeanSquare(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_RootMeanSquare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RootMeanSquare",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_RootMeanSquare",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RootMeanSquare",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RootMeanSquare",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_RootMeanSquare((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Magnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Magnitude",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Magnitude",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Magnitude",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Magnitude",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Magnitude",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Magnitude",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Magnitude",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Magnitude",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Magnitude",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Magnitude((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MagnitudeSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_MagnitudeSquared",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MagnitudeSquared",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MagnitudeSquared",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_MagnitudeSquared",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_MagnitudeSquared",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquared",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquared",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquared",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquared",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_MagnitudeSquared((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Magnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Magnitude",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Magnitude",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Magnitude",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Magnitude",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Magnitude",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_Magnitude(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_MagnitudeSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_MagnitudeSquared",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_MagnitudeSquared",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_MagnitudeSquared",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_MagnitudeSquared",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_MagnitudeSquared",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_MagnitudeSquared(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Phase(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Phase",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Phase",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Phase",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Phase",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Phase",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_Phase(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PhaseWrapped(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_PhaseWrapped",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PhaseWrapped",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PhaseWrapped",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_PhaseWrapped",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_PhaseWrapped",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseWrapped",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseWrapped",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseWrapped",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseWrapped",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_PhaseWrapped((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PhaseUnWrapped(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_PhaseUnWrapped",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PhaseUnWrapped",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PhaseUnWrapped",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_PhaseUnWrapped",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_PhaseUnWrapped",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseUnWrapped",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseUnWrapped",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseUnWrapped",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseUnWrapped",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_PhaseUnWrapped((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MagnitudeAndPhaseWrapped(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_MagnitudeAndPhaseWrapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MagnitudeAndPhaseWrapped",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MagnitudeAndPhaseWrapped",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_MagnitudeAndPhaseWrapped",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_MagnitudeAndPhaseWrapped",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_MagnitudeAndPhaseWrapped",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseWrapped",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseWrapped",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseWrapped",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseWrapped",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseWrapped",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_MagnitudeAndPhaseWrapped((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MagnitudeAndPhaseUnWrapped(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_MagnitudeAndPhaseUnWrapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MagnitudeAndPhaseUnWrapped",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MagnitudeAndPhaseUnWrapped",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_MagnitudeAndPhaseUnWrapped",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_MagnitudeAndPhaseUnWrapped",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_MagnitudeAndPhaseUnWrapped",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseUnWrapped",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseUnWrapped",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseUnWrapped",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseUnWrapped",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeAndPhaseUnWrapped",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_MagnitudeAndPhaseUnWrapped((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MagnitudeSquaredAndPhaseWrapped(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_MagnitudeSquaredAndPhaseWrapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseWrapped",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseWrapped",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseWrapped",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseWrapped",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseWrapped",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseWrapped",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseWrapped",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseWrapped",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseWrapped",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseWrapped",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_MagnitudeSquaredAndPhaseWrapped((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_MagnitudeSquaredAndPhaseUnWrapped(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_MagnitudeSquaredAndPhaseUnWrapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseUnWrapped",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseUnWrapped",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseUnWrapped",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseUnWrapped",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_MagnitudeSquaredAndPhaseUnWrapped",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseUnWrapped",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseUnWrapped",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseUnWrapped",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseUnWrapped",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_MagnitudeSquaredAndPhaseUnWrapped",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_MagnitudeSquaredAndPhaseUnWrapped((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PhaseWrap(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_PhaseWrap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PhaseWrap",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PhaseWrap",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PhaseWrap",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseWrap",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseWrap",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseWrap",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_PhaseWrap((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PhaseUnWrap(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_PhaseUnWrap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PhaseUnWrap",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PhaseUnWrap",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PhaseUnWrap",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseUnWrap",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PhaseUnWrap",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PhaseUnWrap",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_PhaseUnWrap((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Log2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Log2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Log2",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Log2",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_Log2(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Log2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Log2",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Log2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Log2",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Log2",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Log2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Log2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Log2",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Log2((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_LogN(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_LogN",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_LogN",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_LogN",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LogN",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LogN",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_LogN(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LogN(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_LogN",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LogN",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LogN",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LogN",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LogN",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogN",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogN",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogN",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LogN",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_LogN((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LogDistribution(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_LogDistribution",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LogDistribution",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LogDistribution",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LogDistribution",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LogDistribution",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogDistribution",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogDistribution",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogDistribution",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LogDistribution",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_LogDistribution(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Copy(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Copy",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Copy",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Copy",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Copy",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Copy",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Copy",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Copy((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CopyWithStride(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_CopyWithStride",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CopyWithStride",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_CopyWithStride",2,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CopyWithStride",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CopyWithStride",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CopyWithStride",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CopyWithStride",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithStride",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CopyWithStride",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithStride",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithStride",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_CopyWithStride((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_CopyWithOverlap(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  
  SWIG_check_num_args("SIF_CopyWithOverlap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_CopyWithOverlap",1,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CopyWithOverlap",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SIF_CopyWithOverlap(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CopyWithOverlap(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_CopyWithOverlap",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CopyWithOverlap",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CopyWithOverlap",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CopyWithOverlap",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CopyWithOverlap",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CopyWithOverlap",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CopyWithOverlap",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_CopyWithOverlap",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CopyWithOverlap",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CopyWithOverlap",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CopyWithOverlap",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithOverlap",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithOverlap",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithOverlap",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithOverlap",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDA_CopyWithOverlap((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_CopyWithIndex(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  
  SWIG_check_num_args("SIF_CopyWithIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_CopyWithIndex",1,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_CopyWithIndex",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SIF_CopyWithIndex(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CopyWithIndex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_CopyWithIndex",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CopyWithIndex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CopyWithIndex",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CopyWithIndex",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CopyWithIndex",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CopyWithIndex",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CopyWithIndex",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CopyWithIndex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CopyWithIndex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithIndex",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithIndex",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithIndex",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CopyWithIndex",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_CopyWithIndex((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_20Log10(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_20Log10",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_20Log10",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_20Log10",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_20Log10",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_20Log10",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_20Log10",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_20Log10",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_20Log10((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_10Log10(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_10Log10",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_10Log10",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_10Log10",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_10Log10",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_10Log10",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_10Log10",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_10Log10",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_10Log10((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LogMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_LogMagnitude",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LogMagnitude",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LogMagnitude",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_LogMagnitude",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LogMagnitude",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitude",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitude",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitude",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitude",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_LogMagnitude((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LogMagnitudeAndPhaseWrapped(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_LogMagnitudeAndPhaseWrapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseWrapped",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseWrapped",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseWrapped",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseWrapped",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseWrapped",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseWrapped",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseWrapped",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseWrapped",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseWrapped",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseWrapped",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_LogMagnitudeAndPhaseWrapped((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LogMagnitudeAndPhaseUnWrapped(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_LogMagnitudeAndPhaseUnWrapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseUnWrapped",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseUnWrapped",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseUnWrapped",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseUnWrapped",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_LogMagnitudeAndPhaseUnWrapped",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseUnWrapped",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseUnWrapped",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseUnWrapped",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseUnWrapped",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LogMagnitudeAndPhaseUnWrapped",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_LogMagnitudeAndPhaseUnWrapped((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Lengthen(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Lengthen",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Lengthen",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Lengthen",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Lengthen",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Lengthen",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Lengthen",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Lengthen",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Lengthen",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Lengthen",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Lengthen((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Shorten(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Shorten",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Shorten",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Shorten",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Shorten",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Shorten",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Shorten",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Shorten",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Shorten((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_ReSize(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  
  SWIG_check_num_args("SIF_ReSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_ReSize",1,"SLArrayIndex_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_ReSize",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  SIF_ReSize(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ReSize(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_ReSize",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ReSize",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ReSize",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ReSize",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ReSize",4,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ReSize",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ReSize",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ReSize",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ReSize",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ReSize",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ReSize",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ReSize",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ReSize",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_ReSize((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ReSizeInput(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ReSizeInput",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ReSizeInput",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ReSizeInput",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ReSizeInput",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ReSizeInput",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ReSizeInput",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ReSizeInput",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ReSizeInput",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ReSizeInput",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ReSizeInput((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ReSizeOutput(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_ReSizeOutput",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ReSizeOutput",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ReSizeOutput",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ReSizeOutput",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ReSizeOutput",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ReSizeOutput",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ReSizeOutput",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ReSizeOutput",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ReSizeOutput",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_ReSizeOutput(arg1,arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Fill(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Fill",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Fill",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Fill",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Fill",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Fill",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Fill",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Fill(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Clear(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SDA_Clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Clear",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Clear",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Clear",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Clear",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SDA_Clear(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Histogram(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Histogram",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Histogram",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Histogram",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Histogram",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Histogram",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Histogram",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Histogram",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Histogram",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Histogram",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Histogram",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Histogram",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Histogram",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Histogram",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Histogram((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_HistogramCumulative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_HistogramCumulative",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_HistogramCumulative",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_HistogramCumulative",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_HistogramCumulative",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_HistogramCumulative",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_HistogramCumulative",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_HistogramCumulative",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramCumulative",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramCumulative",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramCumulative",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramCumulative",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_HistogramCumulative",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_HistogramCumulative",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_HistogramCumulative((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_HistogramExtended(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_HistogramExtended",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_HistogramExtended",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_HistogramExtended",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_HistogramExtended",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_HistogramExtended",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_HistogramExtended",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_HistogramExtended",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtended",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtended",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtended",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtended",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtended",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtended",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_HistogramExtended((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_HistogramExtendedCumulative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_HistogramExtendedCumulative",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_HistogramExtendedCumulative",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_HistogramExtendedCumulative",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_HistogramExtendedCumulative",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_HistogramExtendedCumulative",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_HistogramExtendedCumulative",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_HistogramExtendedCumulative",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtendedCumulative",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtendedCumulative",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtendedCumulative",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtendedCumulative",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtendedCumulative",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_HistogramExtendedCumulative",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_HistogramExtendedCumulative((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_Histogram(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_Histogram",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_Histogram",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_Histogram",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_Histogram",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_Histogram",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_Histogram(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_HistogramEqualize(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_HistogramEqualize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_HistogramEqualize",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_HistogramEqualize",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_HistogramEqualize",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_HistogramEqualize",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramEqualize",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramEqualize",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_HistogramEqualize",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_HistogramEqualize",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_HistogramEqualize((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Quantize(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Quantize",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Quantize",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Quantize",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Quantize",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Quantize",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Quantize",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Quantize",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Quantize",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Quantize",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Quantize",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Quantize",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Quantize((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Quantize(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLArrayIndex_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Quantize",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Quantize",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Quantize",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Quantize",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Quantize",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_Quantize",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Quantize",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_Quantize(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Quantize_N(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Quantize_N",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Quantize_N",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Quantize_N",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Quantize_N",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Quantize_N",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Quantize_N",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Quantize_N",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Quantize_N",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Quantize_N",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Quantize_N((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Quantise_N(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Quantise_N",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Quantise_N",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Quantise_N",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Quantise_N",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Quantise_N",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_Quantise_N(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Abs(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Abs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Abs",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Abs",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Abs",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Abs",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Abs",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Abs",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Abs((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_PeakValueToBits(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  enum SLSignalSign_t arg2 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_PeakValueToBits",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_PeakValueToBits",1,"SLData_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SDS_PeakValueToBits",2,"enum SLSignalSign_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_PeakValueToBits",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  arg2 = (enum SLSignalSign_t)(int)lua_tonumber(L, 2);
  result = SDS_PeakValueToBits(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_BitsToPeakValue(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  enum SLSignalSign_t arg2 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_BitsToPeakValue",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_BitsToPeakValue",1,"SLData_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SDS_BitsToPeakValue",2,"enum SLSignalSign_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_BitsToPeakValue",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  arg2 = (enum SLSignalSign_t)(int)lua_tonumber(L, 2);
  result = SDS_BitsToPeakValue(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_LinearTodBm(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_LinearTodBm",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_LinearTodBm",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_LinearTodBm",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LinearTodBm",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LinearTodBm",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_LinearTodBm(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LinearTodBm(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_LinearTodBm",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LinearTodBm",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LinearTodBm",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LinearTodBm",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LinearTodBm",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearTodBm",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearTodBm",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinearTodBm",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LinearTodBm",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_LinearTodBm((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_dBmToLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_dBmToLinear",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_dBmToLinear",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_dBmToLinear",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_dBmToLinear",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_dBmToLinear",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_dBmToLinear(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_dBmToLinear(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_dBmToLinear",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_dBmToLinear",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_dBmToLinear",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_dBmToLinear",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_dBmToLinear",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_dBmToLinear",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_dBmToLinear",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_dBmToLinear",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_dBmToLinear",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_dBmToLinear((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Compare(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_Compare",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Compare",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Compare",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Compare",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Compare",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Compare",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Compare",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_Compare(arg1,arg2,arg3);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Compare(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_Compare",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Compare",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Compare",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Compare",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Compare",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Compare",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Compare",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Compare",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Compare",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_Compare((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_CompareComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_CompareComplex",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_CompareComplex",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_CompareComplex",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_CompareComplex",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_CompareComplex",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_CompareComplex",5,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CompareComplex",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CompareComplex",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CompareComplex",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CompareComplex",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_CompareComplex",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  result = SDS_CompareComplex(arg1,arg2,arg3,arg4,arg5);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CompareComplex(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_CompareComplex",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CompareComplex",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CompareComplex",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CompareComplex",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_CompareComplex",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_CompareComplex",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_CompareComplex",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CompareComplex",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CompareComplex",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CompareComplex",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CompareComplex",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CompareComplex",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CompareComplex",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_CompareComplex((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,(SLData_t const *)arg4,arg5,arg6);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Int(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Int",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Int",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Int",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_Int(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Frac(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Frac",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Frac",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Frac",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_Frac(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_AbsFrac(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_AbsFrac",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_AbsFrac",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_AbsFrac",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_AbsFrac(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Int(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Int",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Int",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Int",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Int",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Int",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Int",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Int",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Int((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Frac(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Frac",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Frac",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Frac",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Frac",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Frac",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Frac",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Frac",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Frac((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsFrac(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_AbsFrac",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsFrac",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AbsFrac",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AbsFrac",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsFrac",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsFrac",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsFrac",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_AbsFrac((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SetMin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SetMin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SetMin",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SetMin",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SetMin",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SetMin",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMin",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SetMin",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SetMin((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SetMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SetMax",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SetMax",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SetMax",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SetMax",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SetMax",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMax",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMax",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMax",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SetMax",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SetMax((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SetRange(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_SetRange",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SetRange",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SetRange",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SetRange",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SetRange",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SetRange",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetRange",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetRange",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetRange",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetRange",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SetRange",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_SetRange((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SetMean(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_SetMean",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SetMean",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SetMean",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SetMean",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SetMean",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SetMean",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMean",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMean",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMean",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetMean",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SetMean",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_SetMean((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RealSpectralInverse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_RealSpectralInverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RealSpectralInverse",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RealSpectralInverse",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_RealSpectralInverse",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealSpectralInverse",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RealSpectralInverse",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RealSpectralInverse",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_RealSpectralInverse((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexSpectralInverse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_ComplexSpectralInverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexSpectralInverse",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexSpectralInverse",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexSpectralInverse",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_ComplexSpectralInverse",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ComplexSpectralInverse",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexSpectralInverse",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexSpectralInverse",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexSpectralInverse",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexSpectralInverse",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexSpectralInverse",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_ComplexSpectralInverse((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FdInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLFixData_t arg5 ;
  SLFixData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLFixData_t *argp5 ;
  SLFixData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_FdInterpolate",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FdInterpolate",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FdInterpolate",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FdInterpolate",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FdInterpolate",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FdInterpolate",5,"SLFixData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FdInterpolate",6,"SLFixData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FdInterpolate",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate",5,SWIGTYPE_p_SLFixData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate",6,SWIGTYPE_p_SLFixData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_FdInterpolate((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FdInterpolate2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_FdInterpolate2",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FdInterpolate2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FdInterpolate2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FdInterpolate2",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FdInterpolate2",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FdInterpolate2",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FdInterpolate2",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate2",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate2",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FdInterpolate2",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_FdInterpolate2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_TdPitchShift(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp1 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_TdPitchShift",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_TdPitchShift",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_TdPitchShift",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_TdPitchShift",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_TdPitchShift",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_TdPitchShift",5,"SLData_t *");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_TdPitchShift",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_TdPitchShift",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TdPitchShift",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TdPitchShift",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TdPitchShift",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TdPitchShift",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TdPitchShift",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_TdPitchShift",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_TdPitchShift",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDS_TdPitchShift(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TdPitchShift(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_TdPitchShift",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TdPitchShift",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TdPitchShift",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TdPitchShift",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TdPitchShift",4,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TdPitchShift",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_TdPitchShift",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_TdPitchShift",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_TdPitchShift",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_TdPitchShift",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TdPitchShift",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_TdPitchShift((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_EchoGenerate(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  enum SLEcho_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp1 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp7 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_EchoGenerate",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_EchoGenerate",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_EchoGenerate",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_EchoGenerate",3,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_EchoGenerate",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_EchoGenerate",5,"SLData_t const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SDS_EchoGenerate",6,"enum SLEcho_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_EchoGenerate",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EchoGenerate",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EchoGenerate",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EchoGenerate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EchoGenerate",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_EchoGenerate",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  arg6 = (enum SLEcho_t const)(int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_EchoGenerate",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDS_EchoGenerate(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Power(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Power",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Power",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Power",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Power",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Power",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Power",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Power",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Power",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Power",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Power((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Polynomial(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Polynomial",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Polynomial",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Polynomial",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Polynomial",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_Polynomial",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_Polynomial",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_Polynomial",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDS_Polynomial",7,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Polynomial",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Polynomial",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Polynomial",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Polynomial",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Polynomial",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Polynomial",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Polynomial",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  result = SDS_Polynomial(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Polynomial(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SDA_Polynomial",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Polynomial",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Polynomial",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Polynomial",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Polynomial",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Polynomial",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Polynomial",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_Polynomial",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_Polynomial",8,"SLData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_Polynomial",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Polynomial",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SDA_Polynomial((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Modulo(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  enum SLModuloMode_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Modulo",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Modulo",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Modulo",2,"SLData_t const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDS_Modulo",3,"enum SLModuloMode_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Modulo",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Modulo",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  arg3 = (enum SLModuloMode_t const)(int)lua_tonumber(L, 3);
  result = SDS_Modulo(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Modulo(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  enum SLModuloMode_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_Modulo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Modulo",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Modulo",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Modulo",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_Modulo",4,"enum SLModuloMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Modulo",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Modulo",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Modulo",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Modulo",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLModuloMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Modulo",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_Modulo((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AgcPeak(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  
  SWIG_check_num_args("SDA_AgcPeak",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AgcPeak",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AgcPeak",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AgcPeak",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_AgcPeak",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_AgcPeak",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_AgcPeak",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_AgcPeak",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_AgcPeak",8,"SLData_t *");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_AgcPeak",9,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_AgcPeak",10,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AgcPeak",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  SDA_AgcPeak((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_AgcMeanAbs(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SIF_AgcMeanAbs",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_AgcMeanAbs",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_AgcMeanAbs",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_AgcMeanAbs",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_AgcMeanAbs",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_AgcMeanAbs",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_AgcMeanAbs",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_AgcMeanAbs",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_AgcMeanAbs",8,"SLData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SIF_AgcMeanAbs",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanAbs",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SIF_AgcMeanAbs(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AgcMeanAbs(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  
  SWIG_check_num_args("SDA_AgcMeanAbs",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AgcMeanAbs",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AgcMeanAbs",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AgcMeanAbs",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_AgcMeanAbs",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_AgcMeanAbs",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_AgcMeanAbs",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_AgcMeanAbs",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_AgcMeanAbs",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_AgcMeanAbs",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_AgcMeanAbs",10,"SLData_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_AgcMeanAbs",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_AgcMeanAbs",12,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanAbs",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  SDA_AgcMeanAbs((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_AgcMeanSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t arg7 ;
  SLData_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLData_t *argp7 ;
  SLData_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SIF_AgcMeanSquared",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_AgcMeanSquared",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_AgcMeanSquared",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_AgcMeanSquared",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SIF_AgcMeanSquared",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_AgcMeanSquared",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SIF_AgcMeanSquared",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_AgcMeanSquared",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SIF_AgcMeanSquared",8,"SLData_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SIF_AgcMeanSquared",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_AgcMeanSquared",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SIF_AgcMeanSquared(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AgcMeanSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg8 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t *arg10 = (SLData_t *) 0 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  
  SWIG_check_num_args("SDA_AgcMeanSquared",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AgcMeanSquared",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_AgcMeanSquared",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AgcMeanSquared",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_AgcMeanSquared",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_AgcMeanSquared",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_AgcMeanSquared",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_AgcMeanSquared",7,"SLData_t *");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SDA_AgcMeanSquared",8,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_AgcMeanSquared",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SDA_AgcMeanSquared",10,"SLData_t *");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_AgcMeanSquared",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_AgcMeanSquared",12,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",10,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AgcMeanSquared",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  SDA_AgcMeanSquared((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_GroupDelay(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_GroupDelay",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_GroupDelay",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_GroupDelay",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_GroupDelay",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_GroupDelay",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GroupDelay",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GroupDelay",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_GroupDelay",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_GroupDelay",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_GroupDelay((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ZeroCrossingDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  enum SLLevelCrossingMode_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_ZeroCrossingDetect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ZeroCrossingDetect",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ZeroCrossingDetect",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ZeroCrossingDetect",3,"SLData_t *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_ZeroCrossingDetect",4,"enum SLLevelCrossingMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ZeroCrossingDetect",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZeroCrossingDetect",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZeroCrossingDetect",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZeroCrossingDetect",3,SWIGTYPE_p_SLData_t);
  }
  
  arg4 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZeroCrossingDetect",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_ZeroCrossingDetect((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ZeroCrossingDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  enum SLLevelCrossingMode_t arg3 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ZeroCrossingDetect",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ZeroCrossingDetect",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_ZeroCrossingDetect",2,"SLData_t *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDS_ZeroCrossingDetect",3,"enum SLLevelCrossingMode_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ZeroCrossingDetect",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ZeroCrossingDetect",2,SWIGTYPE_p_SLData_t);
  }
  
  arg3 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 3);
  result = SDS_ZeroCrossingDetect(arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirstZeroCrossingLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  enum SLLevelCrossingMode_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FirstZeroCrossingLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirstZeroCrossingLocation",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FirstZeroCrossingLocation",2,"SLData_t *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDA_FirstZeroCrossingLocation",3,"enum SLLevelCrossingMode_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FirstZeroCrossingLocation",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstZeroCrossingLocation",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstZeroCrossingLocation",2,SWIGTYPE_p_SLData_t);
  }
  
  arg3 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirstZeroCrossingLocation",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_FirstZeroCrossingLocation((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ZeroCrossingCount(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  enum SLLevelCrossingMode_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_ZeroCrossingCount",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ZeroCrossingCount",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ZeroCrossingCount",2,"SLData_t *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDA_ZeroCrossingCount",3,"enum SLLevelCrossingMode_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ZeroCrossingCount",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZeroCrossingCount",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ZeroCrossingCount",2,SWIGTYPE_p_SLData_t);
  }
  
  arg3 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ZeroCrossingCount",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_ZeroCrossingCount((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LevelCrossingDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  enum SLLevelCrossingMode_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp6 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_LevelCrossingDetect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LevelCrossingDetect",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LevelCrossingDetect",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_LevelCrossingDetect",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_LevelCrossingDetect",4,"SLData_t *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SDA_LevelCrossingDetect",5,"enum SLLevelCrossingMode_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_LevelCrossingDetect",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingDetect",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingDetect",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingDetect",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingDetect",4,SWIGTYPE_p_SLData_t);
  }
  
  arg5 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingDetect",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_LevelCrossingDetect((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_LevelCrossingDetect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  enum SLLevelCrossingMode_t arg4 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_LevelCrossingDetect",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_LevelCrossingDetect",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_LevelCrossingDetect",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_LevelCrossingDetect",3,"SLData_t *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDS_LevelCrossingDetect",4,"enum SLLevelCrossingMode_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LevelCrossingDetect",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LevelCrossingDetect",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_LevelCrossingDetect",3,SWIGTYPE_p_SLData_t);
  }
  
  arg4 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 4);
  result = SDS_LevelCrossingDetect(arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FirstLevelCrossingLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  enum SLLevelCrossingMode_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FirstLevelCrossingLocation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FirstLevelCrossingLocation",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FirstLevelCrossingLocation",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FirstLevelCrossingLocation",3,"SLData_t *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_FirstLevelCrossingLocation",4,"enum SLLevelCrossingMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FirstLevelCrossingLocation",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstLevelCrossingLocation",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstLevelCrossingLocation",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FirstLevelCrossingLocation",3,SWIGTYPE_p_SLData_t);
  }
  
  arg4 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FirstLevelCrossingLocation",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_FirstLevelCrossingLocation((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LevelCrossingCount(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  enum SLLevelCrossingMode_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp5 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDA_LevelCrossingCount",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LevelCrossingCount",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_LevelCrossingCount",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_LevelCrossingCount",3,"SLData_t *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_LevelCrossingCount",4,"enum SLLevelCrossingMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_LevelCrossingCount",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingCount",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingCount",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingCount",3,SWIGTYPE_p_SLData_t);
  }
  
  arg4 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LevelCrossingCount",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_LevelCrossingCount((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Trigger(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  enum SLLevelCrossingMode_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_Trigger",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Trigger",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Trigger",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Trigger",3,"SLData_t const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_Trigger",4,"enum SLLevelCrossingMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Trigger",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Trigger",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Trigger",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Trigger",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  arg4 = (enum SLLevelCrossingMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Trigger",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_Trigger((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ClearLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ClearLocation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ClearLocation",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ClearLocation",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ClearLocation",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ClearLocation",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ClearLocation",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ClearLocation",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ClearLocation(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SetLocation(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp2 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SetLocation",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_SetLocation",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SetLocation",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SetLocation",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetLocation",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SetLocation",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SetLocation",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SetLocation",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SetLocation(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SortMinToMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_SortMinToMax",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SortMinToMax",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SortMinToMax",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SortMinToMax",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMinToMax",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMinToMax",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SortMinToMax",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_SortMinToMax((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SortMaxToMin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_SortMaxToMin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SortMaxToMin",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SortMaxToMin",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SortMaxToMin",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMaxToMin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMaxToMin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SortMaxToMin",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_SortMaxToMin((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SortMinToMax2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_SortMinToMax2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SortMinToMax2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SortMinToMax2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SortMinToMax2",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_SortMinToMax2",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SortMinToMax2",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMinToMax2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMinToMax2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMinToMax2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMinToMax2",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SortMinToMax2",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_SortMinToMax2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SortMaxToMin2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_SortMaxToMin2",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SortMaxToMin2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SortMaxToMin2",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SortMaxToMin2",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_SortMaxToMin2",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SortMaxToMin2",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMaxToMin2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMaxToMin2",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMaxToMin2",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortMaxToMin2",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SortMaxToMin2",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_SortMaxToMin2((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SortIndexed(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SortIndexed",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SortIndexed",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SortIndexed",2,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_SortIndexed",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SortIndexed",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortIndexed",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SortIndexed",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SortIndexed",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SortIndexed",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SortIndexed((SLData_t const *)arg1,(SLArrayIndex_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_CountOneBits(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_CountOneBits",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_CountOneBits",1,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CountOneBits",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  result = SDS_CountOneBits(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_CountZeroBits(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_CountZeroBits",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_CountZeroBits",1,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CountZeroBits",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  result = SDS_CountZeroBits(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_CountLeadingOneBits(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_CountLeadingOneBits",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_CountLeadingOneBits",1,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CountLeadingOneBits",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  result = SDS_CountLeadingOneBits(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_CountLeadingZeroBits(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t *argp1 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_CountLeadingZeroBits",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_CountLeadingZeroBits",1,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_CountLeadingZeroBits",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  result = SDS_CountLeadingZeroBits(arg1);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Sign(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Sign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Sign",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Sign",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Sign",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sign",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sign",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Sign",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Sign((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Swap(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Swap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Swap",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Swap",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Swap",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Swap",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Swap",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Swap",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Swap(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_ModuloIncrement(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t arg2 ;
  SLFixData_t arg3 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp2 ;
  SLFixData_t *argp3 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SUF_ModuloIncrement",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_ModuloIncrement",1,"SLFixData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_ModuloIncrement",2,"SLFixData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_ModuloIncrement",3,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SUF_ModuloIncrement",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SUF_ModuloIncrement",2,SWIGTYPE_p_SLFixData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SUF_ModuloIncrement",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  result = SUF_ModuloIncrement(arg1,arg2,arg3);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_ModuloDecrement(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t arg2 ;
  SLFixData_t arg3 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp2 ;
  SLFixData_t *argp3 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SUF_ModuloDecrement",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_ModuloDecrement",1,"SLFixData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_ModuloDecrement",2,"SLFixData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_ModuloDecrement",3,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SUF_ModuloDecrement",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SUF_ModuloDecrement",2,SWIGTYPE_p_SLFixData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SUF_ModuloDecrement",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  result = SUF_ModuloDecrement(arg1,arg2,arg3);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_IndexModuloIncrement(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t arg1 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp1 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_IndexModuloIncrement",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_IndexModuloIncrement",1,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_IndexModuloIncrement",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_IndexModuloIncrement",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IndexModuloIncrement",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IndexModuloIncrement",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IndexModuloIncrement",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_IndexModuloIncrement(arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SUF_IndexModuloDecrement(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t arg1 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp1 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SUF_IndexModuloDecrement",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SUF_IndexModuloDecrement",1,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SUF_IndexModuloDecrement",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SUF_IndexModuloDecrement",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IndexModuloDecrement",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IndexModuloDecrement",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SUF_IndexModuloDecrement",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SUF_IndexModuloDecrement(arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Find(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  enum SLFindType_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_Find",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Find",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Find",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Find",3,"SLArrayIndex_t *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_Find",4,"enum SLFindType_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Find",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Find",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Find",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Find",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg4 = (enum SLFindType_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Find",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_Find((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FindValue(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg4 = (SLArrayIndex_t *) 0 ;
  enum SLFindType_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FindValue",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FindValue",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FindValue",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FindValue",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FindValue",4,"SLArrayIndex_t *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SDA_FindValue",5,"enum SLFindType_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FindValue",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindValue",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindValue",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindValue",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindValue",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg5 = (enum SLFindType_t const)(int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindValue",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  result = SDA_FindValue((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_DeGlitch(lua_State* L) {
  int SWIG_arg = 0;
  SLArrayIndex_t *arg1 = (SLArrayIndex_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *argp2 ;
  
  SWIG_check_num_args("SIF_DeGlitch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_DeGlitch",1,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_DeGlitch",2,"SLData_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SIF_DeGlitch",3,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_DeGlitch",1,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DeGlitch",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_DeGlitch",3,SWIGTYPE_p_SLData_t);
  }
  
  SIF_DeGlitch(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_DeGlitch(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  enum SLDeGlitchMode_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t arg5 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  SLData_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_DeGlitch",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_DeGlitch",1,"SLData_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_DeGlitch",2,"SLArrayIndex_t *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SDS_DeGlitch",3,"enum SLDeGlitchMode_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_DeGlitch",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_DeGlitch",5,"SLData_t const");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_DeGlitch",6,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_DeGlitch",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_DeGlitch",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg3 = (enum SLDeGlitchMode_t const)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_DeGlitch",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_DeGlitch",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_DeGlitch",6,SWIGTYPE_p_SLData_t);
  }
  
  result = SDS_DeGlitch(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_DeGlitch(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  enum SLDeGlitchMode_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp8 ;
  
  SWIG_check_num_args("SDA_DeGlitch",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_DeGlitch",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_DeGlitch",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_DeGlitch",3,"SLArrayIndex_t *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SDA_DeGlitch",4,"enum SLDeGlitchMode_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_DeGlitch",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_DeGlitch",6,"SLData_t const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_DeGlitch",7,"SLData_t *");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_DeGlitch",8,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeGlitch",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeGlitch",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DeGlitch",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  arg4 = (enum SLDeGlitchMode_t const)(int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DeGlitch",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeGlitch",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_DeGlitch",7,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_DeGlitch",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  SDA_DeGlitch(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RemoveDuplicates(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_RemoveDuplicates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RemoveDuplicates",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RemoveDuplicates",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_RemoveDuplicates",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RemoveDuplicates",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RemoveDuplicates",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RemoveDuplicates",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_RemoveDuplicates((SLData_t const *)arg1,arg2,arg3);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FindAllDuplicates(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FindAllDuplicates",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FindAllDuplicates",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FindAllDuplicates",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FindAllDuplicates",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FindAllDuplicates",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FindAllDuplicates",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindAllDuplicates",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindAllDuplicates",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindAllDuplicates",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindAllDuplicates",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindAllDuplicates",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_FindAllDuplicates((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FindFirstDuplicates(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FindFirstDuplicates",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FindFirstDuplicates",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FindFirstDuplicates",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FindFirstDuplicates",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FindFirstDuplicates",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FindFirstDuplicates",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindFirstDuplicates",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindFirstDuplicates",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindFirstDuplicates",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindFirstDuplicates",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindFirstDuplicates",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_FindFirstDuplicates((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FindSortAllDuplicates(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FindSortAllDuplicates",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FindSortAllDuplicates",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FindSortAllDuplicates",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FindSortAllDuplicates",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FindSortAllDuplicates",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FindSortAllDuplicates",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindSortAllDuplicates",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindSortAllDuplicates",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindSortAllDuplicates",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindSortAllDuplicates",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindSortAllDuplicates",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_FindSortAllDuplicates((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FindSortFirstDuplicates(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t result;
  
  SWIG_check_num_args("SDA_FindSortFirstDuplicates",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FindSortFirstDuplicates",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FindSortFirstDuplicates",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FindSortFirstDuplicates",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FindSortFirstDuplicates",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FindSortFirstDuplicates",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindSortFirstDuplicates",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindSortFirstDuplicates",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FindSortFirstDuplicates",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindSortFirstDuplicates",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FindSortFirstDuplicates",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_FindSortFirstDuplicates((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  {
    SLArrayIndex_t * resultptr = new SLArrayIndex_t((const SLArrayIndex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLArrayIndex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Shuffle(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Shuffle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Shuffle",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Shuffle",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Shuffle",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Shuffle",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Shuffle",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Shuffle",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Shuffle((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InsertSample(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_InsertSample",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InsertSample",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_InsertSample",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_InsertSample",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_InsertSample",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_InsertSample",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InsertSample",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InsertSample",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InsertSample",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InsertSample",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InsertSample",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_InsertSample((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_InsertArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_InsertArray",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_InsertArray",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_InsertArray",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_InsertArray",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_InsertArray",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_InsertArray",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_InsertArray",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InsertArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InsertArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_InsertArray",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InsertArray",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InsertArray",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_InsertArray",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_InsertArray((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExtractSample(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_ExtractSample",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExtractSample",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExtractSample",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ExtractSample",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ExtractSample",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractSample",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractSample",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractSample",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractSample",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_ExtractSample((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExtractArray(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_ExtractArray",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExtractArray",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExtractArray",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ExtractArray",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ExtractArray",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ExtractArray",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ExtractArray",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractArray",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractArray",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractArray",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractArray",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractArray",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractArray",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_ExtractArray((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SigLibDataToFix(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_SigLibDataToFix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SigLibDataToFix",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SigLibDataToFix",2,"SLFixData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SigLibDataToFix",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix",2,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_SigLibDataToFix((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FixToSigLibData(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t *arg1 = (SLFixData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_FixToSigLibData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FixToSigLibData",1,"SLFixData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FixToSigLibData",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_FixToSigLibData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_FixToSigLibData",1,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FixToSigLibData",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FixToSigLibData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_FixToSigLibData((SLFixData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SigLibDataToImageData(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLImageData_t *arg2 = (SLImageData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_SigLibDataToImageData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SigLibDataToImageData",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SigLibDataToImageData",2,"SLImageData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SigLibDataToImageData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToImageData",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToImageData",2,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToImageData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_SigLibDataToImageData((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ImageDataToSigLibData(lua_State* L) {
  int SWIG_arg = 0;
  SLImageData_t *arg1 = (SLImageData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ImageDataToSigLibData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ImageDataToSigLibData",1,"SLImageData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ImageDataToSigLibData",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ImageDataToSigLibData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLImageData_t,0))){
    SWIG_fail_ptr("SDA_ImageDataToSigLibData",1,SWIGTYPE_p_SLImageData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ImageDataToSigLibData",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ImageDataToSigLibData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ImageDataToSigLibData((SLImageData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SigLibDataToFix16(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLInt16_t *arg2 = (SLInt16_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_SigLibDataToFix16",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SigLibDataToFix16",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SigLibDataToFix16",2,"SLInt16_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SigLibDataToFix16",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix16",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLInt16_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix16",2,SWIGTYPE_p_SLInt16_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix16",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_SigLibDataToFix16((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Fix16ToSigLibData(lua_State* L) {
  int SWIG_arg = 0;
  SLInt16_t *arg1 = (SLInt16_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Fix16ToSigLibData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Fix16ToSigLibData",1,"SLInt16_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Fix16ToSigLibData",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Fix16ToSigLibData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLInt16_t,0))){
    SWIG_fail_ptr("SDA_Fix16ToSigLibData",1,SWIGTYPE_p_SLInt16_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Fix16ToSigLibData",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Fix16ToSigLibData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Fix16ToSigLibData((SLInt16_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SigLibDataToFix32(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLInt32_t *arg2 = (SLInt32_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_SigLibDataToFix32",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SigLibDataToFix32",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SigLibDataToFix32",2,"SLInt32_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SigLibDataToFix32",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix32",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLInt32_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix32",2,SWIGTYPE_p_SLInt32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToFix32",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_SigLibDataToFix32((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Fix32ToSigLibData(lua_State* L) {
  int SWIG_arg = 0;
  SLInt32_t *arg1 = (SLInt32_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Fix32ToSigLibData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Fix32ToSigLibData",1,"SLInt32_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Fix32ToSigLibData",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Fix32ToSigLibData",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLInt32_t,0))){
    SWIG_fail_ptr("SDA_Fix32ToSigLibData",1,SWIGTYPE_p_SLInt32_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Fix32ToSigLibData",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Fix32ToSigLibData",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Fix32ToSigLibData((SLInt32_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_SigLibDataToQFormatInteger(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLFixData_t arg2 ;
  SLFixData_t arg3 ;
  SLData_t *argp1 ;
  SLFixData_t *argp2 ;
  SLFixData_t *argp3 ;
  SLFixData_t result;
  
  SWIG_check_num_args("SDS_SigLibDataToQFormatInteger",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_SigLibDataToQFormatInteger",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_SigLibDataToQFormatInteger",2,"SLFixData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_SigLibDataToQFormatInteger",3,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_SigLibDataToQFormatInteger",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_SigLibDataToQFormatInteger",2,SWIGTYPE_p_SLFixData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_SigLibDataToQFormatInteger",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  result = SDS_SigLibDataToQFormatInteger(arg1,arg2,arg3);
  {
    SLFixData_t * resultptr = new SLFixData_t((const SLFixData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLFixData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_QFormatIntegerToSigLibData(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t arg1 ;
  SLFixData_t arg2 ;
  SLFixData_t *argp1 ;
  SLFixData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_QFormatIntegerToSigLibData",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_QFormatIntegerToSigLibData",1,"SLFixData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_QFormatIntegerToSigLibData",2,"SLFixData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_QFormatIntegerToSigLibData",1,SWIGTYPE_p_SLFixData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDS_QFormatIntegerToSigLibData",2,SWIGTYPE_p_SLFixData_t);
  }
  arg2 = *argp2;
  
  result = SDS_QFormatIntegerToSigLibData(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SigLibDataToQFormatInteger(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLFixData_t *arg2 = (SLFixData_t *) 0 ;
  SLFixData_t arg3 ;
  SLFixData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLFixData_t *argp3 ;
  SLFixData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_SigLibDataToQFormatInteger",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SigLibDataToQFormatInteger",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SigLibDataToQFormatInteger",2,"SLFixData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SigLibDataToQFormatInteger",3,"SLFixData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SigLibDataToQFormatInteger",4,"SLFixData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SigLibDataToQFormatInteger",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToQFormatInteger",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToQFormatInteger",2,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToQFormatInteger",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToQFormatInteger",4,SWIGTYPE_p_SLFixData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SigLibDataToQFormatInteger",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_SigLibDataToQFormatInteger((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QFormatIntegerToSigLibData(lua_State* L) {
  int SWIG_arg = 0;
  SLFixData_t *arg1 = (SLFixData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLFixData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLFixData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_QFormatIntegerToSigLibData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_QFormatIntegerToSigLibData",1,"SLFixData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QFormatIntegerToSigLibData",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_QFormatIntegerToSigLibData",3,"SLFixData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_QFormatIntegerToSigLibData",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QFormatIntegerToSigLibData",1,SWIGTYPE_p_SLFixData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QFormatIntegerToSigLibData",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLFixData_t,0))){
    SWIG_fail_ptr("SDA_QFormatIntegerToSigLibData",3,SWIGTYPE_p_SLFixData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QFormatIntegerToSigLibData",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_QFormatIntegerToSigLibData((SLFixData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Pid(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t arg3 ;
  SLData_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t *argp3 ;
  SLData_t *argp4 ;
  
  SWIG_check_num_args("SDS_Pid",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Pid",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_Pid",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_Pid",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_Pid",4,"SLData_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDS_Pid",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDS_Pid",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDS_Pid",7,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Pid",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Pid",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Pid",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Pid",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Pid",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Pid",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Pid",7,SWIGTYPE_p_SLData_t);
  }
  
  SDS_Pid(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Pwm(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_Pwm",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Pwm",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Pwm",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Pwm",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_Pwm",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_Pwm",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_Pwm",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Pwm",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Pwm",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Pwm",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Pwm",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Pwm",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Pwm",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_Pwm((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExtractOrder(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLData_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_ExtractOrder",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExtractOrder",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ExtractOrder",2,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ExtractOrder",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ExtractOrder",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_ExtractOrder",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_ExtractOrder",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_ExtractOrder",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractOrder",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractOrder",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractOrder",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractOrder",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractOrder",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractOrder",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractOrder",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SDA_ExtractOrder((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SumLevel(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  enum SLSignalCoherenceType_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_SumLevel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SumLevel",1,"SLData_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SDA_SumLevel",2,"enum SLSignalCoherenceType_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SumLevel",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SumLevel",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumLevel",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (enum SLSignalCoherenceType_t const)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SumLevel",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SumLevel",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_SumLevel((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SumLevelWholeSpectrum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  enum SLSignalCoherenceType_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_SumLevelWholeSpectrum",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SumLevelWholeSpectrum",1,"SLData_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SDA_SumLevelWholeSpectrum",2,"enum SLSignalCoherenceType_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SumLevelWholeSpectrum",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SumLevelWholeSpectrum",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_SumLevelWholeSpectrum",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumLevelWholeSpectrum",1,SWIGTYPE_p_SLData_t);
  }
  
  arg2 = (enum SLSignalCoherenceType_t const)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SumLevelWholeSpectrum",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumLevelWholeSpectrum",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SumLevelWholeSpectrum",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SDA_SumLevelWholeSpectrum((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_OrderAnalysis(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  enum SLWindow_t arg6 ;
  SLData_t arg7 ;
  SLData_t *arg8 = (SLData_t *) 0 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg10 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLData_t *arg12 = (SLData_t *) 0 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp13 ;
  
  SWIG_check_num_args("SIF_OrderAnalysis",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_OrderAnalysis",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_OrderAnalysis",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_OrderAnalysis",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_OrderAnalysis",4,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SIF_OrderAnalysis",5,"SLData_t *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SIF_OrderAnalysis",6,"enum SLWindow_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SIF_OrderAnalysis",7,"SLData_t const");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("SIF_OrderAnalysis",8,"SLData_t *");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SIF_OrderAnalysis",9,"SLData_t *");
  if(!SWIG_isptrtype(L,10)) SWIG_fail_arg("SIF_OrderAnalysis",10,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SIF_OrderAnalysis",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SIF_OrderAnalysis",12,"SLData_t *");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SIF_OrderAnalysis",13,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",5,SWIGTYPE_p_SLData_t);
  }
  
  arg6 = (enum SLWindow_t const)(int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",8,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&arg10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",12,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_OrderAnalysis",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  SIF_OrderAnalysis(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_OrderAnalysis(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLData_t arg6 ;
  SLData_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLData_t *arg9 = (SLData_t *) 0 ;
  SLData_t arg10 ;
  SLData_t *arg11 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg12 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg13 = (SLData_t *) 0 ;
  SLData_t *arg14 = (SLData_t *) 0 ;
  SLArrayIndex_t arg15 ;
  SLData_t *arg16 = (SLData_t *) 0 ;
  SLArrayIndex_t arg17 ;
  SLArrayIndex_t arg18 ;
  SLArrayIndex_t arg19 ;
  SLData_t arg20 ;
  enum SLSignalCoherenceType_t arg21 ;
  SLData_t arg22 ;
  SLArrayIndex_t arg23 ;
  SLArrayIndex_t arg24 ;
  SLArrayIndex_t arg25 ;
  SLArrayIndex_t arg26 ;
  SLData_t *argp5 ;
  SLData_t *argp6 ;
  SLData_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLData_t *argp10 ;
  SLArrayIndex_t *argp15 ;
  SLArrayIndex_t *argp17 ;
  SLArrayIndex_t *argp18 ;
  SLArrayIndex_t *argp19 ;
  SLData_t *argp20 ;
  SLData_t *argp22 ;
  SLArrayIndex_t *argp23 ;
  SLArrayIndex_t *argp24 ;
  SLArrayIndex_t *argp25 ;
  SLArrayIndex_t *argp26 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_OrderAnalysis",26,26)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_OrderAnalysis",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_OrderAnalysis",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_OrderAnalysis",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_OrderAnalysis",4,"SLData_t const *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_OrderAnalysis",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_OrderAnalysis",6,"SLData_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_OrderAnalysis",7,"SLData_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_OrderAnalysis",8,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,9)) SWIG_fail_arg("SDA_OrderAnalysis",9,"SLData_t *");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_OrderAnalysis",10,"SLData_t const");
  if(!SWIG_isptrtype(L,11)) SWIG_fail_arg("SDA_OrderAnalysis",11,"SLData_t *");
  if(!SWIG_isptrtype(L,12)) SWIG_fail_arg("SDA_OrderAnalysis",12,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,13)) SWIG_fail_arg("SDA_OrderAnalysis",13,"SLData_t *");
  if(!SWIG_isptrtype(L,14)) SWIG_fail_arg("SDA_OrderAnalysis",14,"SLData_t *");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_OrderAnalysis",15,"SLArrayIndex_t const");
  if(!SWIG_isptrtype(L,16)) SWIG_fail_arg("SDA_OrderAnalysis",16,"SLData_t *");
  if(!lua_isuserdata(L,17)) SWIG_fail_arg("SDA_OrderAnalysis",17,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,18)) SWIG_fail_arg("SDA_OrderAnalysis",18,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,19)) SWIG_fail_arg("SDA_OrderAnalysis",19,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,20)) SWIG_fail_arg("SDA_OrderAnalysis",20,"SLData_t const");
  if(!lua_isnumber(L,21)) SWIG_fail_arg("SDA_OrderAnalysis",21,"enum SLSignalCoherenceType_t const");
  if(!lua_isuserdata(L,22)) SWIG_fail_arg("SDA_OrderAnalysis",22,"SLData_t const");
  if(!lua_isuserdata(L,23)) SWIG_fail_arg("SDA_OrderAnalysis",23,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,24)) SWIG_fail_arg("SDA_OrderAnalysis",24,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,25)) SWIG_fail_arg("SDA_OrderAnalysis",25,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,26)) SWIG_fail_arg("SDA_OrderAnalysis",26,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",6,SWIGTYPE_p_SLData_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&arg9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",9,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",10,SWIGTYPE_p_SLData_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&arg11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",11,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&arg12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&arg13,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",13,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&arg14,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",14,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&arg16,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",16,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,17,(void**)&argp17,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",17,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg17 = *argp17;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,18,(void**)&argp18,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",18,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg18 = *argp18;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,19,(void**)&argp19,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",19,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg19 = *argp19;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,20,(void**)&argp20,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",20,SWIGTYPE_p_SLData_t);
  }
  arg20 = *argp20;
  
  arg21 = (enum SLSignalCoherenceType_t const)(int)lua_tonumber(L, 21);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,22,(void**)&argp22,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",22,SWIGTYPE_p_SLData_t);
  }
  arg22 = *argp22;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,23,(void**)&argp23,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",23,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg23 = *argp23;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,24,(void**)&argp24,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",24,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg24 = *argp24;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,25,(void**)&argp25,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",25,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg25 = *argp25;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,26,(void**)&argp26,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_OrderAnalysis",26,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg26 = *argp26;
  
  result = SDA_OrderAnalysis((SLData_t const *)arg1,arg2,arg3,(SLData_t const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Sum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_Sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Sum",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Sum",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Sum",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_Sum((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsSum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_AbsSum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsSum",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_AbsSum",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsSum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsSum",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_AbsSum((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SumOfSquares(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_SumOfSquares",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SumOfSquares",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_SumOfSquares",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SumOfSquares",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SumOfSquares",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_SumOfSquares((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Mean(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_Mean",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Mean",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_Mean",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Mean",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mean",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Mean",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Mean",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_Mean((SLData_t const *)arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_AbsMean(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLArrayIndex_t arg3 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_AbsMean",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_AbsMean",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_AbsMean",2,"SLData_t const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_AbsMean",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMean",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_AbsMean",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_AbsMean",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_AbsMean((SLData_t const *)arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SubtractMean(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_SubtractMean",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SubtractMean",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SubtractMean",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SubtractMean",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_SubtractMean",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SubtractMean",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SubtractMean",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SubtractMean",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SubtractMean",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_SubtractMean((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SubtractMax(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_SubtractMax",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SubtractMax",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_SubtractMax",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_SubtractMax",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SubtractMax",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SubtractMax",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SubtractMax",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_SubtractMax((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_SampleSd(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_SampleSd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_SampleSd",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_SampleSd",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_SampleSd",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_SampleSd",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_SampleSd((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PopulationSd(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PopulationSd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PopulationSd",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_PopulationSd",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PopulationSd",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PopulationSd",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_PopulationSd((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_UnbiasedVariance(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_UnbiasedVariance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_UnbiasedVariance",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_UnbiasedVariance",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_UnbiasedVariance",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_UnbiasedVariance",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  result = SDA_UnbiasedVariance((SLData_t const *)arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Median(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_Median",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Median",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Median",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Median",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Median",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Median",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Median",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_Median((SLData_t const *)arg1,arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LinraConstantCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LinraConstantCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LinraConstantCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LinraConstantCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LinraConstantCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraConstantCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraConstantCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LinraConstantCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_LinraConstantCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LinraRegressionCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LinraRegressionCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LinraRegressionCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LinraRegressionCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LinraRegressionCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraRegressionCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraRegressionCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LinraRegressionCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_LinraRegressionCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LinraCorrelationCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LinraCorrelationCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LinraCorrelationCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LinraCorrelationCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LinraCorrelationCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraCorrelationCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraCorrelationCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LinraCorrelationCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_LinraCorrelationCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LinraEstimateX(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LinraEstimateX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LinraEstimateX",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LinraEstimateX",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LinraEstimateX",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LinraEstimateX",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraEstimateX",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraEstimateX",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraEstimateX",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LinraEstimateX",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_LinraEstimateX((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LinraEstimateY(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LinraEstimateY",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LinraEstimateY",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LinraEstimateY",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LinraEstimateY",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LinraEstimateY",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraEstimateY",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraEstimateY",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LinraEstimateY",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LinraEstimateY",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_LinraEstimateY((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LograConstantCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LograConstantCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LograConstantCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LograConstantCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LograConstantCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograConstantCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograConstantCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LograConstantCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_LograConstantCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LograRegressionCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LograRegressionCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LograRegressionCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LograRegressionCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LograRegressionCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograRegressionCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograRegressionCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LograRegressionCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_LograRegressionCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LograCorrelationCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LograCorrelationCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LograCorrelationCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LograCorrelationCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LograCorrelationCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograCorrelationCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograCorrelationCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LograCorrelationCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_LograCorrelationCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LograEstimateX(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LograEstimateX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LograEstimateX",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LograEstimateX",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LograEstimateX",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LograEstimateX",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograEstimateX",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograEstimateX",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograEstimateX",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LograEstimateX",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_LograEstimateX((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_LograEstimateY(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_LograEstimateY",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_LograEstimateY",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_LograEstimateY",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_LograEstimateY",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_LograEstimateY",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograEstimateY",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograEstimateY",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_LograEstimateY",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_LograEstimateY",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_LograEstimateY((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExpraConstantCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_ExpraConstantCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExpraConstantCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExpraConstantCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ExpraConstantCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraConstantCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraConstantCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExpraConstantCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_ExpraConstantCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExpraRegressionCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_ExpraRegressionCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExpraRegressionCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExpraRegressionCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ExpraRegressionCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraRegressionCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraRegressionCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExpraRegressionCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_ExpraRegressionCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExpraCorrelationCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_ExpraCorrelationCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExpraCorrelationCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExpraCorrelationCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ExpraCorrelationCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraCorrelationCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraCorrelationCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExpraCorrelationCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_ExpraCorrelationCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExpraEstimateX(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_ExpraEstimateX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExpraEstimateX",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExpraEstimateX",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ExpraEstimateX",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ExpraEstimateX",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraEstimateX",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraEstimateX",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraEstimateX",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExpraEstimateX",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_ExpraEstimateX((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExpraEstimateY(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_ExpraEstimateY",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExpraEstimateY",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExpraEstimateY",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ExpraEstimateY",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ExpraEstimateY",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraEstimateY",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraEstimateY",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExpraEstimateY",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExpraEstimateY",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_ExpraEstimateY((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PowraConstantCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PowraConstantCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PowraConstantCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PowraConstantCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PowraConstantCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraConstantCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraConstantCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PowraConstantCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_PowraConstantCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PowraRegressionCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PowraRegressionCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PowraRegressionCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PowraRegressionCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PowraRegressionCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraRegressionCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraRegressionCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PowraRegressionCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_PowraRegressionCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PowraCorrelationCoeff(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PowraCorrelationCoeff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PowraCorrelationCoeff",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PowraCorrelationCoeff",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PowraCorrelationCoeff",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraCorrelationCoeff",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraCorrelationCoeff",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PowraCorrelationCoeff",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SDA_PowraCorrelationCoeff((SLData_t const *)arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PowraEstimateX(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PowraEstimateX",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PowraEstimateX",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PowraEstimateX",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PowraEstimateX",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_PowraEstimateX",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraEstimateX",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraEstimateX",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraEstimateX",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PowraEstimateX",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_PowraEstimateX((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PowraEstimateY(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDA_PowraEstimateY",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PowraEstimateY",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PowraEstimateY",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_PowraEstimateY",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_PowraEstimateY",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraEstimateY",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraEstimateY",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PowraEstimateY",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PowraEstimateY",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDA_PowraEstimateY((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Detrend(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_Detrend",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Detrend",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Detrend",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_Detrend",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_Detrend",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Detrend",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Detrend",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Detrend",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Detrend",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_Detrend((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExtractTrend(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ExtractTrend",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExtractTrend",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExtractTrend",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ExtractTrend",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ExtractTrend",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractTrend",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractTrend",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractTrend",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractTrend",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ExtractTrend((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Sin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Sin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Sin",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Sin",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Sin",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Sin",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Sin((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Cos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Cos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Cos",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Cos",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Cos",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Cos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Cos",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Cos((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Tan(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Tan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Tan",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Tan",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Tan",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Tan",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Tan",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Tan",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Tan((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FastSin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_FastSin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FastSin",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FastSin",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FastSin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastSin",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_FastSin(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FastSin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_FastSin",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FastSin",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FastSin",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FastSin",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FastSin",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FastSin",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FastSin",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSin",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSin",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastSin",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastSin",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_FastSin((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FastSin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_FastSin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_FastSin",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FastSin",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_FastSin",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_FastSin",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastSin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastSin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastSin",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FastSin",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDS_FastSin((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FastCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_FastCos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FastCos",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FastCos",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FastCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastCos",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_FastCos(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FastCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDA_FastCos",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FastCos",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FastCos",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FastCos",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_FastCos",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FastCos",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FastCos",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCos",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastCos",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastCos",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastCos",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDA_FastCos((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FastCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_FastCos",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_FastCos",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FastCos",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_FastCos",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDS_FastCos",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastCos",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FastCos",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SDS_FastCos((SLData_t const *)arg1,arg2,arg3,arg4);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_FastSinCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SIF_FastSinCos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_FastSinCos",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SIF_FastSinCos",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_FastSinCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_FastSinCos",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SIF_FastSinCos(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FastSinCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_FastSinCos",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FastSinCos",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_FastSinCos",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_FastSinCos",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_FastSinCos",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_FastSinCos",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_FastSinCos",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_FastSinCos",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSinCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSinCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSinCos",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSinCos",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_FastSinCos",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastSinCos",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FastSinCos",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_FastSinCos((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_FastSinCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDS_FastSinCos",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDS_FastSinCos",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_FastSinCos",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_FastSinCos",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_FastSinCos",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_FastSinCos",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_FastSinCos",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastSinCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastSinCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastSinCos",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastSinCos",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_FastSinCos",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_FastSinCos",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDS_FastSinCos((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_QuickSin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_QuickSin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_QuickSin",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_QuickSin",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_QuickSin",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickSin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickSin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QuickSin",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_QuickSin(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QuickSin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_QuickSin",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_QuickSin",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QuickSin",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_QuickSin",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_QuickSin",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_QuickSin",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSin",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSin",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSin",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QuickSin",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_QuickSin((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_QuickSin(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_QuickSin",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_QuickSin",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_QuickSin",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_QuickSin",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSin",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSin",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSin",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_QuickSin(arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_QuickCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_QuickCos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_QuickCos",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_QuickCos",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_QuickCos",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QuickCos",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_QuickCos(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QuickCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_QuickCos",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_QuickCos",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QuickCos",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_QuickCos",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_QuickCos",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_QuickCos",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickCos",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickCos",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QuickCos",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_QuickCos((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_QuickCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_QuickCos",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_QuickCos",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_QuickCos",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_QuickCos",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickCos",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickCos",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_QuickCos(arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_QuickSinCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_QuickSinCos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_QuickSinCos",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_QuickSinCos",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_QuickSinCos",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickSinCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickSinCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QuickSinCos",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_QuickSinCos(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QuickSinCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SDA_QuickSinCos",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_QuickSinCos",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QuickSinCos",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_QuickSinCos",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_QuickSinCos",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_QuickSinCos",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDA_QuickSinCos",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_QuickSinCos",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinCos",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinCos",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinCos",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinCos",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QuickSinCos",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QuickSinCos",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SDA_QuickSinCos((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_QuickSinCos(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLData_t *argp1 ;
  SLData_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SDS_QuickSinCos",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_QuickSinCos",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_QuickSinCos",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDS_QuickSinCos",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDS_QuickSinCos",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDS_QuickSinCos",5,"SLData_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SDS_QuickSinCos",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSinCos",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSinCos",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSinCos",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSinCos",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSinCos",5,SWIGTYPE_p_SLData_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDS_QuickSinCos",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SDS_QuickSinCos(arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_QuickTan(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SIF_QuickTan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_QuickTan",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_QuickTan",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_QuickTan",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickTan",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickTan",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QuickTan",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SIF_QuickTan(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QuickTan(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_QuickTan",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_QuickTan",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QuickTan",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_QuickTan",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_QuickTan",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_QuickTan",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickTan",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickTan",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickTan",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickTan",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QuickTan",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_QuickTan((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_QuickTan(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_QuickTan",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_QuickTan",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_QuickTan",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_QuickTan",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickTan",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickTan",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickTan",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_QuickTan(arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_Sinc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_Sinc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_Sinc",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_Sinc",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_Sinc",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sinc",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_Sinc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_Sinc",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_Sinc((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_Sinc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_Sinc",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_Sinc",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_Sinc",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_Sinc(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SIF_QuickSinc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SIF_QuickSinc",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SIF_QuickSinc",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SIF_QuickSinc",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SIF_QuickSinc",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SIF_QuickSinc",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickSinc",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickSinc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SIF_QuickSinc",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SIF_QuickSinc",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SIF_QuickSinc(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_QuickSinc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLData_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_QuickSinc",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_QuickSinc",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_QuickSinc",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_QuickSinc",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_QuickSinc",4,"SLData_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_QuickSinc",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinc",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinc",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_QuickSinc",4,SWIGTYPE_p_SLData_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_QuickSinc",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_QuickSinc((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_QuickSinc(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t arg3 ;
  SLData_t *argp1 ;
  SLData_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_QuickSinc",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_QuickSinc",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDS_QuickSinc",2,"SLData_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDS_QuickSinc",3,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSinc",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSinc",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_QuickSinc",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  result = SDS_QuickSinc(arg1,(SLData_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Polar(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLComplexPolar_s result;
  
  SWIG_check_num_args("SCV_Polar",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Polar",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Polar",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_Polar",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_Polar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SCV_Polar(arg1,arg2);
  {
    SLComplexPolar_s * resultptr = new SLComplexPolar_s((const SLComplexPolar_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexPolar_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Rectangular(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Rectangular",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Rectangular",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Rectangular",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_Rectangular",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_Rectangular",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SCV_Rectangular(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_PolarToRectangular(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s arg1 ;
  SLComplexPolar_s *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_PolarToRectangular",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_PolarToRectangular",1,"SLComplexPolar_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SCV_PolarToRectangular",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  arg1 = *argp1;
  
  result = SCV_PolarToRectangular(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_RectangularToPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLComplexPolar_s result;
  
  SWIG_check_num_args("SCV_RectangularToPolar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_RectangularToPolar",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_RectangularToPolar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_RectangularToPolar(arg1);
  {
    SLComplexPolar_s * resultptr = new SLComplexPolar_s((const SLComplexPolar_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexPolar_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Sqrt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Sqrt",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Sqrt",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_Sqrt(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Inverse(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Inverse",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Inverse",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Inverse",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_Inverse(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Conjugate(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Conjugate",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Conjugate",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Conjugate",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_Conjugate(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Magnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SCV_Magnitude",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Magnitude",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Magnitude",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_Magnitude(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_MagnitudeSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SCV_MagnitudeSquared",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_MagnitudeSquared",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_MagnitudeSquared",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_MagnitudeSquared(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Phase(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SCV_Phase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Phase",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Phase",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_Phase(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Multiply(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Multiply",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Multiply",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Multiply",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Multiply",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Multiply",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SCV_Multiply(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Divide(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Divide",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Divide",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Divide",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Divide",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Divide",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SCV_Divide(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Add(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Add",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Add",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Add",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Add",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Add",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SCV_Add(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Subtract(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Subtract",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Subtract",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Subtract",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Subtract",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Subtract",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SCV_Subtract(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Log(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Log",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Log",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Log",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_Log(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Exp(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Exp",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Exp",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Exp",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_Exp(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Expj(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Expj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Expj",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_Expj",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SCV_Expj(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Pow(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLData_t arg2 ;
  SLComplexRect_s *argp1 ;
  SLData_t *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Pow",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Pow",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Pow",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Pow",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_Pow",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SCV_Pow(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_VectorAddScalar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLData_t arg2 ;
  SLComplexRect_s *argp1 ;
  SLData_t *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_VectorAddScalar",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_VectorAddScalar",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_VectorAddScalar",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_VectorAddScalar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_VectorAddScalar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SCV_VectorAddScalar(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_VectorSubtractScalar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLData_t arg2 ;
  SLComplexRect_s *argp1 ;
  SLData_t *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_VectorSubtractScalar",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_VectorSubtractScalar",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_VectorSubtractScalar",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_VectorSubtractScalar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_VectorSubtractScalar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SCV_VectorSubtractScalar(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_VectorMultiplyScalar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLData_t arg2 ;
  SLComplexRect_s *argp1 ;
  SLData_t *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_VectorMultiplyScalar",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_VectorMultiplyScalar",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_VectorMultiplyScalar",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_VectorMultiplyScalar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_VectorMultiplyScalar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SCV_VectorMultiplyScalar(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_VectorDivideScalar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLData_t arg2 ;
  SLComplexRect_s *argp1 ;
  SLData_t *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_VectorDivideScalar",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_VectorDivideScalar",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_VectorDivideScalar",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_VectorDivideScalar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_VectorDivideScalar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SCV_VectorDivideScalar(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_ScalarSubtractVector(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLComplexRect_s arg2 ;
  SLData_t *argp1 ;
  SLComplexRect_s *argp2 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_ScalarSubtractVector",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_ScalarSubtractVector",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_ScalarSubtractVector",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SCV_ScalarSubtractVector",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_ScalarSubtractVector",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = SCV_ScalarSubtractVector(arg1,arg2);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Roots(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s arg3 ;
  SLComplexRect_s *arg4 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg5 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLComplexRect_s *argp3 ;
  
  SWIG_check_num_args("SCV_Roots",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Roots",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Roots",2,"SLComplexRect_s const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SCV_Roots",3,"SLComplexRect_s const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SCV_Roots",4,"SLComplexRect_s *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SCV_Roots",5,"SLComplexRect_s *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Roots",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Roots",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Roots",3,SWIGTYPE_p_SLComplexRect_s);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Roots",4,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Roots",5,SWIGTYPE_p_SLComplexRect_s);
  }
  
  SCV_Roots(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Copy(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s result;
  
  SWIG_check_num_args("SCV_Copy",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Copy",1,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Copy",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  result = SCV_Copy(arg1);
  {
    SLComplexRect_s * resultptr = new SLComplexRect_s((const SLComplexRect_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLComplexRect_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SCV_Compare(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  enum SLCompareType_t result;
  
  SWIG_check_num_args("SCV_Compare",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SCV_Compare",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SCV_Compare",2,"SLComplexRect_s const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Compare",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SCV_Compare",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  result = (enum SLCompareType_t)SCV_Compare(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CreateComplexRect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_CreateComplexRect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CreateComplexRect",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CreateComplexRect",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CreateComplexRect",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CreateComplexRect",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CreateComplexRect",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CreateComplexRect",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_CreateComplexRect",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CreateComplexRect",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_CreateComplexRect((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_CreateComplexPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLComplexPolar_s *arg3 = (SLComplexPolar_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_CreateComplexPolar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_CreateComplexPolar",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_CreateComplexPolar",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_CreateComplexPolar",3,"SLComplexPolar_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_CreateComplexPolar",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CreateComplexPolar",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_CreateComplexPolar",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_CreateComplexPolar",3,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_CreateComplexPolar",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_CreateComplexPolar((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExtractComplexRect(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ExtractComplexRect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExtractComplexRect",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExtractComplexRect",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ExtractComplexRect",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ExtractComplexRect",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ExtractComplexRect",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractComplexRect",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractComplexRect",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractComplexRect",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ExtractComplexRect((SLComplexRect_s const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ExtractComplexPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s *arg1 = (SLComplexPolar_s *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ExtractComplexPolar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ExtractComplexPolar",1,"SLComplexPolar_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ExtractComplexPolar",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ExtractComplexPolar",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ExtractComplexPolar",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_ExtractComplexPolar",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractComplexPolar",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ExtractComplexPolar",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ExtractComplexPolar",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ExtractComplexPolar((SLComplexPolar_s const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ClearComplexRect(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SDA_ClearComplexRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ClearComplexRect",1,"SLComplexRect_s *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ClearComplexRect",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ClearComplexRect",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ClearComplexRect",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SDA_ClearComplexRect(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ClearComplexPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s *arg1 = (SLComplexPolar_s *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SDA_ClearComplexPolar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ClearComplexPolar",1,"SLComplexPolar_s *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ClearComplexPolar",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_ClearComplexPolar",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ClearComplexPolar",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SDA_ClearComplexPolar(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FillComplexRect(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s arg2 ;
  SLArrayIndex_t arg3 ;
  SLComplexRect_s *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_FillComplexRect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FillComplexRect",1,"SLComplexRect_s *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FillComplexRect",2,"SLComplexRect_s const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_FillComplexRect",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_FillComplexRect",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_FillComplexRect",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FillComplexRect",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_FillComplexRect(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_FillComplexPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s *arg1 = (SLComplexPolar_s *) 0 ;
  SLComplexPolar_s arg2 ;
  SLArrayIndex_t arg3 ;
  SLComplexPolar_s *argp2 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_FillComplexPolar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_FillComplexPolar",1,"SLComplexPolar_s *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_FillComplexPolar",2,"SLComplexPolar_s const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_FillComplexPolar",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_FillComplexPolar",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_FillComplexPolar",2,SWIGTYPE_p_SLComplexPolar_s);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_FillComplexPolar",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_FillComplexPolar(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectangularToPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexPolar_s *arg2 = (SLComplexPolar_s *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectangularToPolar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectangularToPolar",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectangularToPolar",2,"SLComplexPolar_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectangularToPolar",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectangularToPolar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectangularToPolar",2,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectangularToPolar",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectangularToPolar((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexPolarToRectangular(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s *arg1 = (SLComplexPolar_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexPolarToRectangular",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexPolarToRectangular",1,"SLComplexPolar_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexPolarToRectangular",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexPolarToRectangular",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_ComplexPolarToRectangular",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexPolarToRectangular",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexPolarToRectangular",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexPolarToRectangular((SLComplexPolar_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_RectangularToPolar(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_RectangularToPolar",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_RectangularToPolar",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_RectangularToPolar",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_RectangularToPolar",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_RectangularToPolar",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_RectangularToPolar",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RectangularToPolar",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RectangularToPolar",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RectangularToPolar",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_RectangularToPolar",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_RectangularToPolar",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_RectangularToPolar((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_PolarToRectangular(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SDA_PolarToRectangular",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_PolarToRectangular",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_PolarToRectangular",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_PolarToRectangular",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_PolarToRectangular",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SDA_PolarToRectangular",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PolarToRectangular",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PolarToRectangular",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PolarToRectangular",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_PolarToRectangular",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_PolarToRectangular",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SDA_PolarToRectangular((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectSqrt(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectSqrt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectSqrt",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectSqrt",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectSqrt",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectSqrt",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectSqrt",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectSqrt",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectSqrt((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectInverse(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectInverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectInverse",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectInverse",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectInverse",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectInverse",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectInverse",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectInverse",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectInverse((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectConjugate(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectConjugate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectConjugate",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectConjugate",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectConjugate",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectConjugate",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectConjugate",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectConjugate",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectConjugate((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectMagnitude",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectMagnitude",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectMagnitude",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectMagnitude",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectMagnitude",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectMagnitude",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectMagnitude",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectMagnitude((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectMagnitudeSquared(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectMagnitudeSquared",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectMagnitudeSquared",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectMagnitudeSquared",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectMagnitudeSquared",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectMagnitudeSquared",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectMagnitudeSquared",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectMagnitudeSquared",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectMagnitudeSquared((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectPhase(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectPhase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectPhase",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectPhase",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectPhase",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectPhase",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectPhase",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectPhase",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectPhase((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectMultiply(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectMultiply",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectMultiply",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectMultiply",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectMultiply",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectMultiply",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectMultiply",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectMultiply",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectMultiply",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectMultiply",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectMultiply((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectDivide(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectDivide",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectDivide",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectDivide",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectDivide",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectDivide",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectDivide",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectDivide",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectDivide",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectDivide",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectDivide((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectAdd(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectAdd",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectAdd",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectAdd",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectAdd",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectAdd",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectAdd",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectAdd",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectAdd",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectAdd",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectAdd((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectSubtract(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectSubtract",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectSubtract",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectSubtract",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectSubtract",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectSubtract",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectSubtract",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectSubtract",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectSubtract",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectSubtract",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectSubtract((SLComplexRect_s const *)arg1,(SLComplexRect_s const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectLog(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectLog",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectLog",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectLog",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectLog",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectLog",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectLog",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectLog",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectLog((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectExp(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectExp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectExp",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectExp",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectExp",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectExp",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectExp",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectExp",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectExp((SLComplexRect_s const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectExpj(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ComplexRectExpj",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectExpj",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectExpj",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectExpj",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectExpj",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectExpj",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectExpj",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ComplexRectExpj((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectPow(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLData_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectPow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectPow",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexRectPow",2,"SLComplexRect_s *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ComplexRectPow",3,"SLData_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectPow",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectPow",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectPow",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectPow",3,SWIGTYPE_p_SLData_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectPow",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectPow((SLComplexRect_s const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectAddScalar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t arg2 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectAddScalar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectAddScalar",1,"SLComplexRect_s const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ComplexRectAddScalar",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectAddScalar",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectAddScalar",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectAddScalar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectAddScalar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectAddScalar",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectAddScalar",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectAddScalar((SLComplexRect_s const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectSubtractScalar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t arg2 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectSubtractScalar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectSubtractScalar",1,"SLComplexRect_s const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ComplexRectSubtractScalar",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectSubtractScalar",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectSubtractScalar",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectSubtractScalar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectSubtractScalar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectSubtractScalar",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectSubtractScalar",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectSubtractScalar((SLComplexRect_s const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectMultiplyScalar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t arg2 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectMultiplyScalar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectMultiplyScalar",1,"SLComplexRect_s const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ComplexRectMultiplyScalar",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectMultiplyScalar",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectMultiplyScalar",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectMultiplyScalar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectMultiplyScalar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectMultiplyScalar",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectMultiplyScalar",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectMultiplyScalar((SLComplexRect_s const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectDivideScalar(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLData_t arg2 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectDivideScalar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ComplexRectDivideScalar",1,"SLComplexRect_s const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ComplexRectDivideScalar",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectDivideScalar",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectDivideScalar",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectDivideScalar",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectDivideScalar",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectDivideScalar",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectDivideScalar",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectDivideScalar((SLComplexRect_s const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexScalarSubtractRect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp1 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexScalarSubtractRect",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_ComplexScalarSubtractRect",1,"SLData_t const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ComplexScalarSubtractRect",2,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexScalarSubtractRect",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexScalarSubtractRect",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarSubtractRect",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexScalarSubtractRect",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexScalarSubtractRect",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexScalarSubtractRect",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexScalarSubtractRect(arg1,(SLComplexRect_s const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexRectLinearInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s arg1 ;
  SLComplexRect_s arg2 ;
  SLComplexRect_s *arg3 = (SLComplexRect_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLComplexRect_s *argp1 ;
  SLComplexRect_s *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexRectLinearInterpolate",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_ComplexRectLinearInterpolate",1,"SLComplexRect_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ComplexRectLinearInterpolate",2,"SLComplexRect_s const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexRectLinearInterpolate",3,"SLComplexRect_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexRectLinearInterpolate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectLinearInterpolate",1,SWIGTYPE_p_SLComplexRect_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectLinearInterpolate",2,SWIGTYPE_p_SLComplexRect_s);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SDA_ComplexRectLinearInterpolate",3,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexRectLinearInterpolate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexRectLinearInterpolate(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ComplexPolarLinearInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexPolar_s arg1 ;
  SLComplexPolar_s arg2 ;
  SLComplexPolar_s *arg3 = (SLComplexPolar_s *) 0 ;
  SLArrayIndex_t arg4 ;
  SLComplexPolar_s *argp1 ;
  SLComplexPolar_s *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ComplexPolarLinearInterpolate",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDA_ComplexPolarLinearInterpolate",1,"SLComplexPolar_s const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ComplexPolarLinearInterpolate",2,"SLComplexPolar_s const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ComplexPolarLinearInterpolate",3,"SLComplexPolar_s *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ComplexPolarLinearInterpolate",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_ComplexPolarLinearInterpolate",1,SWIGTYPE_p_SLComplexPolar_s);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_ComplexPolarLinearInterpolate",2,SWIGTYPE_p_SLComplexPolar_s);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLComplexPolar_s,0))){
    SWIG_fail_ptr("SDA_ComplexPolarLinearInterpolate",3,SWIGTYPE_p_SLComplexPolar_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ComplexPolarLinearInterpolate",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ComplexPolarLinearInterpolate(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_Transpose(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_Transpose",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_Transpose",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_Transpose",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_Transpose",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_Transpose",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Transpose",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Transpose",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Transpose",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Transpose",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_Transpose((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_Multiply(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SMX_Multiply",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_Multiply",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_Multiply",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_Multiply",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_Multiply",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_Multiply",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_Multiply",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Multiply",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Multiply",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Multiply",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Multiply",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Multiply",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Multiply",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SMX_Multiply((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_CreateIdentity(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t arg2 ;
  SLArrayIndex_t *argp2 ;
  
  SWIG_check_num_args("SMX_CreateIdentity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_CreateIdentity",1,"SLData_t *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SMX_CreateIdentity",2,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_CreateIdentity",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_CreateIdentity",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg2 = *argp2;
  
  SMX_CreateIdentity(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_Inverse2x2(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLError_t result;
  
  SWIG_check_num_args("SMX_Inverse2x2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_Inverse2x2",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_Inverse2x2",2,"SLData_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Inverse2x2",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Inverse2x2",2,SWIGTYPE_p_SLData_t);
  }
  
  result = SMX_Inverse2x2((SLData_t const *)arg1,arg2);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_ComplexInverse2x2(lua_State* L) {
  int SWIG_arg = 0;
  SLComplexRect_s *arg1 = (SLComplexRect_s *) 0 ;
  SLComplexRect_s *arg2 = (SLComplexRect_s *) 0 ;
  SLError_t result;
  
  SWIG_check_num_args("SMX_ComplexInverse2x2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_ComplexInverse2x2",1,"SLComplexRect_s const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_ComplexInverse2x2",2,"SLComplexRect_s *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SMX_ComplexInverse2x2",1,SWIGTYPE_p_SLComplexRect_s);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLComplexRect_s,0))){
    SWIG_fail_ptr("SMX_ComplexInverse2x2",2,SWIGTYPE_p_SLComplexRect_s);
  }
  
  result = SMX_ComplexInverse2x2((SLComplexRect_s const *)arg1,arg2);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_Inverse(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg5 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp7 ;
  SLError_t result;
  
  SWIG_check_num_args("SMX_Inverse",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_Inverse",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_Inverse",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_Inverse",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SMX_Inverse",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SMX_Inverse",5,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SMX_Inverse",6,"SLData_t *");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SMX_Inverse",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Inverse",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Inverse",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Inverse",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Inverse",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Inverse",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Inverse",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Inverse",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  result = SMX_Inverse((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_LuDecompose(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  SLError_t result;
  
  SWIG_check_num_args("SMX_LuDecompose",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_LuDecompose",1,"SLData_t *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_LuDecompose",2,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_LuDecompose",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_LuDecompose",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_LuDecompose",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_LuDecompose",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_LuDecompose",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_LuDecompose",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  result = SMX_LuDecompose(arg1,arg2,arg3,arg4);
  {
    SLError_t * resultptr = new SLError_t((const SLError_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLError_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_LuSolve(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_LuSolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_LuSolve",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_LuSolve",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_LuSolve",3,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_LuSolve",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_LuSolve",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_LuSolve",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_LuSolve",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_LuSolve",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_LuSolve((SLData_t const *)arg1,arg2,(SLArrayIndex_t const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_Determinant(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg3 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp5 ;
  SLData_t result;
  
  SWIG_check_num_args("SMX_Determinant",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_Determinant",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_Determinant",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_Determinant",3,"SLArrayIndex_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SMX_Determinant",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_Determinant",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Determinant",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Determinant",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Determinant",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Determinant",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Determinant",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  result = SMX_Determinant((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_LuDeterminant(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  SLData_t result;
  
  SWIG_check_num_args("SMX_LuDeterminant",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_LuDeterminant",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_LuDeterminant",2,"SLArrayIndex_t const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_LuDeterminant",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_LuDeterminant",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_LuDeterminant",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_LuDeterminant",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  result = SMX_LuDeterminant((SLData_t const *)arg1,(SLArrayIndex_t const *)arg2,arg3);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_RotateClockwise(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_RotateClockwise",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_RotateClockwise",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_RotateClockwise",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_RotateClockwise",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_RotateClockwise",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_RotateClockwise",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_RotateClockwise",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_RotateClockwise",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_RotateClockwise",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_RotateClockwise((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_RotateAntiClockwise(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_RotateAntiClockwise",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_RotateAntiClockwise",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_RotateAntiClockwise",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_RotateAntiClockwise",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_RotateAntiClockwise",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_RotateAntiClockwise",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_RotateAntiClockwise",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_RotateAntiClockwise",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_RotateAntiClockwise",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_RotateAntiClockwise((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_Reflect(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_Reflect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_Reflect",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_Reflect",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_Reflect",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_Reflect",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Reflect",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Reflect",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Reflect",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Reflect",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_Reflect((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_Flip(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_Flip",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_Flip",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_Flip",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_Flip",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_Flip",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Flip",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Flip",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Flip",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Flip",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_Flip((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_InsertRow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SMX_InsertRow",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_InsertRow",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_InsertRow",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_InsertRow",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_InsertRow",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_InsertRow",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_InsertRow",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertRow",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertRow",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertRow",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRow",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRow",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRow",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SMX_InsertRow((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_ExtractRow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_ExtractRow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_ExtractRow",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_ExtractRow",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_ExtractRow",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_ExtractRow",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractRow",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractRow",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractRow",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractRow",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_ExtractRow((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_InsertColumn(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SMX_InsertColumn",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_InsertColumn",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_InsertColumn",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_InsertColumn",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_InsertColumn",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_InsertColumn",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_InsertColumn",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertColumn",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertColumn",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertColumn",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertColumn",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertColumn",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertColumn",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SMX_InsertColumn((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_ExtractColumn(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SMX_ExtractColumn",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_ExtractColumn",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_ExtractColumn",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_ExtractColumn",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_ExtractColumn",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_ExtractColumn",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractColumn",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractColumn",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractColumn",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractColumn",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractColumn",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SMX_ExtractColumn((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_InsertNewRow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SMX_InsertNewRow",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_InsertNewRow",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_InsertNewRow",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_InsertNewRow",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_InsertNewRow",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_InsertNewRow",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_InsertNewRow",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertNewRow",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertNewRow",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertNewRow",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertNewRow",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertNewRow",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertNewRow",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SMX_InsertNewRow((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_DeleteOldRow(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SMX_DeleteOldRow",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_DeleteOldRow",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_DeleteOldRow",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_DeleteOldRow",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_DeleteOldRow",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_DeleteOldRow",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldRow",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldRow",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldRow",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldRow",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldRow",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SMX_DeleteOldRow((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_InsertNewColumn(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SMX_InsertNewColumn",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_InsertNewColumn",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_InsertNewColumn",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_InsertNewColumn",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_InsertNewColumn",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_InsertNewColumn",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_InsertNewColumn",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertNewColumn",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertNewColumn",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertNewColumn",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertNewColumn",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertNewColumn",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertNewColumn",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SMX_InsertNewColumn((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_DeleteOldColumn(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SMX_DeleteOldColumn",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_DeleteOldColumn",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_DeleteOldColumn",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_DeleteOldColumn",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_DeleteOldColumn",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_DeleteOldColumn",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldColumn",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldColumn",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldColumn",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldColumn",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_DeleteOldColumn",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SMX_DeleteOldColumn((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_InsertRegion(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t arg8 ;
  SLArrayIndex_t arg9 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  SLArrayIndex_t *argp8 ;
  SLArrayIndex_t *argp9 ;
  
  SWIG_check_num_args("SMX_InsertRegion",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_InsertRegion",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_InsertRegion",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_InsertRegion",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_InsertRegion",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_InsertRegion",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_InsertRegion",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SMX_InsertRegion",7,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SMX_InsertRegion",8,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SMX_InsertRegion",9,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",8,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg8 = *argp8;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertRegion",9,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg9 = *argp9;
  
  SMX_InsertRegion((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_ExtractRegion(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t arg7 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  SLArrayIndex_t *argp7 ;
  
  SWIG_check_num_args("SMX_ExtractRegion",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_ExtractRegion",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_ExtractRegion",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_ExtractRegion",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_ExtractRegion",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_ExtractRegion",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_ExtractRegion",6,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SMX_ExtractRegion",7,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractRegion",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractRegion",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractRegion",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractRegion",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractRegion",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractRegion",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractRegion",7,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg7 = *argp7;
  
  SMX_ExtractRegion((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_InsertDiagonal(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_InsertDiagonal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_InsertDiagonal",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_InsertDiagonal",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_InsertDiagonal",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_InsertDiagonal",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertDiagonal",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertDiagonal",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_InsertDiagonal",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_InsertDiagonal",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_InsertDiagonal((SLData_t const *)arg1,(SLData_t const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_ExtractDiagonal(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SMX_ExtractDiagonal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_ExtractDiagonal",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_ExtractDiagonal",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_ExtractDiagonal",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractDiagonal",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractDiagonal",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractDiagonal",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SMX_ExtractDiagonal((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_SwapRows(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SMX_SwapRows",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_SwapRows",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_SwapRows",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_SwapRows",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_SwapRows",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_SwapRows",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_SwapRows",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_SwapRows",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_SwapRows",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_SwapRows",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_SwapRows",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_SwapRows",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_SwapRows",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SMX_SwapRows((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_SwapColumns(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SMX_SwapColumns",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_SwapColumns",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_SwapColumns",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_SwapColumns",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_SwapColumns",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_SwapColumns",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_SwapColumns",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_SwapColumns",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_SwapColumns",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_SwapColumns",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_SwapColumns",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_SwapColumns",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_SwapColumns",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SMX_SwapColumns((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_Sum(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_Sum",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_Sum",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_Sum",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_Sum",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_Sum",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Sum",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_Sum",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Sum",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_Sum",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_Sum((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_ShuffleColumns(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t arg6 ;
  SLArrayIndex_t *argp5 ;
  SLArrayIndex_t *argp6 ;
  
  SWIG_check_num_args("SMX_ShuffleColumns",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_ShuffleColumns",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_ShuffleColumns",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_ShuffleColumns",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SMX_ShuffleColumns",4,"SLData_t *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_ShuffleColumns",5,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("SMX_ShuffleColumns",6,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ShuffleColumns",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ShuffleColumns",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ShuffleColumns",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ShuffleColumns",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ShuffleColumns",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ShuffleColumns",6,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg6 = *argp6;
  
  SMX_ShuffleColumns((SLData_t const *)arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_ShuffleRows(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t arg5 ;
  SLArrayIndex_t *argp4 ;
  SLArrayIndex_t *argp5 ;
  
  SWIG_check_num_args("SMX_ShuffleRows",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_ShuffleRows",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_ShuffleRows",2,"SLData_t *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SMX_ShuffleRows",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_ShuffleRows",4,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("SMX_ShuffleRows",5,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ShuffleRows",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ShuffleRows",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ShuffleRows",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ShuffleRows",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ShuffleRows",5,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg5 = *argp5;
  
  SMX_ShuffleRows((SLData_t const *)arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SMX_ExtractCategoricalColumn(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t arg4 ;
  SLArrayIndex_t *argp3 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SMX_ExtractCategoricalColumn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SMX_ExtractCategoricalColumn",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SMX_ExtractCategoricalColumn",2,"SLArrayIndex_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SMX_ExtractCategoricalColumn",3,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SMX_ExtractCategoricalColumn",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SMX_ExtractCategoricalColumn",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractCategoricalColumn",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractCategoricalColumn",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SMX_ExtractCategoricalColumn",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SMX_ExtractCategoricalColumn((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TwoLayer2CategoryNetworkFit(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  enum SLActivationType_t arg7 ;
  SLData_t arg8 ;
  enum SLActivationType_t arg9 ;
  SLData_t arg10 ;
  SLData_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLData_t *argp8 ;
  SLData_t *argp10 ;
  SLData_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  
  SWIG_check_num_args("SDA_TwoLayer2CategoryNetworkFit",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",2,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",6,"SLData_t *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",7,"enum SLActivationType_t const");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",8,"SLData_t const");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",9,"enum SLActivationType_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",10,"SLData_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",11,"SLData_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",12,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",13,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkFit",14,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",6,SWIGTYPE_p_SLData_t);
  }
  
  arg7 = (enum SLActivationType_t const)(int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",8,SWIGTYPE_p_SLData_t);
  }
  arg8 = *argp8;
  
  arg9 = (enum SLActivationType_t const)(int)lua_tonumber(L, 9);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",10,SWIGTYPE_p_SLData_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",11,SWIGTYPE_p_SLData_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkFit",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  SDA_TwoLayer2CategoryNetworkFit((SLData_t const *)arg1,(SLArrayIndex_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TwoLayer2CategoryNetworkPredict(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  enum SLActivationType_t arg6 ;
  SLData_t arg7 ;
  enum SLActivationType_t arg8 ;
  SLData_t arg9 ;
  SLData_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLData_t *argp7 ;
  SLData_t *argp9 ;
  SLData_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLNeuralNetworkPrediction_s result;
  
  SWIG_check_num_args("SDA_TwoLayer2CategoryNetworkPredict",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",5,"SLData_t *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",6,"enum SLActivationType_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",7,"SLData_t const");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",8,"enum SLActivationType_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",9,"SLData_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",10,"SLData_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_TwoLayer2CategoryNetworkPredict",12,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",5,SWIGTYPE_p_SLData_t);
  }
  
  arg6 = (enum SLActivationType_t const)(int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  arg8 = (enum SLActivationType_t const)(int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",10,SWIGTYPE_p_SLData_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayer2CategoryNetworkPredict",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  result = SDA_TwoLayer2CategoryNetworkPredict((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  {
    SLNeuralNetworkPrediction_s * resultptr = new SLNeuralNetworkPrediction_s((const SLNeuralNetworkPrediction_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLNeuralNetworkPrediction_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TwoLayerNCategoryNetworkFit(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLArrayIndex_t *arg2 = (SLArrayIndex_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  SLData_t *arg6 = (SLData_t *) 0 ;
  SLData_t *arg7 = (SLData_t *) 0 ;
  enum SLActivationType_t arg8 ;
  SLData_t arg9 ;
  enum SLActivationType_t arg10 ;
  SLData_t arg11 ;
  SLData_t arg12 ;
  SLArrayIndex_t arg13 ;
  SLArrayIndex_t arg14 ;
  SLArrayIndex_t arg15 ;
  SLArrayIndex_t arg16 ;
  SLData_t *argp9 ;
  SLData_t *argp11 ;
  SLData_t *argp12 ;
  SLArrayIndex_t *argp13 ;
  SLArrayIndex_t *argp14 ;
  SLArrayIndex_t *argp15 ;
  SLArrayIndex_t *argp16 ;
  
  SWIG_check_num_args("SDA_TwoLayerNCategoryNetworkFit",16,16)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",2,"SLArrayIndex_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",3,"SLData_t *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",5,"SLData_t *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",6,"SLData_t *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",7,"SLData_t *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",8,"enum SLActivationType_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",9,"SLData_t const");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",10,"enum SLActivationType_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",11,"SLData_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",12,"SLData_t const");
  if(!lua_isuserdata(L,13)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",13,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,14)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",14,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,15)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",15,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,16)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkFit",16,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",2,SWIGTYPE_p_SLArrayIndex_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",5,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",6,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",7,SWIGTYPE_p_SLData_t);
  }
  
  arg8 = (enum SLActivationType_t const)(int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  arg10 = (enum SLActivationType_t const)(int)lua_tonumber(L, 10);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",11,SWIGTYPE_p_SLData_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",12,SWIGTYPE_p_SLData_t);
  }
  arg12 = *argp12;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,13,(void**)&argp13,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",13,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg13 = *argp13;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,14,(void**)&argp14,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",14,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg14 = *argp14;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,15,(void**)&argp15,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",15,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg15 = *argp15;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,16,(void**)&argp16,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkFit",16,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg16 = *argp16;
  
  SDA_TwoLayerNCategoryNetworkFit((SLData_t const *)arg1,(SLArrayIndex_t const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_TwoLayerNCategoryNetworkPredict(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLData_t *arg4 = (SLData_t *) 0 ;
  SLData_t *arg5 = (SLData_t *) 0 ;
  enum SLActivationType_t arg6 ;
  SLData_t arg7 ;
  enum SLActivationType_t arg8 ;
  SLData_t arg9 ;
  SLArrayIndex_t arg10 ;
  SLArrayIndex_t arg11 ;
  SLArrayIndex_t arg12 ;
  SLData_t *argp7 ;
  SLData_t *argp9 ;
  SLArrayIndex_t *argp10 ;
  SLArrayIndex_t *argp11 ;
  SLArrayIndex_t *argp12 ;
  SLNeuralNetworkPrediction_s result;
  
  SWIG_check_num_args("SDA_TwoLayerNCategoryNetworkPredict",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",2,"SLData_t const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",3,"SLData_t const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",4,"SLData_t *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",5,"SLData_t *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",6,"enum SLActivationType_t const");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",7,"SLData_t const");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",8,"enum SLActivationType_t const");
  if(!lua_isuserdata(L,9)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",9,"SLData_t const");
  if(!lua_isuserdata(L,10)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",10,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,11)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",11,"SLArrayIndex_t const");
  if(!lua_isuserdata(L,12)) SWIG_fail_arg("SDA_TwoLayerNCategoryNetworkPredict",12,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",4,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",5,SWIGTYPE_p_SLData_t);
  }
  
  arg6 = (enum SLActivationType_t const)(int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",7,SWIGTYPE_p_SLData_t);
  }
  arg7 = *argp7;
  
  arg8 = (enum SLActivationType_t const)(int)lua_tonumber(L, 8);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,9,(void**)&argp9,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",9,SWIGTYPE_p_SLData_t);
  }
  arg9 = *argp9;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,10,(void**)&argp10,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",10,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg10 = *argp10;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,11,(void**)&argp11,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",11,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg11 = *argp11;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,12,(void**)&argp12,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_TwoLayerNCategoryNetworkPredict",12,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg12 = *argp12;
  
  result = SDA_TwoLayerNCategoryNetworkPredict((SLData_t const *)arg1,(SLData_t const *)arg2,(SLData_t const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  {
    SLNeuralNetworkPrediction_s * resultptr = new SLNeuralNetworkPrediction_s((const SLNeuralNetworkPrediction_s &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLNeuralNetworkPrediction_s,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ActivationReLU(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ActivationReLU",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ActivationReLU",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationReLU",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_ActivationReLU(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ActivationReLU(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ActivationReLU",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ActivationReLU",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ActivationReLU",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ActivationReLU",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationReLU",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationReLU",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ActivationReLU",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ActivationReLU((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ActivationReLUDerivative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ActivationReLUDerivative",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ActivationReLUDerivative",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationReLUDerivative",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_ActivationReLUDerivative(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ActivationReLUDerivative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ActivationReLUDerivative",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ActivationReLUDerivative",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ActivationReLUDerivative",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ActivationReLUDerivative",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationReLUDerivative",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationReLUDerivative",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ActivationReLUDerivative",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ActivationReLUDerivative((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ActivationLeakyReLU(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ActivationLeakyReLU",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ActivationLeakyReLU",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ActivationLeakyReLU",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationLeakyReLU",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationLeakyReLU",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_ActivationLeakyReLU(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ActivationLeakyReLU(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ActivationLeakyReLU",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ActivationLeakyReLU",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ActivationLeakyReLU",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ActivationLeakyReLU",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ActivationLeakyReLU",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLeakyReLU",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLeakyReLU",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLeakyReLU",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ActivationLeakyReLU",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ActivationLeakyReLU((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ActivationLeakyReLUDerivative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t arg2 ;
  SLData_t *argp1 ;
  SLData_t *argp2 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ActivationLeakyReLUDerivative",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ActivationLeakyReLUDerivative",1,"SLData_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDS_ActivationLeakyReLUDerivative",2,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationLeakyReLUDerivative",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationLeakyReLUDerivative",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  result = SDS_ActivationLeakyReLUDerivative(arg1,arg2);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ActivationLeakyReLUDerivative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t arg2 ;
  SLData_t *arg3 = (SLData_t *) 0 ;
  SLArrayIndex_t arg4 ;
  SLData_t *argp2 ;
  SLArrayIndex_t *argp4 ;
  
  SWIG_check_num_args("SDA_ActivationLeakyReLUDerivative",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ActivationLeakyReLUDerivative",1,"SLData_t const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SDA_ActivationLeakyReLUDerivative",2,"SLData_t const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SDA_ActivationLeakyReLUDerivative",3,"SLData_t *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SDA_ActivationLeakyReLUDerivative",4,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLeakyReLUDerivative",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLeakyReLUDerivative",2,SWIGTYPE_p_SLData_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLeakyReLUDerivative",3,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ActivationLeakyReLUDerivative",4,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg4 = *argp4;
  
  SDA_ActivationLeakyReLUDerivative((SLData_t const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ActivationLogistic(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ActivationLogistic",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ActivationLogistic",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationLogistic",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_ActivationLogistic(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ActivationLogistic(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ActivationLogistic",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ActivationLogistic",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ActivationLogistic",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ActivationLogistic",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLogistic",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLogistic",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ActivationLogistic",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ActivationLogistic((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ActivationLogisticDerivative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ActivationLogisticDerivative",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ActivationLogisticDerivative",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationLogisticDerivative",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_ActivationLogisticDerivative(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ActivationLogisticDerivative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ActivationLogisticDerivative",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ActivationLogisticDerivative",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ActivationLogisticDerivative",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ActivationLogisticDerivative",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLogisticDerivative",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationLogisticDerivative",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ActivationLogisticDerivative",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ActivationLogisticDerivative((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ActivationTanH(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ActivationTanH",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ActivationTanH",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationTanH",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_ActivationTanH(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ActivationTanH(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ActivationTanH",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ActivationTanH",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ActivationTanH",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ActivationTanH",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationTanH",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationTanH",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ActivationTanH",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ActivationTanH((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDS_ActivationTanHDerivative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t arg1 ;
  SLData_t *argp1 ;
  SLData_t result;
  
  SWIG_check_num_args("SDS_ActivationTanHDerivative",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SDS_ActivationTanHDerivative",1,"SLData_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDS_ActivationTanHDerivative",1,SWIGTYPE_p_SLData_t);
  }
  arg1 = *argp1;
  
  result = SDS_ActivationTanHDerivative(arg1);
  {
    SLData_t * resultptr = new SLData_t((const SLData_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SLData_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDA_ActivationTanHDerivative(lua_State* L) {
  int SWIG_arg = 0;
  SLData_t *arg1 = (SLData_t *) 0 ;
  SLData_t *arg2 = (SLData_t *) 0 ;
  SLArrayIndex_t arg3 ;
  SLArrayIndex_t *argp3 ;
  
  SWIG_check_num_args("SDA_ActivationTanHDerivative",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SDA_ActivationTanHDerivative",1,"SLData_t const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SDA_ActivationTanHDerivative",2,"SLData_t *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SDA_ActivationTanHDerivative",3,"SLArrayIndex_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationTanHDerivative",1,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SLData_t,0))){
    SWIG_fail_ptr("SDA_ActivationTanHDerivative",2,SWIGTYPE_p_SLData_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SLArrayIndex_t,0))){
    SWIG_fail_ptr("SDA_ActivationTanHDerivative",3,SWIGTYPE_p_SLArrayIndex_t);
  }
  arg3 = *argp3;
  
  SDA_ActivationTanHDerivative((SLData_t const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fe_divbyzero", FE_DIVBYZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_inexact", FE_INEXACT)},
    {SWIG_LUA_CONSTTAB_INT("fe_invalid", FE_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("fe_overflow", FE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_underflow", FE_UNDERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_all_except", FE_ALL_EXCEPT)},
    {SWIG_LUA_CONSTTAB_INT("fe_downward", FE_DOWNWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_tonearest", FE_TONEAREST)},
    {SWIG_LUA_CONSTTAB_INT("fe_towardzero", FE_TOWARDZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_upward", FE_UPWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_dfl_env", FE_DFL_ENV)},
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("SIGLIB", 1)},
    {SWIG_LUA_CONSTTAB_FLOAT("SIGLIB_VERSION", 10.11)},
    {SWIG_LUA_CONSTTAB_INT("SIGLIB_ENABLE_DEBUG_FPRINTF", 0)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "crealf", _wrap_crealf},
    { "creald", _wrap_creald},
    { "cimagf", _wrap_cimagf},
    { "cimagd", _wrap_cimagd},
    { "cabsf", _wrap_cabsf},
    { "cabsd", _wrap_cabsd},
    { "cargf", _wrap_cargf},
    { "cargd", _wrap_cargd},
    { "cnormf", _wrap_cnormf},
    { "cnormd", _wrap_cnormd},
    { "cprojf", _wrap_cprojf},
    { "cpolarf", _wrap_cpolarf},
    { "cpolard", _wrap_cpolard},
    { "cexpf", _wrap_cexpf},
    { "cexpd", _wrap_cexpd},
    { "clogf", _wrap_clogf},
    { "clogd", _wrap_clogd},
    { "clog10f", _wrap_clog10f},
    { "clog10d", _wrap_clog10d},
    { "cpowf", _wrap_cpowf},
    { "cpowd", _wrap_cpowd},
    { "csqrtf", _wrap_csqrtf},
    { "csqrtd", _wrap_csqrtd},
    { "csinf", _wrap_csinf},
    { "csind", _wrap_csind},
    { "ccosf", _wrap_ccosf},
    { "ccosd", _wrap_ccosd},
    { "ctanf", _wrap_ctanf},
    { "ctand", _wrap_ctand},
    { "casinf", _wrap_casinf},
    { "casind", _wrap_casind},
    { "cacosf", _wrap_cacosf},
    { "cacosd", _wrap_cacosd},
    { "catanf", _wrap_catanf},
    { "catand", _wrap_catand},
    { "csinhf", _wrap_csinhf},
    { "csinhd", _wrap_csinhd},
    { "ccoshf", _wrap_ccoshf},
    { "ccoshd", _wrap_ccoshd},
    { "ctanhf", _wrap_ctanhf},
    { "ctanhd", _wrap_ctanhd},
    { "casinhf", _wrap_casinhf},
    { "casinhd", _wrap_casinhd},
    { "cacoshf", _wrap_cacoshf},
    { "cacoshd", _wrap_cacoshd},
    { "catanhf", _wrap_catanhf},
    { "catanhd", _wrap_catanhd},
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "feclearexcept", _wrap_feclearexcept},
    { "fegetexceptflag", _wrap_fegetexceptflag},
    { "feraiseexcept", _wrap_feraiseexcept},
    { "fesetexceptflag", _wrap_fesetexceptflag},
    { "fetestexcept", _wrap_fetestexcept},
    { "fegetround", _wrap_fegetround},
    { "fesetround", _wrap_fesetround},
    { "fegetenv", _wrap_fegetenv},
    { "feholdexcept", _wrap_feholdexcept},
    { "fesetenv", _wrap_fesetenv},
    { "feupdateenv", _wrap_feupdateenv},
    { "SUF_SiglibVersion", _wrap_SUF_SiglibVersion},
    { "SUF_PrintArray", _wrap_SUF_PrintArray},
    { "SUF_PrintFixedPointArray", _wrap_SUF_PrintFixedPointArray},
    { "SUF_PrintComplexArray", _wrap_SUF_PrintComplexArray},
    { "SUF_PrintMatrix", _wrap_SUF_PrintMatrix},
    { "SUF_PrintPolar", _wrap_SUF_PrintPolar},
    { "SUF_PrintRectangular", _wrap_SUF_PrintRectangular},
    { "SUF_PrintIIRCoefficients", _wrap_SUF_PrintIIRCoefficients},
    { "SUF_PrintCount", _wrap_SUF_PrintCount},
    { "SUF_PrintHigher", _wrap_SUF_PrintHigher},
    { "SUF_PrintLower", _wrap_SUF_PrintLower},
    { "SUF_ClearDebugfprintf", _wrap_SUF_ClearDebugfprintf},
    { "SUF_Debugfprintf", _wrap_SUF_Debugfprintf},
    { "SUF_DebugPrintArray", _wrap_SUF_DebugPrintArray},
    { "SUF_DebugPrintFixedPointArray", _wrap_SUF_DebugPrintFixedPointArray},
    { "SUF_DebugPrintComplexArray", _wrap_SUF_DebugPrintComplexArray},
    { "SUF_DebugPrintMatrix", _wrap_SUF_DebugPrintMatrix},
    { "SUF_DebugPrintPolar", _wrap_SUF_DebugPrintPolar},
    { "SUF_DebugPrintRectangular", _wrap_SUF_DebugPrintRectangular},
    { "SUF_DebugPrintIIRCoefficients", _wrap_SUF_DebugPrintIIRCoefficients},
    { "SUF_DebugPrintCount", _wrap_SUF_DebugPrintCount},
    { "SUF_DebugPrintHigher", _wrap_SUF_DebugPrintHigher},
    { "SUF_DebugPrintLower", _wrap_SUF_DebugPrintLower},
    { "SUF_StrError", _wrap_SUF_StrError},
    { "SUF_BinReadData", _wrap_SUF_BinReadData},
    { "SUF_BinWriteData", _wrap_SUF_BinWriteData},
    { "SUF_BinReadFile", _wrap_SUF_BinReadFile},
    { "SUF_BinWriteFile", _wrap_SUF_BinWriteFile},
    { "SUF_CsvReadData", _wrap_SUF_CsvReadData},
    { "SUF_CsvWriteData", _wrap_SUF_CsvWriteData},
    { "SUF_CsvReadFile", _wrap_SUF_CsvReadFile},
    { "SUF_CsvWriteFile", _wrap_SUF_CsvWriteFile},
    { "SUF_CsvReadMatrix", _wrap_SUF_CsvReadMatrix},
    { "SUF_DatReadData", _wrap_SUF_DatReadData},
    { "SUF_DatWriteData", _wrap_SUF_DatWriteData},
    { "SUF_DatReadHeader", _wrap_SUF_DatReadHeader},
    { "SUF_DatWriteHeader", _wrap_SUF_DatWriteHeader},
    { "SUF_SigReadData", _wrap_SUF_SigReadData},
    { "SUF_SigWriteData", _wrap_SUF_SigWriteData},
    { "SUF_SigReadFile", _wrap_SUF_SigReadFile},
    { "SUF_SigWriteFile", _wrap_SUF_SigWriteFile},
    { "SUF_SigCountSamplesInFile", _wrap_SUF_SigCountSamplesInFile},
    { "SUF_WavReadData", _wrap_SUF_WavReadData},
    { "SUF_WavWriteData", _wrap_SUF_WavWriteData},
    { "SUF_WavReadWord", _wrap_SUF_WavReadWord},
    { "SUF_WavWriteWord", _wrap_SUF_WavWriteWord},
    { "SUF_WavReadHeader", _wrap_SUF_WavReadHeader},
    { "SUF_WavWriteHeader", _wrap_SUF_WavWriteHeader},
    { "SUF_WavDisplayInfo", _wrap_SUF_WavDisplayInfo},
    { "SUF_WavSetInfo", _wrap_SUF_WavSetInfo},
    { "SUF_WavFileLength", _wrap_SUF_WavFileLength},
    { "SUF_WavReadFile", _wrap_SUF_WavReadFile},
    { "SUF_WavWriteFile", _wrap_SUF_WavWriteFile},
    { "SUF_WavWriteFileScaled", _wrap_SUF_WavWriteFileScaled},
    { "SUF_XmtReadData", _wrap_SUF_XmtReadData},
    { "SUF_WriteWeightsIntegerCFile", _wrap_SUF_WriteWeightsIntegerCFile},
    { "SUF_WriteWeightsFloatCFile", _wrap_SUF_WriteWeightsFloatCFile},
    { "SUF_WriteWeightsBinaryFile", _wrap_SUF_WriteWeightsBinaryFile},
    { "SUF_ReadWeightsBinaryFile", _wrap_SUF_ReadWeightsBinaryFile},
    { "SIF_Fft", _wrap_SIF_Fft},
    { "SDA_Rfft", _wrap_SDA_Rfft},
    { "SDA_Cfft", _wrap_SDA_Cfft},
    { "SDA_Cifft", _wrap_SDA_Cifft},
    { "SDA_BitReverseReorder", _wrap_SDA_BitReverseReorder},
    { "SDA_IndexBitReverseReorder", _wrap_SDA_IndexBitReverseReorder},
    { "SIF_FastBitReverseReorder", _wrap_SIF_FastBitReverseReorder},
    { "SDA_RealRealCepstrum", _wrap_SDA_RealRealCepstrum},
    { "SDA_RealComplexCepstrum", _wrap_SDA_RealComplexCepstrum},
    { "SDA_ComplexComplexCepstrum", _wrap_SDA_ComplexComplexCepstrum},
    { "SIF_FftTone", _wrap_SIF_FftTone},
    { "SDA_RfftTone", _wrap_SDA_RfftTone},
    { "SDA_Rfftr", _wrap_SDA_Rfftr},
    { "SIF_Fft4", _wrap_SIF_Fft4},
    { "SDA_Rfft4", _wrap_SDA_Rfft4},
    { "SDA_Cfft4", _wrap_SDA_Cfft4},
    { "SDA_DigitReverseReorder4", _wrap_SDA_DigitReverseReorder4},
    { "SDA_IndexDigitReverseReorder4", _wrap_SDA_IndexDigitReverseReorder4},
    { "SIF_FastDigitReverseReorder4", _wrap_SIF_FastDigitReverseReorder4},
    { "SDA_Cfft2rBy1c", _wrap_SDA_Cfft2rBy1c},
    { "SDA_Cfft2rBy1cr", _wrap_SDA_Cfft2rBy1cr},
    { "SDA_Cfft42rBy1c", _wrap_SDA_Cfft42rBy1c},
    { "SDA_Cfft42rBy1cr", _wrap_SDA_Cfft42rBy1cr},
    { "SDS_Cfft2", _wrap_SDS_Cfft2},
    { "SDA_Cfft2", _wrap_SDA_Cfft2},
    { "SDS_Cfft3", _wrap_SDS_Cfft3},
    { "SDA_Cfft3", _wrap_SDA_Cfft3},
    { "SIF_ZoomFft", _wrap_SIF_ZoomFft},
    { "SDA_ZoomFft", _wrap_SDA_ZoomFft},
    { "SIF_ZoomFftSimple", _wrap_SIF_ZoomFftSimple},
    { "SDA_ZoomFftSimple", _wrap_SDA_ZoomFftSimple},
    { "SIF_FdHilbert", _wrap_SIF_FdHilbert},
    { "SDA_FdHilbert", _wrap_SDA_FdHilbert},
    { "SIF_FdAnalytic", _wrap_SIF_FdAnalytic},
    { "SDA_FdAnalytic", _wrap_SDA_FdAnalytic},
    { "SDA_InstantFreq", _wrap_SDA_InstantFreq},
    { "SDA_Rdft", _wrap_SDA_Rdft},
    { "SDA_Ridft", _wrap_SDA_Ridft},
    { "SDA_Cdft", _wrap_SDA_Cdft},
    { "SDA_Cidft", _wrap_SDA_Cidft},
    { "SDA_FftShift", _wrap_SDA_FftShift},
    { "SDA_CfftShift", _wrap_SDA_CfftShift},
    { "SDA_FftExtend", _wrap_SDA_FftExtend},
    { "SDA_CfftExtend", _wrap_SDA_CfftExtend},
    { "SIF_DctII", _wrap_SIF_DctII},
    { "SDA_DctII", _wrap_SDA_DctII},
    { "SIF_DctIIOrthogonal", _wrap_SIF_DctIIOrthogonal},
    { "SDA_DctIIOrthogonal", _wrap_SDA_DctIIOrthogonal},
    { "SIF_FftArb", _wrap_SIF_FftArb},
    { "SUF_FftArbAllocLength", _wrap_SUF_FftArbAllocLength},
    { "SDA_RfftArb", _wrap_SDA_RfftArb},
    { "SDA_CfftArb", _wrap_SDA_CfftArb},
    { "SDA_CifftArb", _wrap_SDA_CifftArb},
    { "SIF_FastAutoCrossPowerSpectrum", _wrap_SIF_FastAutoCrossPowerSpectrum},
    { "SDA_FastAutoPowerSpectrum", _wrap_SDA_FastAutoPowerSpectrum},
    { "SDA_FastCrossPowerSpectrum", _wrap_SDA_FastCrossPowerSpectrum},
    { "SIF_ArbAutoCrossPowerSpectrum", _wrap_SIF_ArbAutoCrossPowerSpectrum},
    { "SDA_ArbAutoPowerSpectrum", _wrap_SDA_ArbAutoPowerSpectrum},
    { "SDA_ArbCrossPowerSpectrum", _wrap_SDA_ArbCrossPowerSpectrum},
    { "SIF_WelchPowerSpectrum", _wrap_SIF_WelchPowerSpectrum},
    { "SDA_WelchRealPowerSpectrum", _wrap_SDA_WelchRealPowerSpectrum},
    { "SDA_WelchComplexPowerSpectrum", _wrap_SDA_WelchComplexPowerSpectrum},
    { "SIF_MagnitudeSquaredCoherence", _wrap_SIF_MagnitudeSquaredCoherence},
    { "SDA_MagnitudeSquaredCoherence", _wrap_SDA_MagnitudeSquaredCoherence},
    { "SIF_FirOverlapAdd", _wrap_SIF_FirOverlapAdd},
    { "SDA_FirOverlapAdd", _wrap_SDA_FirOverlapAdd},
    { "SIF_FirOverlapSave", _wrap_SIF_FirOverlapSave},
    { "SDA_FirOverlapSave", _wrap_SDA_FirOverlapSave},
    { "SIF_FftConvolvePre", _wrap_SIF_FftConvolvePre},
    { "SDA_FftConvolvePre", _wrap_SDA_FftConvolvePre},
    { "SDA_FftConvolveArb", _wrap_SDA_FftConvolveArb},
    { "SIF_FftCorrelatePre", _wrap_SIF_FftCorrelatePre},
    { "SDA_FftCorrelatePre", _wrap_SDA_FftCorrelatePre},
    { "SDA_FftCorrelateArb", _wrap_SDA_FftCorrelateArb},
    { "SIF_Czt", _wrap_SIF_Czt},
    { "SIF_Awn", _wrap_SIF_Awn},
    { "SIF_Vl", _wrap_SIF_Vl},
    { "SIF_Wm", _wrap_SIF_Wm},
    { "SIF_Window", _wrap_SIF_Window},
    { "SIF_TableTopWindow", _wrap_SIF_TableTopWindow},
    { "SDA_Window", _wrap_SDA_Window},
    { "SDA_ComplexWindow", _wrap_SDA_ComplexWindow},
    { "SDA_WindowInverseCoherentGain", _wrap_SDA_WindowInverseCoherentGain},
    { "SDA_WindowEquivalentNoiseBandwidth", _wrap_SDA_WindowEquivalentNoiseBandwidth},
    { "SDA_WindowProcessingGain", _wrap_SDA_WindowProcessingGain},
    { "SDS_I0Bessel", _wrap_SDS_I0Bessel},
    { "SIF_Fir", _wrap_SIF_Fir},
    { "SDS_Fir", _wrap_SDS_Fir},
    { "SDA_Fir", _wrap_SDA_Fir},
    { "SDS_FirAddSample", _wrap_SDS_FirAddSample},
    { "SDA_FirAddSamples", _wrap_SDA_FirAddSamples},
    { "SIF_Comb", _wrap_SIF_Comb},
    { "SDS_Comb", _wrap_SDS_Comb},
    { "SDA_Comb", _wrap_SDA_Comb},
    { "SIF_FirComplex", _wrap_SIF_FirComplex},
    { "SDS_FirComplex", _wrap_SDS_FirComplex},
    { "SDA_FirComplex", _wrap_SDA_FirComplex},
    { "SIF_FirWithStore", _wrap_SIF_FirWithStore},
    { "SDS_FirWithStore", _wrap_SDS_FirWithStore},
    { "SDA_FirWithStore", _wrap_SDA_FirWithStore},
    { "SIF_FirComplexWithStore", _wrap_SIF_FirComplexWithStore},
    { "SDS_FirComplexWithStore", _wrap_SDS_FirComplexWithStore},
    { "SDA_FirComplexWithStore", _wrap_SDA_FirComplexWithStore},
    { "SDS_FirWithStoreAddSample", _wrap_SDS_FirWithStoreAddSample},
    { "SDA_FirWithStoreAddSamples", _wrap_SDA_FirWithStoreAddSamples},
    { "SIF_FirExtendedArray", _wrap_SIF_FirExtendedArray},
    { "SDS_FirExtendedArray", _wrap_SDS_FirExtendedArray},
    { "SDA_FirExtendedArray", _wrap_SDA_FirExtendedArray},
    { "SIF_FirComplexExtendedArray", _wrap_SIF_FirComplexExtendedArray},
    { "SDS_FirComplexExtendedArray", _wrap_SDS_FirComplexExtendedArray},
    { "SDA_FirComplexExtendedArray", _wrap_SDA_FirComplexExtendedArray},
    { "SDS_FirExtendedArrayAddSample", _wrap_SDS_FirExtendedArrayAddSample},
    { "SDA_FirExtendedArrayAddSamples", _wrap_SDA_FirExtendedArrayAddSamples},
    { "SIF_FirLowPassFilter", _wrap_SIF_FirLowPassFilter},
    { "SIF_FirHighPassFilter", _wrap_SIF_FirHighPassFilter},
    { "SIF_FirBandPassFilter", _wrap_SIF_FirBandPassFilter},
    { "SIF_FirLowPassFilterWindow", _wrap_SIF_FirLowPassFilterWindow},
    { "SIF_FirHighPassFilterWindow", _wrap_SIF_FirHighPassFilterWindow},
    { "SIF_FirBandPassFilterWindow", _wrap_SIF_FirBandPassFilterWindow},
    { "SUF_FirKaiserApproximation", _wrap_SUF_FirKaiserApproximation},
    { "SIF_FirMatchedFilter", _wrap_SIF_FirMatchedFilter},
    { "SDA_FirFilterInverseCoherentGain", _wrap_SDA_FirFilterInverseCoherentGain},
    { "SIF_TappedDelayLine", _wrap_SIF_TappedDelayLine},
    { "SDS_TappedDelayLine", _wrap_SDS_TappedDelayLine},
    { "SDA_TappedDelayLine", _wrap_SDA_TappedDelayLine},
    { "SIF_TappedDelayLineComplex", _wrap_SIF_TappedDelayLineComplex},
    { "SDS_TappedDelayLineComplex", _wrap_SDS_TappedDelayLineComplex},
    { "SDA_TappedDelayLineComplex", _wrap_SDA_TappedDelayLineComplex},
    { "SIF_TappedDelayLineIQ", _wrap_SIF_TappedDelayLineIQ},
    { "SDS_TappedDelayLineIQ", _wrap_SDS_TappedDelayLineIQ},
    { "SDA_TappedDelayLineIQ", _wrap_SDA_TappedDelayLineIQ},
    { "SIF_FirPolyPhaseGenerate", _wrap_SIF_FirPolyPhaseGenerate},
    { "SIF_Iir", _wrap_SIF_Iir},
    { "SDS_Iir", _wrap_SDS_Iir},
    { "SDA_Iir", _wrap_SDA_Iir},
    { "SDS_IirMac", _wrap_SDS_IirMac},
    { "SDA_IirMac", _wrap_SDA_IirMac},
    { "SIF_IirOrderN", _wrap_SIF_IirOrderN},
    { "SDS_IirOrderN", _wrap_SDS_IirOrderN},
    { "SDA_IirOrderN", _wrap_SDA_IirOrderN},
    { "SIF_IirNc", _wrap_SIF_IirNc},
    { "SDA_IirNc", _wrap_SDA_IirNc},
    { "SDA_BilinearTransform", _wrap_SDA_BilinearTransform},
    { "SDS_PreWarp", _wrap_SDS_PreWarp},
    { "SDA_MatchedZTransform", _wrap_SDA_MatchedZTransform},
    { "SDA_IirZplaneToCoeffs", _wrap_SDA_IirZplaneToCoeffs},
    { "SDA_IirZplanePolarToCoeffs", _wrap_SDA_IirZplanePolarToCoeffs},
    { "SDA_IirZplaneLpfToLpf", _wrap_SDA_IirZplaneLpfToLpf},
    { "SDA_IirZplaneLpfToHpf", _wrap_SDA_IirZplaneLpfToHpf},
    { "SDA_IirZplaneLpfToBpf", _wrap_SDA_IirZplaneLpfToBpf},
    { "SDA_IirZplaneLpfToBsf", _wrap_SDA_IirZplaneLpfToBsf},
    { "SDA_IirModifyFilterGain", _wrap_SDA_IirModifyFilterGain},
    { "SIF_IirLowPassFilter", _wrap_SIF_IirLowPassFilter},
    { "SIF_IirHighPassFilter", _wrap_SIF_IirHighPassFilter},
    { "SIF_IirAllPassFilter", _wrap_SIF_IirAllPassFilter},
    { "SIF_IirBandPassFilter", _wrap_SIF_IirBandPassFilter},
    { "SIF_IirNotchFilter", _wrap_SIF_IirNotchFilter},
    { "SIF_IirPeakingFilter", _wrap_SIF_IirPeakingFilter},
    { "SIF_IirLowShelfFilter", _wrap_SIF_IirLowShelfFilter},
    { "SIF_IirHighShelfFilter", _wrap_SIF_IirHighShelfFilter},
    { "SDS_IirRemoveDC", _wrap_SDS_IirRemoveDC},
    { "SDA_IirRemoveDC", _wrap_SDA_IirRemoveDC},
    { "SIF_OnePole", _wrap_SIF_OnePole},
    { "SDS_OnePole", _wrap_SDS_OnePole},
    { "SDA_OnePole", _wrap_SDA_OnePole},
    { "SDS_OnePoleNormalized", _wrap_SDS_OnePoleNormalized},
    { "SDA_OnePoleNormalized", _wrap_SDA_OnePoleNormalized},
    { "SDA_OnePolePerSample", _wrap_SDA_OnePolePerSample},
    { "SIF_OnePoleHighPass", _wrap_SIF_OnePoleHighPass},
    { "SDS_OnePoleHighPass", _wrap_SDS_OnePoleHighPass},
    { "SDA_OnePoleHighPass", _wrap_SDA_OnePoleHighPass},
    { "SDS_OnePoleHighPassNormalized", _wrap_SDS_OnePoleHighPassNormalized},
    { "SDA_OnePoleHighPassNormalized", _wrap_SDA_OnePoleHighPassNormalized},
    { "SDS_OnePoleTimeConstantToFilterCoeff", _wrap_SDS_OnePoleTimeConstantToFilterCoeff},
    { "SDS_OnePoleCutOffFrequencyToFilterCoeff", _wrap_SDS_OnePoleCutOffFrequencyToFilterCoeff},
    { "SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff", _wrap_SDS_OnePoleHighPassCutOffFrequencyToFilterCoeff},
    { "SIF_AllPole", _wrap_SIF_AllPole},
    { "SDS_AllPole", _wrap_SDS_AllPole},
    { "SDA_AllPole", _wrap_SDA_AllPole},
    { "SDA_ZDomainCoefficientReorg", _wrap_SDA_ZDomainCoefficientReorg},
    { "SIF_IirNotchFilter2", _wrap_SIF_IirNotchFilter2},
    { "SIF_IirNormalizedCoefficients", _wrap_SIF_IirNormalizedCoefficients},
    { "SIF_IirNormalizedSPlaneCoefficients", _wrap_SIF_IirNormalizedSPlaneCoefficients},
    { "SDA_TranslateSPlaneCutOffFrequency", _wrap_SDA_TranslateSPlaneCutOffFrequency},
    { "SDA_IirLpLpShift", _wrap_SDA_IirLpLpShift},
    { "SDA_IirLpHpShift", _wrap_SDA_IirLpHpShift},
    { "SIF_Iir2PoleLpf", _wrap_SIF_Iir2PoleLpf},
    { "SDS_Iir2Pole", _wrap_SDS_Iir2Pole},
    { "SDA_Iir2Pole", _wrap_SDA_Iir2Pole},
    { "SDA_IirNegateAlphaCoeffs", _wrap_SDA_IirNegateAlphaCoeffs},
    { "SDA_Integrate", _wrap_SDA_Integrate},
    { "SDA_Differentiate", _wrap_SDA_Differentiate},
    { "SIF_LeakyIntegrator", _wrap_SIF_LeakyIntegrator},
    { "SDS_LeakyIntegrator1", _wrap_SDS_LeakyIntegrator1},
    { "SDS_LeakyIntegrator2", _wrap_SDS_LeakyIntegrator2},
    { "SIF_HilbertTransformer", _wrap_SIF_HilbertTransformer},
    { "SIF_GoertzelFilter", _wrap_SIF_GoertzelFilter},
    { "SDA_GoertzelFilter", _wrap_SDA_GoertzelFilter},
    { "SDS_GoertzelFilter", _wrap_SDS_GoertzelFilter},
    { "SIF_GoertzelDetect", _wrap_SIF_GoertzelDetect},
    { "SDA_GoertzelDetect", _wrap_SDA_GoertzelDetect},
    { "SIF_GoertzelDetectComplex", _wrap_SIF_GoertzelDetectComplex},
    { "SDA_GoertzelDetectComplex", _wrap_SDA_GoertzelDetectComplex},
    { "SIF_GaussianFilter", _wrap_SIF_GaussianFilter},
    { "SIF_GaussianFilter2", _wrap_SIF_GaussianFilter2},
    { "SIF_RaisedCosineFilter", _wrap_SIF_RaisedCosineFilter},
    { "SIF_RootRaisedCosineFilter", _wrap_SIF_RootRaisedCosineFilter},
    { "SDS_ZTransform", _wrap_SDS_ZTransform},
    { "SDS_ZTransformDB", _wrap_SDS_ZTransformDB},
    { "SUF_EstimateBPFilterLength", _wrap_SUF_EstimateBPFilterLength},
    { "SUF_EstimateBPFilterError", _wrap_SUF_EstimateBPFilterError},
    { "SUF_FrequenciesToOctaves", _wrap_SUF_FrequenciesToOctaves},
    { "SUF_FrequenciesToCentreFreqHz", _wrap_SUF_FrequenciesToCentreFreqHz},
    { "SUF_FrequenciesToQFactor", _wrap_SUF_FrequenciesToQFactor},
    { "SUF_BandwidthToQFactor", _wrap_SUF_BandwidthToQFactor},
    { "SUF_QFactorToBandwidth", _wrap_SUF_QFactorToBandwidth},
    { "SDA_LinearMicrophoneArrayBeamPattern", _wrap_SDA_LinearMicrophoneArrayBeamPattern},
    { "SDA_LinearMicrophoneArrayBeamPatternLinear", _wrap_SDA_LinearMicrophoneArrayBeamPatternLinear},
    { "SDA_MicrophoneArrayCalculateDelays", _wrap_SDA_MicrophoneArrayCalculateDelays},
    { "SDA_MicrophoneArrayBeamPattern", _wrap_SDA_MicrophoneArrayBeamPattern},
    { "SDA_MicrophoneArrayBeamPatternLinear", _wrap_SDA_MicrophoneArrayBeamPatternLinear},
    { "SDS_TemperatureToSpeedOfSoundInAir", _wrap_SDS_TemperatureToSpeedOfSoundInAir},
    { "SIF_Lms", _wrap_SIF_Lms},
    { "SDS_Lms", _wrap_SDS_Lms},
    { "SDA_LmsUpdate", _wrap_SDA_LmsUpdate},
    { "SDA_LeakyLmsUpdate", _wrap_SDA_LeakyLmsUpdate},
    { "SDA_NormalizedLmsUpdate", _wrap_SDA_NormalizedLmsUpdate},
    { "SDA_SignErrorLmsUpdate", _wrap_SDA_SignErrorLmsUpdate},
    { "SDA_SignDataLmsUpdate", _wrap_SDA_SignDataLmsUpdate},
    { "SDA_SignSignLmsUpdate", _wrap_SDA_SignSignLmsUpdate},
    { "SDA_ConvolveLinear", _wrap_SDA_ConvolveLinear},
    { "SDA_ConvolvePartial", _wrap_SDA_ConvolvePartial},
    { "SDA_ConvolveCircular", _wrap_SDA_ConvolveCircular},
    { "SDA_ConvolveLinearComplex", _wrap_SDA_ConvolveLinearComplex},
    { "SDA_ConvolvePartialComplex", _wrap_SDA_ConvolvePartialComplex},
    { "SDA_ConvolveCircularComplex", _wrap_SDA_ConvolveCircularComplex},
    { "SDA_FftDeconvolution", _wrap_SDA_FftDeconvolution},
    { "SIF_FftDeconvolutionPre", _wrap_SIF_FftDeconvolutionPre},
    { "SDA_FftDeconvolutionPre", _wrap_SDA_FftDeconvolutionPre},
    { "SDA_CorrelateLinear", _wrap_SDA_CorrelateLinear},
    { "SDA_CorrelatePartial", _wrap_SDA_CorrelatePartial},
    { "SDA_CorrelateCircular", _wrap_SDA_CorrelateCircular},
    { "SDA_Covariance", _wrap_SDA_Covariance},
    { "SDA_CovariancePartial", _wrap_SDA_CovariancePartial},
    { "SDA_CorrelateLinearReturnPeak", _wrap_SDA_CorrelateLinearReturnPeak},
    { "SIF_FixedDelay", _wrap_SIF_FixedDelay},
    { "SDS_FixedDelay", _wrap_SDS_FixedDelay},
    { "SDA_FixedDelay", _wrap_SDA_FixedDelay},
    { "SIF_FixedDelayComplex", _wrap_SIF_FixedDelayComplex},
    { "SDS_FixedDelayComplex", _wrap_SDS_FixedDelayComplex},
    { "SDA_FixedDelayComplex", _wrap_SDA_FixedDelayComplex},
    { "SDA_ShortFixedDelay", _wrap_SDA_ShortFixedDelay},
    { "SIF_VariableDelay", _wrap_SIF_VariableDelay},
    { "SDS_VariableDelay", _wrap_SDS_VariableDelay},
    { "SDA_VariableDelay", _wrap_SDA_VariableDelay},
    { "SIF_VariableDelayComplex", _wrap_SIF_VariableDelayComplex},
    { "SDS_VariableDelayComplex", _wrap_SDS_VariableDelayComplex},
    { "SDA_VariableDelayComplex", _wrap_SDA_VariableDelayComplex},
    { "SUF_IncreaseVariableDelay", _wrap_SUF_IncreaseVariableDelay},
    { "SUF_DecreaseVariableDelay", _wrap_SUF_DecreaseVariableDelay},
    { "SDA_Align", _wrap_SDA_Align},
    { "SIM_Fft2d", _wrap_SIM_Fft2d},
    { "SIF_Fft2d", _wrap_SIF_Fft2d},
    { "SIM_Conv3x3", _wrap_SIM_Conv3x3},
    { "SIM_Sobel3x3", _wrap_SIM_Sobel3x3},
    { "SIM_SobelVertical3x3", _wrap_SIM_SobelVertical3x3},
    { "SIM_SobelHorizontal3x3", _wrap_SIM_SobelHorizontal3x3},
    { "SIM_Median3x3", _wrap_SIM_Median3x3},
    { "SIF_ConvCoefficients3x3", _wrap_SIF_ConvCoefficients3x3},
    { "SIM_Max", _wrap_SIM_Max},
    { "SIM_Min", _wrap_SIM_Min},
    { "SIF_Dct8x8", _wrap_SIF_Dct8x8},
    { "SIM_Dct8x8", _wrap_SIM_Dct8x8},
    { "SIM_Idct8x8", _wrap_SIM_Idct8x8},
    { "SIM_ZigZagScan", _wrap_SIM_ZigZagScan},
    { "SIM_ZigZagDescan", _wrap_SIM_ZigZagDescan},
    { "SDA_SignalGenerate", _wrap_SDA_SignalGenerate},
    { "SDS_SignalGenerate", _wrap_SDS_SignalGenerate},
    { "SIF_Resonator", _wrap_SIF_Resonator},
    { "SDA_Resonator", _wrap_SDA_Resonator},
    { "SIF_Resonator1", _wrap_SIF_Resonator1},
    { "SDA_Resonator1", _wrap_SDA_Resonator1},
    { "SDA_Resonator1Add", _wrap_SDA_Resonator1Add},
    { "SDA_SignalGeneratePolarWhiteNoise", _wrap_SDA_SignalGeneratePolarWhiteNoise},
    { "SDS_SignalGeneratePolarWhiteNoise", _wrap_SDS_SignalGeneratePolarWhiteNoise},
    { "SDA_SignalGeneratePolarGaussianNoise", _wrap_SDA_SignalGeneratePolarGaussianNoise},
    { "SDS_SignalGeneratePolarGaussianNoise", _wrap_SDS_SignalGeneratePolarGaussianNoise},
    { "SDA_SignalAddPolarJitterAndGaussianNoise", _wrap_SDA_SignalAddPolarJitterAndGaussianNoise},
    { "SDS_SignalAddPolarJitterAndGaussianNoise", _wrap_SDS_SignalAddPolarJitterAndGaussianNoise},
    { "SDA_Ramp", _wrap_SDA_Ramp},
    { "SIF_RandomNumber", _wrap_SIF_RandomNumber},
    { "SDS_RandomNumber", _wrap_SDS_RandomNumber},
    { "SDA_RandomNumber", _wrap_SDA_RandomNumber},
    { "SDA_BitErrorRate", _wrap_SDA_BitErrorRate},
    { "SDA_Interleave", _wrap_SDA_Interleave},
    { "SDA_Deinterleave", _wrap_SDA_Deinterleave},
    { "SCV_EuclideanDistance", _wrap_SCV_EuclideanDistance},
    { "SCV_EuclideanDistanceSquared", _wrap_SCV_EuclideanDistanceSquared},
    { "SCA_EuclideanDistance", _wrap_SCA_EuclideanDistance},
    { "SCA_EuclideanDistanceSquared", _wrap_SCA_EuclideanDistanceSquared},
    { "SDS_EuclideanDistance", _wrap_SDS_EuclideanDistance},
    { "SDS_EuclideanDistanceSquared", _wrap_SDS_EuclideanDistanceSquared},
    { "SDA_EuclideanDistance", _wrap_SDA_EuclideanDistance},
    { "SDA_EuclideanDistanceSquared", _wrap_SDA_EuclideanDistanceSquared},
    { "SDS_ManchesterEncode", _wrap_SDS_ManchesterEncode},
    { "SDS_ManchesterDecode", _wrap_SDS_ManchesterDecode},
    { "SDS_ManchesterEncodeByte", _wrap_SDS_ManchesterEncodeByte},
    { "SDS_ManchesterDecodeByte", _wrap_SDS_ManchesterDecodeByte},
    { "SIF_DetectNumericalWordSequence", _wrap_SIF_DetectNumericalWordSequence},
    { "SDS_DetectNumericalWordSequence", _wrap_SDS_DetectNumericalWordSequence},
    { "SIF_DetectNumericalBitSequence", _wrap_SIF_DetectNumericalBitSequence},
    { "SDS_DetectNumericalBitSequence", _wrap_SDS_DetectNumericalBitSequence},
    { "SIF_DetectCharacterSequence", _wrap_SIF_DetectCharacterSequence},
    { "SDS_DetectCharacterSequence", _wrap_SDS_DetectCharacterSequence},
    { "SDS_ErrorVector", _wrap_SDS_ErrorVector},
    { "SDS_ErrorVectorMagnitudePercent", _wrap_SDS_ErrorVectorMagnitudePercent},
    { "SDS_ErrorVectorMagnitudeDecibels", _wrap_SDS_ErrorVectorMagnitudeDecibels},
    { "SDS_ReverseDiBits", _wrap_SDS_ReverseDiBits},
    { "SDS_QpskBitErrorCount", _wrap_SDS_QpskBitErrorCount},
    { "SDS_BitErrorRate", _wrap_SDS_BitErrorRate},
    { "SIF_PhaseLockedLoop", _wrap_SIF_PhaseLockedLoop},
    { "SDS_PhaseLockedLoop", _wrap_SDS_PhaseLockedLoop},
    { "SDA_PhaseLockedLoop", _wrap_SDA_PhaseLockedLoop},
    { "SIF_CostasLoop", _wrap_SIF_CostasLoop},
    { "SDS_CostasLoop", _wrap_SDS_CostasLoop},
    { "SDA_CostasLoop", _wrap_SDA_CostasLoop},
    { "SRF_CostasLoop", _wrap_SRF_CostasLoop},
    { "SIF_180DegreePhaseDetect", _wrap_SIF_180DegreePhaseDetect},
    { "SDA_180DegreePhaseDetect", _wrap_SDA_180DegreePhaseDetect},
    { "SIF_TriggerReverberator", _wrap_SIF_TriggerReverberator},
    { "SDA_TriggerReverberator", _wrap_SDA_TriggerReverberator},
    { "SDS_TriggerReverberator", _wrap_SDS_TriggerReverberator},
    { "SDA_TriggerSelector", _wrap_SDA_TriggerSelector},
    { "SIF_EarlyLateGate", _wrap_SIF_EarlyLateGate},
    { "SDA_EarlyLateGate", _wrap_SDA_EarlyLateGate},
    { "SDA_EarlyLateGateDebug", _wrap_SDA_EarlyLateGateDebug},
    { "SDS_EarlyLateGate", _wrap_SDS_EarlyLateGate},
    { "SIF_EarlyLateGateSquarePulse", _wrap_SIF_EarlyLateGateSquarePulse},
    { "SDA_EarlyLateGateSquarePulse", _wrap_SDA_EarlyLateGateSquarePulse},
    { "SDA_EarlyLateGateSquarePulseDebug", _wrap_SDA_EarlyLateGateSquarePulseDebug},
    { "SDS_EarlyLateGateSquarePulse", _wrap_SDS_EarlyLateGateSquarePulse},
    { "SDS_ConvEncoderK3", _wrap_SDS_ConvEncoderK3},
    { "SIF_ViterbiDecoderK3", _wrap_SIF_ViterbiDecoderK3},
    { "SDS_ViterbiDecoderK3", _wrap_SDS_ViterbiDecoderK3},
    { "SDS_ConvEncoderV32", _wrap_SDS_ConvEncoderV32},
    { "SIF_ViterbiDecoderV32", _wrap_SIF_ViterbiDecoderV32},
    { "SDS_ViterbiDecoderV32", _wrap_SDS_ViterbiDecoderV32},
    { "SIF_AmplitudeModulate", _wrap_SIF_AmplitudeModulate},
    { "SDA_AmplitudeModulate", _wrap_SDA_AmplitudeModulate},
    { "SDS_AmplitudeModulate", _wrap_SDS_AmplitudeModulate},
    { "SIF_AmplitudeModulate2", _wrap_SIF_AmplitudeModulate2},
    { "SDA_AmplitudeModulate2", _wrap_SDA_AmplitudeModulate2},
    { "SDS_AmplitudeModulate2", _wrap_SDS_AmplitudeModulate2},
    { "SIF_ComplexShift", _wrap_SIF_ComplexShift},
    { "SDA_ComplexShift", _wrap_SDA_ComplexShift},
    { "SIF_FrequencyModulate", _wrap_SIF_FrequencyModulate},
    { "SDS_FrequencyModulate", _wrap_SDS_FrequencyModulate},
    { "SDA_FrequencyModulate", _wrap_SDA_FrequencyModulate},
    { "SDA_FrequencyDemodulate", _wrap_SDA_FrequencyDemodulate},
    { "SIF_FrequencyModulateComplex", _wrap_SIF_FrequencyModulateComplex},
    { "SDS_FrequencyModulateComplex", _wrap_SDS_FrequencyModulateComplex},
    { "SDA_FrequencyModulateComplex", _wrap_SDA_FrequencyModulateComplex},
    { "SDA_DeltaModulate", _wrap_SDA_DeltaModulate},
    { "SDA_DeltaDemodulate", _wrap_SDA_DeltaDemodulate},
    { "SDA_DeltaModulate2", _wrap_SDA_DeltaModulate2},
    { "SIF_CostasQamDemodulate", _wrap_SIF_CostasQamDemodulate},
    { "SDS_CostasQamDemodulate", _wrap_SDS_CostasQamDemodulate},
    { "SDS_CostasQamDemodulateDebug", _wrap_SDS_CostasQamDemodulateDebug},
    { "SDA_CostasQamDemodulate", _wrap_SDA_CostasQamDemodulate},
    { "SDA_CostasQamDemodulateDebug", _wrap_SDA_CostasQamDemodulateDebug},
    { "SIF_QpskModulate", _wrap_SIF_QpskModulate},
    { "SDA_QpskModulate", _wrap_SDA_QpskModulate},
    { "SIF_QpskDemodulate", _wrap_SIF_QpskDemodulate},
    { "SDA_QpskDemodulate", _wrap_SDA_QpskDemodulate},
    { "SDA_QpskDemodulateDebug", _wrap_SDA_QpskDemodulateDebug},
    { "SDA_QpskDifferentialEncode", _wrap_SDA_QpskDifferentialEncode},
    { "SDA_QpskDifferentialDecode", _wrap_SDA_QpskDifferentialDecode},
    { "SIF_FskModulate", _wrap_SIF_FskModulate},
    { "SDA_FskModulateByte", _wrap_SDA_FskModulateByte},
    { "SDA_FskDemodulateByte", _wrap_SDA_FskDemodulateByte},
    { "SDA_CpfskModulateByte", _wrap_SDA_CpfskModulateByte},
    { "SDA_FskModulate", _wrap_SDA_FskModulate},
    { "SDA_FskDemodulate", _wrap_SDA_FskDemodulate},
    { "SDA_CpfskModulate", _wrap_SDA_CpfskModulate},
    { "SIF_Qam16Modulate", _wrap_SIF_Qam16Modulate},
    { "SDA_Qam16Modulate", _wrap_SDA_Qam16Modulate},
    { "SIF_Qam16Demodulate", _wrap_SIF_Qam16Demodulate},
    { "SDA_Qam16Demodulate", _wrap_SDA_Qam16Demodulate},
    { "SDA_Qam16DemodulateDebug", _wrap_SDA_Qam16DemodulateDebug},
    { "SDA_Qam16DifferentialEncode", _wrap_SDA_Qam16DifferentialEncode},
    { "SDA_Qam16DifferentialDecode", _wrap_SDA_Qam16DifferentialDecode},
    { "SIF_BpskModulate", _wrap_SIF_BpskModulate},
    { "SDA_BpskModulate", _wrap_SDA_BpskModulate},
    { "SDA_BpskModulateByte", _wrap_SDA_BpskModulateByte},
    { "SIF_BpskDemodulate", _wrap_SIF_BpskDemodulate},
    { "SDA_BpskDemodulate", _wrap_SDA_BpskDemodulate},
    { "SDA_BpskDemodulateDebug", _wrap_SDA_BpskDemodulateDebug},
    { "SIF_DpskModulate", _wrap_SIF_DpskModulate},
    { "SDA_DpskModulate", _wrap_SDA_DpskModulate},
    { "SDA_DpskModulateByte", _wrap_SDA_DpskModulateByte},
    { "SIF_DpskDemodulate", _wrap_SIF_DpskDemodulate},
    { "SDA_DpskDemodulate", _wrap_SDA_DpskDemodulate},
    { "SDA_DpskDemodulateDebug", _wrap_SDA_DpskDemodulateDebug},
    { "SIF_PiByFourDQpskModulate", _wrap_SIF_PiByFourDQpskModulate},
    { "SDA_PiByFourDQpskModulate", _wrap_SDA_PiByFourDQpskModulate},
    { "SDS_ChannelizationCode", _wrap_SDS_ChannelizationCode},
    { "SDA_ComplexQPSKSpread", _wrap_SDA_ComplexQPSKSpread},
    { "SDA_ComplexQPSKDeSpread", _wrap_SDA_ComplexQPSKDeSpread},
    { "SUF_AsyncCharacterLength", _wrap_SUF_AsyncCharacterLength},
    { "SDA_SyncToAsyncConverter", _wrap_SDA_SyncToAsyncConverter},
    { "SDA_AsyncToSyncConverter", _wrap_SDA_AsyncToSyncConverter},
    { "SIF_AsyncAddRemoveStopBits", _wrap_SIF_AsyncAddRemoveStopBits},
    { "SDA_AsyncRemoveStopBits", _wrap_SDA_AsyncRemoveStopBits},
    { "SDA_AsyncAddStopBits", _wrap_SDA_AsyncAddStopBits},
    { "SDA_DecreaseWordLength", _wrap_SDA_DecreaseWordLength},
    { "SDA_IncreaseWordLength", _wrap_SDA_IncreaseWordLength},
    { "SDS_Scrambler1417", _wrap_SDS_Scrambler1417},
    { "SDS_Descrambler1417", _wrap_SDS_Descrambler1417},
    { "SDS_Scrambler1417WithInversion", _wrap_SDS_Scrambler1417WithInversion},
    { "SDS_Descrambler1417WithInversion", _wrap_SDS_Descrambler1417WithInversion},
    { "SDS_Scrambler1823", _wrap_SDS_Scrambler1823},
    { "SDS_Descrambler1823", _wrap_SDS_Descrambler1823},
    { "SDS_Scrambler523", _wrap_SDS_Scrambler523},
    { "SDS_Descrambler523", _wrap_SDS_Descrambler523},
    { "SDS_ScramblerDescramblerPN9", _wrap_SDS_ScramblerDescramblerPN9},
    { "SDS_SequenceGeneratorPN9", _wrap_SDS_SequenceGeneratorPN9},
    { "SDS_ScramblerDescramblerPN15", _wrap_SDS_ScramblerDescramblerPN15},
    { "SDS_SequenceGeneratorPN15", _wrap_SDS_SequenceGeneratorPN15},
    { "SDS_ScramblerDescramblergCRC24", _wrap_SDS_ScramblerDescramblergCRC24},
    { "SDS_SequenceGeneratorgCRC24", _wrap_SDS_SequenceGeneratorgCRC24},
    { "SDS_ScramblerDescramblergCRC16", _wrap_SDS_ScramblerDescramblergCRC16},
    { "SDS_SequenceGeneratorgCRC16", _wrap_SDS_SequenceGeneratorgCRC16},
    { "SDS_ScramblerDescramblergCRC12", _wrap_SDS_ScramblerDescramblergCRC12},
    { "SDS_SequenceGeneratorgCRC12", _wrap_SDS_SequenceGeneratorgCRC12},
    { "SDS_ScramblerDescramblergCRC8", _wrap_SDS_ScramblerDescramblergCRC8},
    { "SDS_SequenceGeneratorgCRC8", _wrap_SDS_SequenceGeneratorgCRC8},
    { "SDS_LongCodeGenerator3GPPDL", _wrap_SDS_LongCodeGenerator3GPPDL},
    { "SDS_LongCodeGenerator3GPPUL", _wrap_SDS_LongCodeGenerator3GPPUL},
    { "SDA_Multiplex", _wrap_SDA_Multiplex},
    { "SDA_Demultiplex", _wrap_SDA_Demultiplex},
    { "SDA_Mux2", _wrap_SDA_Mux2},
    { "SDA_Demux2", _wrap_SDA_Demux2},
    { "SDA_Mux3", _wrap_SDA_Mux3},
    { "SDA_Demux3", _wrap_SDA_Demux3},
    { "SDA_Mux4", _wrap_SDA_Mux4},
    { "SDA_Demux4", _wrap_SDA_Demux4},
    { "SDA_Mux5", _wrap_SDA_Mux5},
    { "SDA_Demux5", _wrap_SDA_Demux5},
    { "SDA_Mux6", _wrap_SDA_Mux6},
    { "SDA_Demux6", _wrap_SDA_Demux6},
    { "SDA_Mux7", _wrap_SDA_Mux7},
    { "SDA_Demux7", _wrap_SDA_Demux7},
    { "SDA_Mux8", _wrap_SDA_Mux8},
    { "SDA_Demux8", _wrap_SDA_Demux8},
    { "SIF_Decimate", _wrap_SIF_Decimate},
    { "SDA_Decimate", _wrap_SDA_Decimate},
    { "SIF_Interpolate", _wrap_SIF_Interpolate},
    { "SDA_Interpolate", _wrap_SDA_Interpolate},
    { "SIF_FilterAndDecimate", _wrap_SIF_FilterAndDecimate},
    { "SDA_FilterAndDecimate", _wrap_SDA_FilterAndDecimate},
    { "SIF_InterpolateAndFilter", _wrap_SIF_InterpolateAndFilter},
    { "SDA_InterpolateAndFilter", _wrap_SDA_InterpolateAndFilter},
    { "SDA_ResampleLinear", _wrap_SDA_ResampleLinear},
    { "SDA_ResampleLinearNSamples", _wrap_SDA_ResampleLinearNSamples},
    { "SDA_InterpolateLinear1D", _wrap_SDA_InterpolateLinear1D},
    { "SDA_InterpolateLinear2D", _wrap_SDA_InterpolateLinear2D},
    { "SIF_ResampleSinc", _wrap_SIF_ResampleSinc},
    { "SIF_ResampleWindowedSinc", _wrap_SIF_ResampleWindowedSinc},
    { "SDA_ResampleSinc", _wrap_SDA_ResampleSinc},
    { "SDA_ResampleSincNSamples", _wrap_SDA_ResampleSincNSamples},
    { "SIF_InterpolateSinc1D", _wrap_SIF_InterpolateSinc1D},
    { "SIF_InterpolateWindowedSinc1D", _wrap_SIF_InterpolateWindowedSinc1D},
    { "SDA_InterpolateSinc1D", _wrap_SDA_InterpolateSinc1D},
    { "SIF_ResampleLinearContiguous", _wrap_SIF_ResampleLinearContiguous},
    { "SDA_ResampleLinearContiguous", _wrap_SDA_ResampleLinearContiguous},
    { "SIF_ResampleSincContiguous", _wrap_SIF_ResampleSincContiguous},
    { "SIF_ResampleWindowedSincContiguous", _wrap_SIF_ResampleWindowedSincContiguous},
    { "SDA_ResampleSincContiguous", _wrap_SDA_ResampleSincContiguous},
    { "SDS_InterpolateQuadratic1D", _wrap_SDS_InterpolateQuadratic1D},
    { "SDS_InterpolateQuadraticBSpline1D", _wrap_SDS_InterpolateQuadraticBSpline1D},
    { "SDS_InterpolateQuadraticLagrange1D", _wrap_SDS_InterpolateQuadraticLagrange1D},
    { "SIF_DtmfGenerate", _wrap_SIF_DtmfGenerate},
    { "SDA_DtmfGenerate", _wrap_SDA_DtmfGenerate},
    { "SIF_DtmfDetect", _wrap_SIF_DtmfDetect},
    { "SDA_DtmfDetect", _wrap_SDA_DtmfDetect},
    { "SDA_DtmfDetectAndValidate", _wrap_SDA_DtmfDetectAndValidate},
    { "SUF_AsciiToKeyCode", _wrap_SUF_AsciiToKeyCode},
    { "SUF_KeyCodeToAscii", _wrap_SUF_KeyCodeToAscii},
    { "SIF_PreEmphasisFilter", _wrap_SIF_PreEmphasisFilter},
    { "SDA_PreEmphasisFilter", _wrap_SDA_PreEmphasisFilter},
    { "SIF_DeEmphasisFilter", _wrap_SIF_DeEmphasisFilter},
    { "SDA_DeEmphasisFilter", _wrap_SDA_DeEmphasisFilter},
    { "SDA_AdpcmEncoder", _wrap_SDA_AdpcmEncoder},
    { "SDA_AdpcmEncoderDebug", _wrap_SDA_AdpcmEncoderDebug},
    { "SDA_AdpcmDecoder", _wrap_SDA_AdpcmDecoder},
    { "SDA_Max", _wrap_SDA_Max},
    { "SDA_AbsMax", _wrap_SDA_AbsMax},
    { "SDA_Min", _wrap_SDA_Min},
    { "SDA_AbsMin", _wrap_SDA_AbsMin},
    { "SDA_Middle", _wrap_SDA_Middle},
    { "SDA_Range", _wrap_SDA_Range},
    { "SDA_MaxIndex", _wrap_SDA_MaxIndex},
    { "SDA_AbsMaxIndex", _wrap_SDA_AbsMaxIndex},
    { "SDA_MinIndex", _wrap_SDA_MinIndex},
    { "SDA_AbsMinIndex", _wrap_SDA_AbsMinIndex},
    { "SDS_Max", _wrap_SDS_Max},
    { "SDS_AbsMax", _wrap_SDS_AbsMax},
    { "SDS_Min", _wrap_SDS_Min},
    { "SDS_AbsMin", _wrap_SDS_AbsMin},
    { "SDA_LocalMax", _wrap_SDA_LocalMax},
    { "SDA_LocalAbsMax", _wrap_SDA_LocalAbsMax},
    { "SDA_LocalMin", _wrap_SDA_LocalMin},
    { "SDA_LocalAbsMin", _wrap_SDA_LocalAbsMin},
    { "SDA_Max2", _wrap_SDA_Max2},
    { "SDA_AbsMax2", _wrap_SDA_AbsMax2},
    { "SDA_SignedAbsMax2", _wrap_SDA_SignedAbsMax2},
    { "SDA_Min2", _wrap_SDA_Min2},
    { "SDA_AbsMin2", _wrap_SDA_AbsMin2},
    { "SDA_SignedAbsMin2", _wrap_SDA_SignedAbsMin2},
    { "SDA_PeakHold", _wrap_SDA_PeakHold},
    { "SDA_PeakHoldPerSample", _wrap_SDA_PeakHoldPerSample},
    { "SDA_DetectFirstPeakOverThreshold", _wrap_SDA_DetectFirstPeakOverThreshold},
    { "SDS_Round", _wrap_SDS_Round},
    { "SDA_Round", _wrap_SDA_Round},
    { "SDS_Clip", _wrap_SDS_Clip},
    { "SDA_Clip", _wrap_SDA_Clip},
    { "SDS_Threshold", _wrap_SDS_Threshold},
    { "SDA_Threshold", _wrap_SDA_Threshold},
    { "SDS_SoftThreshold", _wrap_SDS_SoftThreshold},
    { "SDA_SoftThreshold", _wrap_SDA_SoftThreshold},
    { "SDS_ThresholdAndClamp", _wrap_SDS_ThresholdAndClamp},
    { "SDA_ThresholdAndClamp", _wrap_SDA_ThresholdAndClamp},
    { "SDS_Clamp", _wrap_SDS_Clamp},
    { "SDA_Clamp", _wrap_SDA_Clamp},
    { "SDA_TestOverThreshold", _wrap_SDA_TestOverThreshold},
    { "SDA_TestAbsOverThreshold", _wrap_SDA_TestAbsOverThreshold},
    { "SDA_SelectMax", _wrap_SDA_SelectMax},
    { "SDA_SelectMin", _wrap_SDA_SelectMin},
    { "SDA_SelectMagnitudeSquaredMax", _wrap_SDA_SelectMagnitudeSquaredMax},
    { "SDA_SelectMagnitudeSquaredMin", _wrap_SDA_SelectMagnitudeSquaredMin},
    { "SDS_SetMinValue", _wrap_SDS_SetMinValue},
    { "SDA_SetMinValue", _wrap_SDA_SetMinValue},
    { "SDA_PeakToAverageRatio", _wrap_SDA_PeakToAverageRatio},
    { "SDA_PeakToAveragePowerRatio", _wrap_SDA_PeakToAveragePowerRatio},
    { "SDA_PeakToAveragePowerRatioDB", _wrap_SDA_PeakToAveragePowerRatioDB},
    { "SDA_PeakToAverageRatioComplex", _wrap_SDA_PeakToAverageRatioComplex},
    { "SDA_PeakToAveragePowerRatioComplex", _wrap_SDA_PeakToAveragePowerRatioComplex},
    { "SDA_PeakToAveragePowerRatioComplexDB", _wrap_SDA_PeakToAveragePowerRatioComplexDB},
    { "SDA_MovePeakTowardsDeadBand", _wrap_SDA_MovePeakTowardsDeadBand},
    { "SIF_Envelope", _wrap_SIF_Envelope},
    { "SDS_Envelope", _wrap_SDS_Envelope},
    { "SDA_Envelope", _wrap_SDA_Envelope},
    { "SIF_EnvelopeRMS", _wrap_SIF_EnvelopeRMS},
    { "SDS_EnvelopeRMS", _wrap_SDS_EnvelopeRMS},
    { "SDA_EnvelopeRMS", _wrap_SDA_EnvelopeRMS},
    { "SIF_EnvelopeHilbert", _wrap_SIF_EnvelopeHilbert},
    { "SDS_EnvelopeHilbert", _wrap_SDS_EnvelopeHilbert},
    { "SDA_EnvelopeHilbert", _wrap_SDA_EnvelopeHilbert},
    { "SDS_InterpolateThreePointQuadraticVertexMagnitude", _wrap_SDS_InterpolateThreePointQuadraticVertexMagnitude},
    { "SDS_InterpolateThreePointQuadraticVertexLocation", _wrap_SDS_InterpolateThreePointQuadraticVertexLocation},
    { "SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude", _wrap_SDS_InterpolateArbitraryThreePointQuadraticVertexMagnitude},
    { "SDS_InterpolateArbitraryThreePointQuadraticVertexLocation", _wrap_SDS_InterpolateArbitraryThreePointQuadraticVertexLocation},
    { "SDA_InterpolateThreePointQuadraticVertexMagnitude", _wrap_SDA_InterpolateThreePointQuadraticVertexMagnitude},
    { "SDA_InterpolateThreePointQuadraticVertexLocation", _wrap_SDA_InterpolateThreePointQuadraticVertexLocation},
    { "SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude", _wrap_SDA_InterpolateArbitraryThreePointQuadraticVertexMagnitude},
    { "SDA_InterpolateArbitraryThreePointQuadraticVertexLocation", _wrap_SDA_InterpolateArbitraryThreePointQuadraticVertexLocation},
    { "SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude", _wrap_SDA_InterpolateArbitraryThreePointQuadraticPeakVertexMagnitude},
    { "SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation", _wrap_SDA_InterpolateArbitraryThreePointQuadraticPeakVertexLocation},
    { "SDA_FirstMinVertex", _wrap_SDA_FirstMinVertex},
    { "SDA_FirstMinVertexPos", _wrap_SDA_FirstMinVertexPos},
    { "SDA_FirstMaxVertex", _wrap_SDA_FirstMaxVertex},
    { "SDA_FirstMaxVertexPos", _wrap_SDA_FirstMaxVertexPos},
    { "SDA_NLargest", _wrap_SDA_NLargest},
    { "SDA_NSmallest", _wrap_SDA_NSmallest},
    { "SDA_Divide", _wrap_SDA_Divide},
    { "SDA_Divide2", _wrap_SDA_Divide2},
    { "SDA_Multiply", _wrap_SDA_Multiply},
    { "SDA_Multiply2", _wrap_SDA_Multiply2},
    { "SDS_ComplexMultiply", _wrap_SDS_ComplexMultiply},
    { "SDS_ComplexInverse", _wrap_SDS_ComplexInverse},
    { "SDA_ComplexInverse", _wrap_SDA_ComplexInverse},
    { "SDS_ComplexDivide", _wrap_SDS_ComplexDivide},
    { "SDA_ComplexScalarMultiply", _wrap_SDA_ComplexScalarMultiply},
    { "SDA_ComplexMultiply2", _wrap_SDA_ComplexMultiply2},
    { "SDA_ComplexScalarDivide", _wrap_SDA_ComplexScalarDivide},
    { "SDA_ComplexDivide2", _wrap_SDA_ComplexDivide2},
    { "SDA_RealDotProduct", _wrap_SDA_RealDotProduct},
    { "SDA_ComplexDotProduct", _wrap_SDA_ComplexDotProduct},
    { "SDA_SumAndDifference", _wrap_SDA_SumAndDifference},
    { "SDA_Add2", _wrap_SDA_Add2},
    { "SDA_Add3", _wrap_SDA_Add3},
    { "SDA_Add4", _wrap_SDA_Add4},
    { "SDA_Add5", _wrap_SDA_Add5},
    { "SDA_WeightedSum", _wrap_SDA_WeightedSum},
    { "SDA_Subtract2", _wrap_SDA_Subtract2},
    { "SDA_Add", _wrap_SDA_Add},
    { "SDA_PositiveOffset", _wrap_SDA_PositiveOffset},
    { "SDA_NegativeOffset", _wrap_SDA_NegativeOffset},
    { "SDA_Negate", _wrap_SDA_Negate},
    { "SDA_Inverse", _wrap_SDA_Inverse},
    { "SDA_Square", _wrap_SDA_Square},
    { "SDA_Sqrt", _wrap_SDA_Sqrt},
    { "SDA_Difference", _wrap_SDA_Difference},
    { "SDA_SumOfDifferences", _wrap_SDA_SumOfDifferences},
    { "SDS_Roots", _wrap_SDS_Roots},
    { "SDS_Factorial", _wrap_SDS_Factorial},
    { "SDS_Permutations", _wrap_SDS_Permutations},
    { "SDS_Combinations", _wrap_SDS_Combinations},
    { "SIF_OverlapAndAddLinear", _wrap_SIF_OverlapAndAddLinear},
    { "SDA_OverlapAndAddLinear", _wrap_SDA_OverlapAndAddLinear},
    { "SDA_OverlapAndAddLinearWithClip", _wrap_SDA_OverlapAndAddLinearWithClip},
    { "SDA_OverlapAndAddArbitrary", _wrap_SDA_OverlapAndAddArbitrary},
    { "SDA_OverlapAndAddArbitraryWithClip", _wrap_SDA_OverlapAndAddArbitraryWithClip},
    { "SDS_DegreesToRadians", _wrap_SDS_DegreesToRadians},
    { "SDA_DegreesToRadians", _wrap_SDA_DegreesToRadians},
    { "SDS_RadiansToDegrees", _wrap_SDS_RadiansToDegrees},
    { "SDA_RadiansToDegrees", _wrap_SDA_RadiansToDegrees},
    { "SDS_DetectNAN", _wrap_SDS_DetectNAN},
    { "SDA_DetectNAN", _wrap_SDA_DetectNAN},
    { "SDA_Rotate", _wrap_SDA_Rotate},
    { "SDA_Reverse", _wrap_SDA_Reverse},
    { "SDA_Scale", _wrap_SDA_Scale},
    { "SDA_MeanSquare", _wrap_SDA_MeanSquare},
    { "SDA_MeanSquareError", _wrap_SDA_MeanSquareError},
    { "SDA_RootMeanSquare", _wrap_SDA_RootMeanSquare},
    { "SDA_Magnitude", _wrap_SDA_Magnitude},
    { "SDA_MagnitudeSquared", _wrap_SDA_MagnitudeSquared},
    { "SDS_Magnitude", _wrap_SDS_Magnitude},
    { "SDS_MagnitudeSquared", _wrap_SDS_MagnitudeSquared},
    { "SDS_Phase", _wrap_SDS_Phase},
    { "SDA_PhaseWrapped", _wrap_SDA_PhaseWrapped},
    { "SDA_PhaseUnWrapped", _wrap_SDA_PhaseUnWrapped},
    { "SDA_MagnitudeAndPhaseWrapped", _wrap_SDA_MagnitudeAndPhaseWrapped},
    { "SDA_MagnitudeAndPhaseUnWrapped", _wrap_SDA_MagnitudeAndPhaseUnWrapped},
    { "SDA_MagnitudeSquaredAndPhaseWrapped", _wrap_SDA_MagnitudeSquaredAndPhaseWrapped},
    { "SDA_MagnitudeSquaredAndPhaseUnWrapped", _wrap_SDA_MagnitudeSquaredAndPhaseUnWrapped},
    { "SDA_PhaseWrap", _wrap_SDA_PhaseWrap},
    { "SDA_PhaseUnWrap", _wrap_SDA_PhaseUnWrap},
    { "SDS_Log2", _wrap_SDS_Log2},
    { "SDA_Log2", _wrap_SDA_Log2},
    { "SDS_LogN", _wrap_SDS_LogN},
    { "SDA_LogN", _wrap_SDA_LogN},
    { "SDA_LogDistribution", _wrap_SDA_LogDistribution},
    { "SDA_Copy", _wrap_SDA_Copy},
    { "SDA_CopyWithStride", _wrap_SDA_CopyWithStride},
    { "SIF_CopyWithOverlap", _wrap_SIF_CopyWithOverlap},
    { "SDA_CopyWithOverlap", _wrap_SDA_CopyWithOverlap},
    { "SIF_CopyWithIndex", _wrap_SIF_CopyWithIndex},
    { "SDA_CopyWithIndex", _wrap_SDA_CopyWithIndex},
    { "SDA_20Log10", _wrap_SDA_20Log10},
    { "SDA_10Log10", _wrap_SDA_10Log10},
    { "SDA_LogMagnitude", _wrap_SDA_LogMagnitude},
    { "SDA_LogMagnitudeAndPhaseWrapped", _wrap_SDA_LogMagnitudeAndPhaseWrapped},
    { "SDA_LogMagnitudeAndPhaseUnWrapped", _wrap_SDA_LogMagnitudeAndPhaseUnWrapped},
    { "SDA_Lengthen", _wrap_SDA_Lengthen},
    { "SDA_Shorten", _wrap_SDA_Shorten},
    { "SIF_ReSize", _wrap_SIF_ReSize},
    { "SDA_ReSize", _wrap_SDA_ReSize},
    { "SDA_ReSizeInput", _wrap_SDA_ReSizeInput},
    { "SDA_ReSizeOutput", _wrap_SDA_ReSizeOutput},
    { "SDA_Fill", _wrap_SDA_Fill},
    { "SDA_Clear", _wrap_SDA_Clear},
    { "SDA_Histogram", _wrap_SDA_Histogram},
    { "SDA_HistogramCumulative", _wrap_SDA_HistogramCumulative},
    { "SDA_HistogramExtended", _wrap_SDA_HistogramExtended},
    { "SDA_HistogramExtendedCumulative", _wrap_SDA_HistogramExtendedCumulative},
    { "SIF_Histogram", _wrap_SIF_Histogram},
    { "SDA_HistogramEqualize", _wrap_SDA_HistogramEqualize},
    { "SDA_Quantize", _wrap_SDA_Quantize},
    { "SDS_Quantize", _wrap_SDS_Quantize},
    { "SDA_Quantize_N", _wrap_SDA_Quantize_N},
    { "SDS_Quantise_N", _wrap_SDS_Quantise_N},
    { "SDA_Abs", _wrap_SDA_Abs},
    { "SDS_PeakValueToBits", _wrap_SDS_PeakValueToBits},
    { "SDS_BitsToPeakValue", _wrap_SDS_BitsToPeakValue},
    { "SDS_LinearTodBm", _wrap_SDS_LinearTodBm},
    { "SDA_LinearTodBm", _wrap_SDA_LinearTodBm},
    { "SDS_dBmToLinear", _wrap_SDS_dBmToLinear},
    { "SDA_dBmToLinear", _wrap_SDA_dBmToLinear},
    { "SDS_Compare", _wrap_SDS_Compare},
    { "SDA_Compare", _wrap_SDA_Compare},
    { "SDS_CompareComplex", _wrap_SDS_CompareComplex},
    { "SDA_CompareComplex", _wrap_SDA_CompareComplex},
    { "SDS_Int", _wrap_SDS_Int},
    { "SDS_Frac", _wrap_SDS_Frac},
    { "SDS_AbsFrac", _wrap_SDS_AbsFrac},
    { "SDA_Int", _wrap_SDA_Int},
    { "SDA_Frac", _wrap_SDA_Frac},
    { "SDA_AbsFrac", _wrap_SDA_AbsFrac},
    { "SDA_SetMin", _wrap_SDA_SetMin},
    { "SDA_SetMax", _wrap_SDA_SetMax},
    { "SDA_SetRange", _wrap_SDA_SetRange},
    { "SDA_SetMean", _wrap_SDA_SetMean},
    { "SDA_RealSpectralInverse", _wrap_SDA_RealSpectralInverse},
    { "SDA_ComplexSpectralInverse", _wrap_SDA_ComplexSpectralInverse},
    { "SDA_FdInterpolate", _wrap_SDA_FdInterpolate},
    { "SDA_FdInterpolate2", _wrap_SDA_FdInterpolate2},
    { "SDS_TdPitchShift", _wrap_SDS_TdPitchShift},
    { "SDA_TdPitchShift", _wrap_SDA_TdPitchShift},
    { "SDS_EchoGenerate", _wrap_SDS_EchoGenerate},
    { "SDA_Power", _wrap_SDA_Power},
    { "SDS_Polynomial", _wrap_SDS_Polynomial},
    { "SDA_Polynomial", _wrap_SDA_Polynomial},
    { "SDS_Modulo", _wrap_SDS_Modulo},
    { "SDA_Modulo", _wrap_SDA_Modulo},
    { "SDA_AgcPeak", _wrap_SDA_AgcPeak},
    { "SIF_AgcMeanAbs", _wrap_SIF_AgcMeanAbs},
    { "SDA_AgcMeanAbs", _wrap_SDA_AgcMeanAbs},
    { "SIF_AgcMeanSquared", _wrap_SIF_AgcMeanSquared},
    { "SDA_AgcMeanSquared", _wrap_SDA_AgcMeanSquared},
    { "SDA_GroupDelay", _wrap_SDA_GroupDelay},
    { "SDA_ZeroCrossingDetect", _wrap_SDA_ZeroCrossingDetect},
    { "SDS_ZeroCrossingDetect", _wrap_SDS_ZeroCrossingDetect},
    { "SDA_FirstZeroCrossingLocation", _wrap_SDA_FirstZeroCrossingLocation},
    { "SDA_ZeroCrossingCount", _wrap_SDA_ZeroCrossingCount},
    { "SDA_LevelCrossingDetect", _wrap_SDA_LevelCrossingDetect},
    { "SDS_LevelCrossingDetect", _wrap_SDS_LevelCrossingDetect},
    { "SDA_FirstLevelCrossingLocation", _wrap_SDA_FirstLevelCrossingLocation},
    { "SDA_LevelCrossingCount", _wrap_SDA_LevelCrossingCount},
    { "SDA_Trigger", _wrap_SDA_Trigger},
    { "SDA_ClearLocation", _wrap_SDA_ClearLocation},
    { "SDA_SetLocation", _wrap_SDA_SetLocation},
    { "SDA_SortMinToMax", _wrap_SDA_SortMinToMax},
    { "SDA_SortMaxToMin", _wrap_SDA_SortMaxToMin},
    { "SDA_SortMinToMax2", _wrap_SDA_SortMinToMax2},
    { "SDA_SortMaxToMin2", _wrap_SDA_SortMaxToMin2},
    { "SDA_SortIndexed", _wrap_SDA_SortIndexed},
    { "SDS_CountOneBits", _wrap_SDS_CountOneBits},
    { "SDS_CountZeroBits", _wrap_SDS_CountZeroBits},
    { "SDS_CountLeadingOneBits", _wrap_SDS_CountLeadingOneBits},
    { "SDS_CountLeadingZeroBits", _wrap_SDS_CountLeadingZeroBits},
    { "SDA_Sign", _wrap_SDA_Sign},
    { "SDA_Swap", _wrap_SDA_Swap},
    { "SUF_ModuloIncrement", _wrap_SUF_ModuloIncrement},
    { "SUF_ModuloDecrement", _wrap_SUF_ModuloDecrement},
    { "SUF_IndexModuloIncrement", _wrap_SUF_IndexModuloIncrement},
    { "SUF_IndexModuloDecrement", _wrap_SUF_IndexModuloDecrement},
    { "SDA_Find", _wrap_SDA_Find},
    { "SDA_FindValue", _wrap_SDA_FindValue},
    { "SIF_DeGlitch", _wrap_SIF_DeGlitch},
    { "SDS_DeGlitch", _wrap_SDS_DeGlitch},
    { "SDA_DeGlitch", _wrap_SDA_DeGlitch},
    { "SDA_RemoveDuplicates", _wrap_SDA_RemoveDuplicates},
    { "SDA_FindAllDuplicates", _wrap_SDA_FindAllDuplicates},
    { "SDA_FindFirstDuplicates", _wrap_SDA_FindFirstDuplicates},
    { "SDA_FindSortAllDuplicates", _wrap_SDA_FindSortAllDuplicates},
    { "SDA_FindSortFirstDuplicates", _wrap_SDA_FindSortFirstDuplicates},
    { "SDA_Shuffle", _wrap_SDA_Shuffle},
    { "SDA_InsertSample", _wrap_SDA_InsertSample},
    { "SDA_InsertArray", _wrap_SDA_InsertArray},
    { "SDA_ExtractSample", _wrap_SDA_ExtractSample},
    { "SDA_ExtractArray", _wrap_SDA_ExtractArray},
    { "SDA_SigLibDataToFix", _wrap_SDA_SigLibDataToFix},
    { "SDA_FixToSigLibData", _wrap_SDA_FixToSigLibData},
    { "SDA_SigLibDataToImageData", _wrap_SDA_SigLibDataToImageData},
    { "SDA_ImageDataToSigLibData", _wrap_SDA_ImageDataToSigLibData},
    { "SDA_SigLibDataToFix16", _wrap_SDA_SigLibDataToFix16},
    { "SDA_Fix16ToSigLibData", _wrap_SDA_Fix16ToSigLibData},
    { "SDA_SigLibDataToFix32", _wrap_SDA_SigLibDataToFix32},
    { "SDA_Fix32ToSigLibData", _wrap_SDA_Fix32ToSigLibData},
    { "SDS_SigLibDataToQFormatInteger", _wrap_SDS_SigLibDataToQFormatInteger},
    { "SDS_QFormatIntegerToSigLibData", _wrap_SDS_QFormatIntegerToSigLibData},
    { "SDA_SigLibDataToQFormatInteger", _wrap_SDA_SigLibDataToQFormatInteger},
    { "SDA_QFormatIntegerToSigLibData", _wrap_SDA_QFormatIntegerToSigLibData},
    { "SDS_Pid", _wrap_SDS_Pid},
    { "SDA_Pwm", _wrap_SDA_Pwm},
    { "SDA_ExtractOrder", _wrap_SDA_ExtractOrder},
    { "SDA_SumLevel", _wrap_SDA_SumLevel},
    { "SDA_SumLevelWholeSpectrum", _wrap_SDA_SumLevelWholeSpectrum},
    { "SIF_OrderAnalysis", _wrap_SIF_OrderAnalysis},
    { "SDA_OrderAnalysis", _wrap_SDA_OrderAnalysis},
    { "SDA_Sum", _wrap_SDA_Sum},
    { "SDA_AbsSum", _wrap_SDA_AbsSum},
    { "SDA_SumOfSquares", _wrap_SDA_SumOfSquares},
    { "SDA_Mean", _wrap_SDA_Mean},
    { "SDA_AbsMean", _wrap_SDA_AbsMean},
    { "SDA_SubtractMean", _wrap_SDA_SubtractMean},
    { "SDA_SubtractMax", _wrap_SDA_SubtractMax},
    { "SDA_SampleSd", _wrap_SDA_SampleSd},
    { "SDA_PopulationSd", _wrap_SDA_PopulationSd},
    { "SDA_UnbiasedVariance", _wrap_SDA_UnbiasedVariance},
    { "SDA_Median", _wrap_SDA_Median},
    { "SDA_LinraConstantCoeff", _wrap_SDA_LinraConstantCoeff},
    { "SDA_LinraRegressionCoeff", _wrap_SDA_LinraRegressionCoeff},
    { "SDA_LinraCorrelationCoeff", _wrap_SDA_LinraCorrelationCoeff},
    { "SDA_LinraEstimateX", _wrap_SDA_LinraEstimateX},
    { "SDA_LinraEstimateY", _wrap_SDA_LinraEstimateY},
    { "SDA_LograConstantCoeff", _wrap_SDA_LograConstantCoeff},
    { "SDA_LograRegressionCoeff", _wrap_SDA_LograRegressionCoeff},
    { "SDA_LograCorrelationCoeff", _wrap_SDA_LograCorrelationCoeff},
    { "SDA_LograEstimateX", _wrap_SDA_LograEstimateX},
    { "SDA_LograEstimateY", _wrap_SDA_LograEstimateY},
    { "SDA_ExpraConstantCoeff", _wrap_SDA_ExpraConstantCoeff},
    { "SDA_ExpraRegressionCoeff", _wrap_SDA_ExpraRegressionCoeff},
    { "SDA_ExpraCorrelationCoeff", _wrap_SDA_ExpraCorrelationCoeff},
    { "SDA_ExpraEstimateX", _wrap_SDA_ExpraEstimateX},
    { "SDA_ExpraEstimateY", _wrap_SDA_ExpraEstimateY},
    { "SDA_PowraConstantCoeff", _wrap_SDA_PowraConstantCoeff},
    { "SDA_PowraRegressionCoeff", _wrap_SDA_PowraRegressionCoeff},
    { "SDA_PowraCorrelationCoeff", _wrap_SDA_PowraCorrelationCoeff},
    { "SDA_PowraEstimateX", _wrap_SDA_PowraEstimateX},
    { "SDA_PowraEstimateY", _wrap_SDA_PowraEstimateY},
    { "SDA_Detrend", _wrap_SDA_Detrend},
    { "SDA_ExtractTrend", _wrap_SDA_ExtractTrend},
    { "SDA_Sin", _wrap_SDA_Sin},
    { "SDA_Cos", _wrap_SDA_Cos},
    { "SDA_Tan", _wrap_SDA_Tan},
    { "SIF_FastSin", _wrap_SIF_FastSin},
    { "SDA_FastSin", _wrap_SDA_FastSin},
    { "SDS_FastSin", _wrap_SDS_FastSin},
    { "SIF_FastCos", _wrap_SIF_FastCos},
    { "SDA_FastCos", _wrap_SDA_FastCos},
    { "SDS_FastCos", _wrap_SDS_FastCos},
    { "SIF_FastSinCos", _wrap_SIF_FastSinCos},
    { "SDA_FastSinCos", _wrap_SDA_FastSinCos},
    { "SDS_FastSinCos", _wrap_SDS_FastSinCos},
    { "SIF_QuickSin", _wrap_SIF_QuickSin},
    { "SDA_QuickSin", _wrap_SDA_QuickSin},
    { "SDS_QuickSin", _wrap_SDS_QuickSin},
    { "SIF_QuickCos", _wrap_SIF_QuickCos},
    { "SDA_QuickCos", _wrap_SDA_QuickCos},
    { "SDS_QuickCos", _wrap_SDS_QuickCos},
    { "SIF_QuickSinCos", _wrap_SIF_QuickSinCos},
    { "SDA_QuickSinCos", _wrap_SDA_QuickSinCos},
    { "SDS_QuickSinCos", _wrap_SDS_QuickSinCos},
    { "SIF_QuickTan", _wrap_SIF_QuickTan},
    { "SDA_QuickTan", _wrap_SDA_QuickTan},
    { "SDS_QuickTan", _wrap_SDS_QuickTan},
    { "SDA_Sinc", _wrap_SDA_Sinc},
    { "SDS_Sinc", _wrap_SDS_Sinc},
    { "SIF_QuickSinc", _wrap_SIF_QuickSinc},
    { "SDA_QuickSinc", _wrap_SDA_QuickSinc},
    { "SDS_QuickSinc", _wrap_SDS_QuickSinc},
    { "SCV_Polar", _wrap_SCV_Polar},
    { "SCV_Rectangular", _wrap_SCV_Rectangular},
    { "SCV_PolarToRectangular", _wrap_SCV_PolarToRectangular},
    { "SCV_RectangularToPolar", _wrap_SCV_RectangularToPolar},
    { "SCV_Sqrt", _wrap_SCV_Sqrt},
    { "SCV_Inverse", _wrap_SCV_Inverse},
    { "SCV_Conjugate", _wrap_SCV_Conjugate},
    { "SCV_Magnitude", _wrap_SCV_Magnitude},
    { "SCV_MagnitudeSquared", _wrap_SCV_MagnitudeSquared},
    { "SCV_Phase", _wrap_SCV_Phase},
    { "SCV_Multiply", _wrap_SCV_Multiply},
    { "SCV_Divide", _wrap_SCV_Divide},
    { "SCV_Add", _wrap_SCV_Add},
    { "SCV_Subtract", _wrap_SCV_Subtract},
    { "SCV_Log", _wrap_SCV_Log},
    { "SCV_Exp", _wrap_SCV_Exp},
    { "SCV_Expj", _wrap_SCV_Expj},
    { "SCV_Pow", _wrap_SCV_Pow},
    { "SCV_VectorAddScalar", _wrap_SCV_VectorAddScalar},
    { "SCV_VectorSubtractScalar", _wrap_SCV_VectorSubtractScalar},
    { "SCV_VectorMultiplyScalar", _wrap_SCV_VectorMultiplyScalar},
    { "SCV_VectorDivideScalar", _wrap_SCV_VectorDivideScalar},
    { "SCV_ScalarSubtractVector", _wrap_SCV_ScalarSubtractVector},
    { "SCV_Roots", _wrap_SCV_Roots},
    { "SCV_Copy", _wrap_SCV_Copy},
    { "SCV_Compare", _wrap_SCV_Compare},
    { "SDA_CreateComplexRect", _wrap_SDA_CreateComplexRect},
    { "SDA_CreateComplexPolar", _wrap_SDA_CreateComplexPolar},
    { "SDA_ExtractComplexRect", _wrap_SDA_ExtractComplexRect},
    { "SDA_ExtractComplexPolar", _wrap_SDA_ExtractComplexPolar},
    { "SDA_ClearComplexRect", _wrap_SDA_ClearComplexRect},
    { "SDA_ClearComplexPolar", _wrap_SDA_ClearComplexPolar},
    { "SDA_FillComplexRect", _wrap_SDA_FillComplexRect},
    { "SDA_FillComplexPolar", _wrap_SDA_FillComplexPolar},
    { "SDA_ComplexRectangularToPolar", _wrap_SDA_ComplexRectangularToPolar},
    { "SDA_ComplexPolarToRectangular", _wrap_SDA_ComplexPolarToRectangular},
    { "SDA_RectangularToPolar", _wrap_SDA_RectangularToPolar},
    { "SDA_PolarToRectangular", _wrap_SDA_PolarToRectangular},
    { "SDA_ComplexRectSqrt", _wrap_SDA_ComplexRectSqrt},
    { "SDA_ComplexRectInverse", _wrap_SDA_ComplexRectInverse},
    { "SDA_ComplexRectConjugate", _wrap_SDA_ComplexRectConjugate},
    { "SDA_ComplexRectMagnitude", _wrap_SDA_ComplexRectMagnitude},
    { "SDA_ComplexRectMagnitudeSquared", _wrap_SDA_ComplexRectMagnitudeSquared},
    { "SDA_ComplexRectPhase", _wrap_SDA_ComplexRectPhase},
    { "SDA_ComplexRectMultiply", _wrap_SDA_ComplexRectMultiply},
    { "SDA_ComplexRectDivide", _wrap_SDA_ComplexRectDivide},
    { "SDA_ComplexRectAdd", _wrap_SDA_ComplexRectAdd},
    { "SDA_ComplexRectSubtract", _wrap_SDA_ComplexRectSubtract},
    { "SDA_ComplexRectLog", _wrap_SDA_ComplexRectLog},
    { "SDA_ComplexRectExp", _wrap_SDA_ComplexRectExp},
    { "SDA_ComplexRectExpj", _wrap_SDA_ComplexRectExpj},
    { "SDA_ComplexRectPow", _wrap_SDA_ComplexRectPow},
    { "SDA_ComplexRectAddScalar", _wrap_SDA_ComplexRectAddScalar},
    { "SDA_ComplexRectSubtractScalar", _wrap_SDA_ComplexRectSubtractScalar},
    { "SDA_ComplexRectMultiplyScalar", _wrap_SDA_ComplexRectMultiplyScalar},
    { "SDA_ComplexRectDivideScalar", _wrap_SDA_ComplexRectDivideScalar},
    { "SDA_ComplexScalarSubtractRect", _wrap_SDA_ComplexScalarSubtractRect},
    { "SDA_ComplexRectLinearInterpolate", _wrap_SDA_ComplexRectLinearInterpolate},
    { "SDA_ComplexPolarLinearInterpolate", _wrap_SDA_ComplexPolarLinearInterpolate},
    { "SMX_Transpose", _wrap_SMX_Transpose},
    { "SMX_Multiply", _wrap_SMX_Multiply},
    { "SMX_CreateIdentity", _wrap_SMX_CreateIdentity},
    { "SMX_Inverse2x2", _wrap_SMX_Inverse2x2},
    { "SMX_ComplexInverse2x2", _wrap_SMX_ComplexInverse2x2},
    { "SMX_Inverse", _wrap_SMX_Inverse},
    { "SMX_LuDecompose", _wrap_SMX_LuDecompose},
    { "SMX_LuSolve", _wrap_SMX_LuSolve},
    { "SMX_Determinant", _wrap_SMX_Determinant},
    { "SMX_LuDeterminant", _wrap_SMX_LuDeterminant},
    { "SMX_RotateClockwise", _wrap_SMX_RotateClockwise},
    { "SMX_RotateAntiClockwise", _wrap_SMX_RotateAntiClockwise},
    { "SMX_Reflect", _wrap_SMX_Reflect},
    { "SMX_Flip", _wrap_SMX_Flip},
    { "SMX_InsertRow", _wrap_SMX_InsertRow},
    { "SMX_ExtractRow", _wrap_SMX_ExtractRow},
    { "SMX_InsertColumn", _wrap_SMX_InsertColumn},
    { "SMX_ExtractColumn", _wrap_SMX_ExtractColumn},
    { "SMX_InsertNewRow", _wrap_SMX_InsertNewRow},
    { "SMX_DeleteOldRow", _wrap_SMX_DeleteOldRow},
    { "SMX_InsertNewColumn", _wrap_SMX_InsertNewColumn},
    { "SMX_DeleteOldColumn", _wrap_SMX_DeleteOldColumn},
    { "SMX_InsertRegion", _wrap_SMX_InsertRegion},
    { "SMX_ExtractRegion", _wrap_SMX_ExtractRegion},
    { "SMX_InsertDiagonal", _wrap_SMX_InsertDiagonal},
    { "SMX_ExtractDiagonal", _wrap_SMX_ExtractDiagonal},
    { "SMX_SwapRows", _wrap_SMX_SwapRows},
    { "SMX_SwapColumns", _wrap_SMX_SwapColumns},
    { "SMX_Sum", _wrap_SMX_Sum},
    { "SMX_ShuffleColumns", _wrap_SMX_ShuffleColumns},
    { "SMX_ShuffleRows", _wrap_SMX_ShuffleRows},
    { "SMX_ExtractCategoricalColumn", _wrap_SMX_ExtractCategoricalColumn},
    { "SDA_TwoLayer2CategoryNetworkFit", _wrap_SDA_TwoLayer2CategoryNetworkFit},
    { "SDA_TwoLayer2CategoryNetworkPredict", _wrap_SDA_TwoLayer2CategoryNetworkPredict},
    { "SDA_TwoLayerNCategoryNetworkFit", _wrap_SDA_TwoLayerNCategoryNetworkFit},
    { "SDA_TwoLayerNCategoryNetworkPredict", _wrap_SDA_TwoLayerNCategoryNetworkPredict},
    { "SDS_ActivationReLU", _wrap_SDS_ActivationReLU},
    { "SDA_ActivationReLU", _wrap_SDA_ActivationReLU},
    { "SDS_ActivationReLUDerivative", _wrap_SDS_ActivationReLUDerivative},
    { "SDA_ActivationReLUDerivative", _wrap_SDA_ActivationReLUDerivative},
    { "SDS_ActivationLeakyReLU", _wrap_SDS_ActivationLeakyReLU},
    { "SDA_ActivationLeakyReLU", _wrap_SDA_ActivationLeakyReLU},
    { "SDS_ActivationLeakyReLUDerivative", _wrap_SDS_ActivationLeakyReLUDerivative},
    { "SDA_ActivationLeakyReLUDerivative", _wrap_SDA_ActivationLeakyReLUDerivative},
    { "SDS_ActivationLogistic", _wrap_SDS_ActivationLogistic},
    { "SDA_ActivationLogistic", _wrap_SDA_ActivationLogistic},
    { "SDS_ActivationLogisticDerivative", _wrap_SDS_ActivationLogisticDerivative},
    { "SDA_ActivationLogisticDerivative", _wrap_SDA_ActivationLogisticDerivative},
    { "SDS_ActivationTanH", _wrap_SDS_ActivationTanH},
    { "SDA_ActivationTanH", _wrap_SDA_ActivationTanH},
    { "SDS_ActivationTanHDerivative", _wrap_SDS_ActivationTanHDerivative},
    { "SDA_ActivationTanHDerivative", _wrap_SDA_ActivationTanHDerivative},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_float_complex,
&_wrap_class_double_complex,
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "siglib",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLArbitraryFFT_t = {"_p_SLArbitraryFFT_t", "enum SLArbitraryFFT_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLArrayIndex_t = {"_p_SLArrayIndex_t", "SLArrayIndex_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLChar_t = {"_p_SLChar_t", "SLChar_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLComplexPolar_s = {"_p_SLComplexPolar_s", "SLComplexPolar_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLComplexRect_s = {"_p_SLComplexRect_s", "SLComplexRect_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLData_t = {"_p_SLData_t", "SLData_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLError_t = {"_p_SLError_t", "SLError_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLFixData_t = {"_p_SLFixData_t", "SLFixData_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLImageData_t = {"_p_SLImageData_t", "SLImageData_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLInt16_t = {"_p_SLInt16_t", "SLInt16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLInt32_t = {"_p_SLInt32_t", "SLInt32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLMicrophone_s = {"_p_SLMicrophone_s", "SLMicrophone_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLNeuralNetworkPrediction_s = {"_p_SLNeuralNetworkPrediction_s", "SLNeuralNetworkPrediction_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLStatus_t = {"_p_SLStatus_t", "SLStatus_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLUInt16_t = {"_p_SLUInt16_t", "SLUInt16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLUInt32_t = {"_p_SLUInt32_t", "SLUInt32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLUInt8_t = {"_p_SLUInt8_t", "SLUInt8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SLWavFileInfo_s = {"_p_SLWavFileInfo_s", "SLWavFileInfo_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fenv_t = {"_p_fenv_t", "fenv_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fexcept_t = {"_p_fexcept_t", "fexcept_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "ilong *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SLData_t = {"_p_p_SLData_t", "SLData_t **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_double_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_float_complex, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|u32 *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|u64 *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_SLArbitraryFFT_t,
  &_swigt__p_SLArrayIndex_t,
  &_swigt__p_SLChar_t,
  &_swigt__p_SLComplexPolar_s,
  &_swigt__p_SLComplexRect_s,
  &_swigt__p_SLData_t,
  &_swigt__p_SLError_t,
  &_swigt__p_SLFixData_t,
  &_swigt__p_SLImageData_t,
  &_swigt__p_SLInt16_t,
  &_swigt__p_SLInt32_t,
  &_swigt__p_SLMicrophone_s,
  &_swigt__p_SLNeuralNetworkPrediction_s,
  &_swigt__p_SLStatus_t,
  &_swigt__p_SLUInt16_t,
  &_swigt__p_SLUInt32_t,
  &_swigt__p_SLUInt8_t,
  &_swigt__p_SLWavFileInfo_s,
  &_swigt__p_double,
  &_swigt__p_fenv_t,
  &_swigt__p_fexcept_t,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_SLData_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLArbitraryFFT_t[] = {  {&_swigt__p_SLArbitraryFFT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLArrayIndex_t[] = {  {&_swigt__p_SLArrayIndex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLChar_t[] = {  {&_swigt__p_SLChar_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLComplexPolar_s[] = {  {&_swigt__p_SLComplexPolar_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLComplexRect_s[] = {  {&_swigt__p_SLComplexRect_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLData_t[] = {  {&_swigt__p_SLData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLError_t[] = {  {&_swigt__p_SLError_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLFixData_t[] = {  {&_swigt__p_SLFixData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLImageData_t[] = {  {&_swigt__p_SLImageData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLInt16_t[] = {  {&_swigt__p_SLInt16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLInt32_t[] = {  {&_swigt__p_SLInt32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLMicrophone_s[] = {  {&_swigt__p_SLMicrophone_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLNeuralNetworkPrediction_s[] = {  {&_swigt__p_SLNeuralNetworkPrediction_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLStatus_t[] = {  {&_swigt__p_SLStatus_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLUInt16_t[] = {  {&_swigt__p_SLUInt16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLUInt32_t[] = {  {&_swigt__p_SLUInt32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLUInt8_t[] = {  {&_swigt__p_SLUInt8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SLWavFileInfo_s[] = {  {&_swigt__p_SLWavFileInfo_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fenv_t[] = {  {&_swigt__p_fenv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fexcept_t[] = {  {&_swigt__p_fexcept_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SLData_t[] = {  {&_swigt__p_p_SLData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_SLArbitraryFFT_t,
  _swigc__p_SLArrayIndex_t,
  _swigc__p_SLChar_t,
  _swigc__p_SLComplexPolar_s,
  _swigc__p_SLComplexRect_s,
  _swigc__p_SLData_t,
  _swigc__p_SLError_t,
  _swigc__p_SLFixData_t,
  _swigc__p_SLImageData_t,
  _swigc__p_SLInt16_t,
  _swigc__p_SLInt32_t,
  _swigc__p_SLMicrophone_s,
  _swigc__p_SLNeuralNetworkPrediction_s,
  _swigc__p_SLStatus_t,
  _swigc__p_SLUInt16_t,
  _swigc__p_SLUInt32_t,
  _swigc__p_SLUInt8_t,
  _swigc__p_SLWavFileInfo_s,
  _swigc__p_double,
  _swigc__p_fenv_t,
  _swigc__p_fexcept_t,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_SLData_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

